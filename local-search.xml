<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>blog搭建</title>
    <link href="/2022/05/05/Blog%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/05/05/Blog%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1-了解-Node"><a href="#1-了解-Node" class="headerlink" title="1. 了解 Node"></a>1. 了解 Node</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时, 它不是一门新的语言哈。</p><p>我们暂时不用太在意它的一些知识点，不需要现在学习。</p><p>目前只需要知道如何安装，然后如何使用一些简单的命令来实现我们现阶段想要做的功能。</p><h3 id="1-1-安装-Node"><a href="#1-1-安装-Node" class="headerlink" title="1.1 安装 Node"></a>1.1 安装 Node</h3><p>我们进入 Node 的官网 <a href="https://nodejs.org/zh-cn/">Node.js</a></p><ul><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">如何安装 Node.js</a></li><li>查看安装好的版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br><span class="hljs-comment"># 或者</span><br>node --version<br></code></pre></td></tr></table></figure><ul><li>这里推荐安装长期维护版本 （LTS 版本）（Long Term Support 长期支持维护的意思）</li></ul><p><img src="/imgs/blog%E6%90%AD%E5%BB%BA/image-20220403162631963.png" alt="image-20220403162631963"></p><h3 id="1-2-什么是-npm"><a href="#1-2-什么是-npm" class="headerlink" title="1.2 什么是 npm"></a>1.2 什么是 npm</h3><p>npm 是随同 Node.js 一起安装的<strong>包管理工具</strong>, 我们可以通过<code>npm install</code>等一些命令安装我们需要的第三方包（库）</p><ul><li>查看版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br></code></pre></td></tr></table></figure><ul><li>安装第三方包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install xxx<br><span class="hljs-comment"># 或者简写为</span><br>npm i xxx<br></code></pre></td></tr></table></figure><h3 id="1-3-Git"><a href="#1-3-Git" class="headerlink" title="1.3 Git"></a>1.3 Git</h3><p>Git（读音为&#x2F;gɪt&#x2F;）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p><p>从一般开发者的角度来看，git 有以下功能：</p><p>1、从服务器上克隆完整的 Git 仓库（包括代码和版本信息）到单机上。</p><p>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。</p><p>3、在单机上自己创建的分支上提交代码。</p><p>4、在单机上合并分支。</p><p>5、把服务器上最新版的代码 fetch 下来，然后跟自己的主分支合并。</p><p>6、生成补丁（patch），把补丁发送给主开发者。</p><p>7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</p><p>8、一般开发者之间解决冲突的方法，开发者之间可以使用 pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</p><p><img src="/imgs/blog%E6%90%AD%E5%BB%BA/v2-af3bf6fee935820d481853e452ed2d55_r.jpg" alt="preview"></p><p>上图展示了 git 的整体架构，以及和各部分相关的主要命令。先说明下其中涉及的各部分。</p><p><strong>工作区(working directory)，</strong>简言之就是你工作的区域。对于 git 而言，就是的本地工作目录。工作区的内容会包含提交到暂存区和版本库(当前提交点)的内容，同时也包含自己的修改内容。</p><p><strong><a href="https://www.zhihu.com/search?q=%E6%9A%82%E5%AD%98%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:625881308%7D">暂存区</a>(stage area, 又称为索引区 index)，</strong>是 git 中一个非常重要的概念。是我们把修改提交版本库前的一个过渡阶段。查看 GIT 自带帮助手册的时候，通常以 index 来表示暂存区。在工作目录下有一个.git 的目录，里面有个 index 文件，存储着关于暂存区的内容。git add 命令将工作区内容添加到暂存区。</p><p><strong>本地仓库(local repository)，</strong>版本控制系统的仓库，存在于本地。当执行 git commit 命令后，会将暂存区内容提交到仓库之中。在工作区下面有.git 的目录，这个目录下的内容不属于工作区，里面便是仓库的数据信息，暂存区相关内容也在其中。这里也可以使用 merge 或 rebase 将<strong>远程仓库副本</strong>合并到本地仓库。图中的只有 merge，注意这里也可以使用 rebase。</p><p><strong>远程版本库(remote repository)，</strong>与本地仓库概念基本一致，不同之处在于一个存在远程，可用于远程协作，一个却是存在于本地。通过 push&#x2F;pull 可实现本地与远程的交互；</p><p><strong>远程仓库副本，</strong>可以理解为存在于本地的远程仓库缓存。如需更新，可通过 git fetch&#x2F;pull 命令获取远程仓库内容。使用 fech 获取时，并未合并到本地仓库，此时可使用 git merge 实现远程仓库副本与本地仓库的合并。git pull 根据配置的不同，可为 git fetch + git merge 或 git fetch + git rebase。rebase 和 merge 的区别可以自己去网上找些资料了解下。</p><p><strong>Git 的一些相关命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version  <span class="hljs-comment"># 查看git版本</span><br>git <span class="hljs-built_in">clone</span>+ address<span class="hljs-comment"># 克隆某个从库</span><br>git status     <span class="hljs-comment"># 查看当前修改状态</span><br>git add .       <span class="hljs-comment"># 添加所有修改内容到暂存区</span><br>git commit <span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-comment"># 将暂存区内容提交到本地仓库</span><br>git push <span class="hljs-comment"># 将本地仓库内容，提交到远程仓库</span><br>git pull                <span class="hljs-comment"># 将远程仓库内容拉取，并与本地仓库合并</span><br>git fetch  <span class="hljs-comment"># 将远程仓库内容拉取到--&gt; 本地的远程仓库缓存中， 暂不合并到本地仓库。</span><br></code></pre></td></tr></table></figure><h2 id="2-了解静态-blog"><a href="#2-了解静态-blog" class="headerlink" title="2. 了解静态 blog"></a>2. 了解静态 blog</h2><p><a href="https://jamstack.org/generators/">https://jamstack.org/generators/</a></p><p>静态文档，什么是静态呢，就是说我们的数据都是本地准备好的，没有和后端做一个网络 http 请求上的数据交互。</p><p>比如说我们的 typora 笔记是 markdown 格式的，我们可以通过 docsify 这个第三方库，直接将我们的 md 文件生成静态文档，而不需要向后端请求动态数据。</p><p>静态文档(blog)的生成工具（库）有很多，常用的有</p><ul><li>hexo （基于 node.js，可选主题很多）</li><li>hugo （基于 go，速度快）</li><li>vuePress （Vue 官网就是通过它写的）</li><li>docsify （轻量简洁）</li><li>next.js （基于 React SSR ，强大）</li></ul><p>大家以后有时间都可以尝试着搭建一下哈</p><h2 id="3-hexo"><a href="#3-hexo" class="headerlink" title="3. hexo"></a>3. hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 –&gt; 2012 年</p><h3 id="3-1-安装-Node-js-x2F-Git"><a href="#3-1-安装-Node-js-x2F-Git" class="headerlink" title="3.1 安装 Node.js &#x2F; Git"></a>3.1 安装 Node.js &#x2F; Git</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><p><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><ul><li>太高会报 warning 警告</li><li><code>nvm ls-remote --lts</code> 忽略这句，需要装 nvm</li><li><a href="https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a> node 版本</li></ul></li><li><p><a href="http://git-scm.com/">Git</a></p><ul><li><a href="http://git-scm.com/download/mac">http://git-scm.com/download/mac</a></li><li><a href="http://git-scm.com/download/win">http://git-scm.com/download/win</a></li></ul></li></ul><h3 id="3-2-全局安装-hexo"><a href="#3-2-全局安装-hexo" class="headerlink" title="3.2 全局安装 hexo"></a>3.2 全局安装 hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><h4 id="1-新建一个文件键-hexo-blog"><a href="#1-新建一个文件键-hexo-blog" class="headerlink" title="1. 新建一个文件键 hexo-blog"></a>1. 新建一个文件键 hexo-blog</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br>npm install    <span class="hljs-comment"># npm i   # yarn install</span><br></code></pre></td></tr></table></figure><p>装好后, 文件内的目录结构大致如下</p><ul><li>看官方文档 - <a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></li></ul><p>其中，source 存放我们的草稿和 post 文件。 theme 是主题文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">.<br>├── _config.<span class="hljs-property">yml</span><br>├── package.<span class="hljs-property">json</span><br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><ol><li>_config.yml 网站配置信息 <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></li><li>package.json</li></ol><p><code>package.json</code> 文件是项目的清单。 它可以做很多完全互不相关的事情。 例如，它是用于工具的配置中心。 它也是 <code>npm</code> 和 <code>yarn</code> 存储所有已安装软件包的名称和版本的地方。</p><p>省略。。。</p><p>PS.</p><ul><li><p>淘宝镜像源 <a href="https://npmmirror.com/">https://npmmirror.com/</a></p></li><li><p>迁移 2022-6-30： <a href="https://zhuanlan.zhihu.com/p/465424728?spm=a2c6h.24755359.0.0.6d444dccWMZOJM">https://zhuanlan.zhihu.com/p/465424728?spm=a2c6h.24755359.0.0.6d444dccWMZOJM</a></p></li></ul><h3 id="3-2-命令"><a href="#3-2-命令" class="headerlink" title="3.2 命令"></a>3.2 命令</h3><ol><li><strong>new</strong> 新建一篇文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post title  <span class="hljs-comment"># 如果标题包含空格， 用“” 或&#x27;&#x27; 引起来</span><br>hexo new post <span class="hljs-string">&quot;好好学习 天天向上&quot;</span><br>hexo n <span class="hljs-string">&quot;第一篇博客&quot;</span>  <span class="hljs-comment"># 简写</span><br>hexo n <span class="hljs-built_in">test</span>        <span class="hljs-comment"># 没有引号也可以</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>generate</strong> 生成静态文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo g        <span class="hljs-comment"># 简写</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>server</strong> 启动服务器</li></ol><p>默认情况下，访问网址为： <code>http://localhost:4000/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br>hexo s       <span class="hljs-comment"># 简写</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>deploy</strong> 部署</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo deploy<br>hexo d        # 简写<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>clean</strong> 清缓存</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="3-3-theme-主题"><a href="#3-3-theme-主题" class="headerlink" title="3.3 theme 主题"></a>3.3 theme 主题</h3><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>挑一个喜欢的安装~~~ Enjoy！</p><p>点击主题蓝色的文字 进入 github 主题库的安装说明， 按步骤来就好了~~</p><p>For Example</p><p><strong>keep 主题</strong></p><p><img src="/imgs/blog%E6%90%AD%E5%BB%BA/image-20220424031145502.png" alt="image-20220424031145502"></p><p>If you’re using Hexo 5.0 or later, the simplest way to install is through npm:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> hexo<span class="hljs-literal">-site</span><br><span class="hljs-variable">$</span> npm install hexo<span class="hljs-literal">-theme-keep</span><br></code></pre></td></tr></table></figure><p>Or you can clone the entire repository:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> hexo-site</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></code></pre></td></tr></table></figure><p>After the installation, open Hexo config file and set <code>theme</code> variable to <code>keep</code>.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">theme:</span> <span class="hljs-meta">keep</span><br></code></pre></td></tr></table></figure><p><strong>Next 主题</strong></p><p><img src="/imgs/blog%E6%90%AD%E5%BB%BA/image-20220424031310331.png" alt="image-20220424031310331"></p><h3 id="3-4-一键部署"><a href="#3-4-一键部署" class="headerlink" title="3.4 一键部署"></a>3.4 一键部署</h3><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="2"><li><p>gitee 中新建仓库</p><p><img src="/imgs/blog%E6%90%AD%E5%BB%BA/image-20220424030533544.png" alt="image-20220424030533544"></p></li></ol><p><img src="/imgs/blog%E6%90%AD%E5%BB%BA/image-20220424030608576.png" alt="image-20220424030608576"></p><ol start="2"><li>修改_config.yml 中部署相关配置。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: &lt;repository url&gt; <span class="hljs-comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br>  branch: [branch]<br>  message: [message]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo: https://gitee.com/vrfe/hexo-blog.git<br>  branch: master<br></code></pre></td></tr></table></figure><ol start="3"><li>执行命令</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo g<br>hexo d<br># 合并<br>hexo g -d<br></code></pre></td></tr></table></figure><hr><h2 id="4-docsify"><a href="#4-docsify" class="headerlink" title="4.docsify"></a>4.docsify</h2><ul><li><a href="https://docsify.js.org/#/zh-cn/quickstart">docsify-官网</a></li></ul><h3 id="4-1-全局安装"><a href="#4-1-全局安装" class="headerlink" title="4.1 全局安装"></a>4.1 全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i docsify-cli -g<br></code></pre></td></tr></table></figure><h3 id="4-2-本地预览"><a href="#4-2-本地预览" class="headerlink" title="4.2 本地预览"></a>4.2 本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cd 到 docs 目录，执行</span><br>docsify serve<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Day02 构造函数和原型</title>
    <link href="/2022/05/05/JS%E9%AB%98%E7%BA%A7/day02/1.%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B/"/>
    <url>/2022/05/05/JS%E9%AB%98%E7%BA%A7/day02/1.%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-构造函数和原型"><a href="#1-构造函数和原型" class="headerlink" title="1. 构造函数和原型"></a>1. 构造函数和原型</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>在典型的 OOP 的语言中（如 Java），都存在类的概念，类就是对象的模板，对象就是类的实例，但在 ES6 之前， JS 中并没用引入类的概念。</p><p>ES6， 全称 ECMAScript 6.0 ，2015.06 发版。但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。</p><p>在 ES6 之前 ，对象不是基于类创建的，而是用一种称为构建函数的特殊函数来定义对象和它们的特征。</p><p><strong>创建对象可以通过以下三种方式：</strong></p><p>\1. 对象字面量</p><p>\2. new Object()</p><p>\3. 自定义构造函数</p><h2 id="1-2-构造函数"><a href="#1-2-构造函数" class="headerlink" title="1.2 构造函数"></a>1.2 构造函数</h2><p><strong>构造函数</strong>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><p>在 JS 中，使用构造函数时要注意以下两点：</p><p>1.构造函数用于创建某一类对象，其首字母要大写</p><p>2.构造函数要和 new 一起使用才有意义，但不是必须搭配 new</p><p><strong>new</strong> <strong>在执行时会做四件事情：</strong></p><p>① 在内存中创建一个新的空对象。</p><p>② 让 this 指向这个新的对象。</p><p>③ 执行构造函数里面的代码，给这个新对象添加属性和方法。</p><p>④ 返回这个新对象（所以构造函数里面不需要 return ）。</p><p>JavaScript 的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的 this 上添加。通过这两种方式添加的成员，就分别称为静态成员和实例成员。</p><p>l <strong>静态成员：</strong>在构造函数本上添加的成员称为静态成员，只能由构造函数本身来访问</p><p>l <strong>实例成员：</strong>在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问</p><h2 id="1-3-构造函数的问题"><a href="#1-3-构造函数的问题" class="headerlink" title="1.3 构造函数的问题"></a>1.3 构造函数的问题</h2><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image002.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image004.gif"></p><h2 id="1-4-构造函数原型-prototype"><a href="#1-4-构造函数原型-prototype" class="headerlink" title="1.4 构造函数原型 prototype"></a>1.4 构造函数原型 prototype</h2><p>原型也是一个对象，我们也称为 prototype 为原型对象。其作用是共享所有对象共有的<strong>方法</strong>。</p><p>构造函数通过原型分配的函数是所有对象所<strong>共享的</strong>。</p><p>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象。注意这个 prototype 就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p><p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><h2 id="1-5-对象原型-proto"><a href="#1-5-对象原型-proto" class="headerlink" title="1.5 对象原型 proto"></a>1.5 对象原型 <strong>proto</strong></h2><p>原型都会指向原型对象</p><p>对象都会有一个属性 <strong>proto</strong>指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有<strong>proto</strong>原型的存在。</p><p>方法查找规则：首先看实例对象身上有没有 sing 方法，有的话执行这个对象上的 sing，没有的话，会由<em>proto</em>指向 prototype,从而去 prototype 找 sing</p><p>l <strong>proto</strong>对象原型和原型对象 prototype 是等价的</p><p>l <strong>proto</strong>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image006.gif"></p><h2 id="1-6-constructor-构造函数"><a href="#1-6-constructor-构造函数" class="headerlink" title="1.6 constructor 构造函数"></a>1.6 constructor 构造函数</h2><p>对象原型（ <strong>proto</strong>）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image008.gif"></p><p>constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</p><p>一般情况下，对象的方法都在构造函数的原型对象中设置。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image010.gif"></p><p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image012.gif"></p><p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了。</p><p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image014.gif"></p><h2 id="1-7-构造函数、实例、原型对象三者之间的关系"><a href="#1-7-构造函数、实例、原型对象三者之间的关系" class="headerlink" title="1.7 构造函数、实例、原型对象三者之间的关系"></a>1.7 构造函数、实例、原型对象三者之间的关系</h2><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image016.gif"></p><h2 id="1-8-原型链"><a href="#1-8-原型链" class="headerlink" title="1.8 原型链"></a>1.8 原型链</h2><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image018.gif"></p><h2 id="1-9-JavaScript-的成员查找机制-就近原则"><a href="#1-9-JavaScript-的成员查找机制-就近原则" class="headerlink" title="1.9 JavaScript 的成员查找机制(就近原则)"></a>1.9 JavaScript 的成员查找机制(就近原则)</h2><p>① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p><p>② 如果没有就查找它的原型（也就是<strong>proto</strong>指向的 prototype 原型对象）。</p><p>③ 如果还没有就查找原型对象的原型（Object 的原型对象）。</p><p>④ 依此类推一直找到 Object 为止（null）。</p><p>⑤ <strong>proto</strong>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</p><h2 id="1-10-原型对象-this-指向"><a href="#1-10-原型对象-this-指向" class="headerlink" title="1.10 原型对象 this 指向"></a>1.10 原型对象 this 指向</h2><p>构造函数中的 this 指向我们实例对象.</p><p>原型对象里面放的是方法, 这个方法里面的 this 指向的是这个方法的调用者, 也就是这个实例对象.</p><h2 id="1-11-扩展内置对象"><a href="#1-11-扩展内置对象" class="headerlink" title="1.11 扩展内置对象"></a>1.11 扩展内置对象</h2><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法。比如给数组增加自定义求和的功能。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image020.gif"></p><p>注意：数组和字符串内置对象不能给原型对象覆盖操作 Array.prototype &#x3D; {} (用赋值形式会覆盖原来的对象原型只能用点 xxx 的形式)，只能是 Array.prototype.xxx &#x3D;function(){} 的方式。</p><h1 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h1><p>ES6 之前并没有给我们提供 extends 继承。我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承。</p><h2 id="2-1-call"><a href="#2-1-call" class="headerlink" title="2.1 call()"></a>2.1 call()</h2><p>调用这个函数, 并且修改函数运行时的 this 指向</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image022.gif"></p><p>l thisArg：当前调用函数 this 的指向对象</p><p>l arg1，arg2：传递的其他参数</p><h2 id="2-2-借用构造函数继承父类型属性"><a href="#2-2-借用构造函数继承父类型属性" class="headerlink" title="2.2 借用构造函数继承父类型属性"></a>2.2 借用构造函数继承父类型属性</h2><p>核心原理： 通过 call() 把父类型的 this 指向子类型的 this ，这样就可以实现子类型继承父类型的属性。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image024.gif"></p><h2 id="2-3-借用原型对象继承父类型方法"><a href="#2-3-借用原型对象继承父类型方法" class="headerlink" title="2.3 借用原型对象继承父类型方法"></a>2.3 借用原型对象继承父类型方法</h2><p>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法。</p><p>核心原理：</p><p>① 将子类所共享的方法提取出来，让子类的 prototype 原型对象 &#x3D; new 父类()</p><p>② 本质：子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象</p><p>③ 将子类的 constructor 从新指向子类的构造函数(Son 原型对象被 father 实例对象覆盖，因此 constructor 指向了父亲，需要重新指向 son)</p><h1 id="3-类的本质"><a href="#3-类的本质" class="headerlink" title="3. 类的本质"></a>3. 类的本质</h1><p>\1. class 本质还是 function.</p><p>\2. 类的所有方法都定义在类的 prototype 属性上</p><p>\3. 类创建的实例,里面也有<strong>proto</strong> 指向类的 prototype 原型对象</p><p>\4. 所以 ES6 的类它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><p>\5. 所以 ES6 的类其实就是语法糖.</p><p>\6. 语法糖:语法糖就是一种便捷写法. 简单理解, 有两种方法可以实现同样的功能, 但是一种写法更加清晰、方便,那么这个方法就是语法糖</p><h1 id="4-ES5-中的新增方法"><a href="#4-ES5-中的新增方法" class="headerlink" title="4. ES5 中的新增方法"></a>4. ES5 中的新增方法</h1><h2 id="4-1-ES5-新增方法概述"><a href="#4-1-ES5-新增方法概述" class="headerlink" title="4.1 ES5 新增方法概述"></a>4.1 ES5 新增方法概述</h2><p>ES5 中给我们新增了一些方法，可以很方便的操作数组或者字符串，这些方法主要包括：</p><p>l 数组方法</p><p>l 字符串方法</p><p>l 对象方法</p><h2 id="4-2-数组方法"><a href="#4-2-数组方法" class="headerlink" title="4.2 数组方法"></a>4.2 数组方法</h2><p>迭代(遍历)方法：forEach()、map()、filter()、some()、every()；</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image026.gif"></p><p>l forEach()里面使用 return 不会终止迭代函数</p><p>l some() 里面遇到 return true 时，会终止迭代，效率更高</p><p>l currentValue：数组当前项的值</p><p>l index：数组当前项的索引</p><p>l arr：数组对象本身</p><p>l filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素,主要用于筛选数组</p><p>n <strong>注意：它直接返回一个新数组</strong></p><p>l **some()****方法用于检测数组中的元素是否满足指定条件，注意它返回的是布尔值，如果查找到这个元素，就返回 true,否则 false**</p><p>l currentValue: 数组当前项的值</p><p>l index：数组当前项的索引</p><p>l arr：数组对象本身</p><h2 id="4-3-字符串方法"><a href="#4-3-字符串方法" class="headerlink" title="4.3 字符串方法"></a>4.3 字符串方法</h2><p>trim() 方法会从一个字符串的两端删除空白字符。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image028.gif"></p><p>trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</p><h2 id="4-4-对象方法"><a href="#4-4-对象方法" class="headerlink" title="4.4 对象方法"></a>4.4 对象方法</h2><p>\1. Object.keys() 用于获取对象自身所有的属性名</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image030.gif"></p><p>l 效果类似 for…in</p><p>l 返回一个由属性名组成的数组</p><p>\2. Object.defineProperty() 定义新属性或修改原有的属性。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image032.gif"></p><p>l Object.defineProperty() 第三个参数 descriptor 说明： 以对象形式 { } 书写</p><p>l value:设置属性的值 默认为 undefined</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image034.gif"></p><p>l writable:值是否可以重写。true |false 默认为 false</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image036.gif"></p><p>l enumerable:目标属性是否可以被遍历（枚举）。true | false 默认为 false</p><p>l configurable:目标属性是否可以被删除或是否可以再次修改特性 truefalse 默认为 false,同时也不能修改第三个参数里面的特性，（即不能用层叠的方法在下面再写一个 defineProperty,修改参数）</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day02/clip_image038.gif"></p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day04 正则表达式</title>
    <link href="/2022/05/05/JS%E9%AB%98%E7%BA%A7/day04/2.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8%20JavaScript%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/05/JS%E9%AB%98%E7%BA%A7/day04/2.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8%20JavaScript%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="2-正则表达式在-JavaScript-中的使用"><a href="#2-正则表达式在-JavaScript-中的使用" class="headerlink" title="2. 正则表达式在 JavaScript 中的使用"></a>2. 正则表达式在 JavaScript 中的使用</h1><h2 id="2-1-创建正则表达式"><a href="#2-1-创建正则表达式" class="headerlink" title="2.1 创建正则表达式"></a>2.1 创建正则表达式</h2><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p><strong>1.</strong> <strong>通过调用 RegExp 对象的构造函数创建</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day04/clip_image002.gif"></p><p><strong>2.</strong> <strong>通过字面量创建</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day04/clip_image004.gif"></p><p>&#x2F;&#x2F; 注释中间放表达式就是正则字面量</p><h1 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3. 正则表达式中的特殊字符"></a>3. 正则表达式中的特殊字符</h1><h1 id="4-正则表达式中的替换"><a href="#4-正则表达式中的替换" class="headerlink" title="4. 正则表达式中的替换"></a>4. 正则表达式中的替换</h1>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day01 JavaScript 面向对象</title>
    <link href="/2022/05/05/JS%E9%AB%98%E7%BA%A7/day01/JavaScript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/05/05/JS%E9%AB%98%E7%BA%A7/day01/JavaScript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-面向对象编程介绍"><a href="#1-面向对象编程介绍" class="headerlink" title="1. 面向对象编程介绍"></a>1. 面向对象编程介绍</h1><h2 id="1-1-两大编程思想"><a href="#1-1-两大编程思想" class="headerlink" title="1.1 两大编程思想"></a>1.1 两大编程思想</h2><p>面向过程和面向对象</p><h2 id="1-2-面向过程编程-POP-Process-oriented-programming"><a href="#1-2-面向过程编程-POP-Process-oriented-programming" class="headerlink" title="1.2 面向过程编程 POP(Process-oriented programming)"></a>1.2 面向过程编程 POP(Process-oriented programming)</h2><p><strong>面向过程</strong>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</p><p>例子：将大象装进冰箱，面向过程做法：<br><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image002.gif"></p><p>面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。</p><h2 id="1-3-面向对象编程-OOP-Object-Oriented-Programming"><a href="#1-3-面向对象编程-OOP-Object-Oriented-Programming" class="headerlink" title="1.3 面向对象编程 OOP(Object Oriented Programming)"></a>1.3 面向对象编程 OOP(Object Oriented Programming)</h2><p><strong>面向对象</strong>是把事务分解成为一个个对象，然后由对象之间分工与合作。</p><p>举个栗子：将大象装进冰箱，面向对象做法。</p><p>先找出对象，并写出这些对象的功能：</p><p><strong>1.</strong> <strong>大象对象</strong></p><p>l 进去</p><p><strong>2.</strong> <strong>冰箱对象</strong></p><p>l 打开</p><p>l 关闭</p><p><strong>3.</strong> <strong>使用大象和冰箱的功能</strong></p><p>面向对象是以对象功能来划分问题，而不是步骤。</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p><p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p><p>面向对象的特性：</p><p>l 封装性</p><p>l 继承性</p><p>l 多态性</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image004.gif"></p><h2 id="1-4-面向过程和面向对象的对比"><a href="#1-4-面向过程和面向对象的对比" class="headerlink" title="1.4 面向过程和面向对象的对比"></a>1.4 面向过程和面向对象的对比</h2><p><strong>面向过程</strong></p><p><strong>优点：</strong>性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。</p><p><strong>缺点：</strong>没有面向对象易维护、易复用、易扩展</p><p><strong>面向对象</strong></p><p><strong>优点：</strong>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</p><p><strong>缺点：</strong>性能比面向过程低</p><p>用面向过程的方法写出来的程序是一份蛋炒饭，而用面向对象写出来的程序是一份盖浇饭。</p><h1 id="2-ES6-中的类和对象"><a href="#2-ES6-中的类和对象" class="headerlink" title="2. ES6 中的类和对象"></a>2. ES6 中的类和对象</h1><p>面向对象更贴近我们的实际生活, 可以使用面向对象描述现实世界事物. 但是事物分为具体的事物和抽象的事物</p><p>面向对象的思维特点:</p><p>1.抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</p><p>2.对类进行实例化, 获取类的对象</p><p>面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点,不断的创建对象,使用对象,指挥对象做事情.</p><h2 id="2-1-对象"><a href="#2-1-对象" class="headerlink" title="2.1 对象"></a>2.1 对象</h2><p>现实生活中：万物皆对象，对象是一个具体的事物，看得见摸得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。</p><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的：</p><p>l 属性：事物的<strong>特征，</strong>在对象中用<strong>属性</strong>来表示（常用名词）</p><p>l 方法：事物的<strong>行为，</strong>在对象中用<strong>方法</strong>来表示（常用动词）</p><h2 id="2-2-类-class"><a href="#2-2-类-class" class="headerlink" title="2.2 类 class"></a>2.2 类 class</h2><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p><p>类抽象了对象的公共部分，它泛指某一大类（class）</p><p>对象特指某一个，通过类来实例化一个具体的对象</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image006.gif"></p><p><strong>面向对象的思维特点:</strong></p><p>1.抽取（抽象）对象共用的属性和行为组织(封装)成一个<strong>类</strong>(模板)</p><p>2.对类进行实例化, 获取类的<strong>对象</strong></p><h2 id="2-3-创建类"><a href="#2-3-创建类" class="headerlink" title="2.3 创建类"></a>2.3 创建类</h2><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image008.gif"></p><p><strong>创建实例：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image010.gif"></p><p><strong>注意：</strong>class name 的 name 类名习惯性定义首字母大写, 类必须使用 new 实例化对象，class name 后面不能跟小括号 new name 后面一定要加小括号，constructor()前面不要写 function，普通函数（方法）前面也不用写 function</p><h2 id="2-4-类-constructor-构造函数"><a href="#2-4-类-constructor-构造函数" class="headerlink" title="2.4 类 constructor 构造函数"></a>2.4 类 constructor 构造函数</h2><p>constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象，通过 new 命令生成对象实例时，自动调用该方法。如果我们不写这个函数, 类内部会自动给我们创建一个 constructor()函数</p><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image012.gif"></p><p><strong>创建实例：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image014.gif"></p><h2 id="2-5-类添加方法"><a href="#2-5-类添加方法" class="headerlink" title="2.5 类添加方法"></a>2.5 类添加方法</h2><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image016.gif"></p><p><strong>创建实例：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image018.gif"></p><h1 id="3-类的继承"><a href="#3-类的继承" class="headerlink" title="3. 类的继承"></a>3. 类的继承</h1><h2 id="3-1-继承"><a href="#3-1-继承" class="headerlink" title="3.1 继承"></a>3.1 继承</h2><p>现实中的继承：子承父业，比如我们都继承了父亲的姓。</p><p>程序中的继承：子类可以继承父类的一些属性和方法。</p><p><strong>注意：继承遵循就近原则</strong></p><p>\1. 继承中，如果实例化子类输出一个方法，先看子类有没有这个方法，如果有就先执行子类的。</p><p>\2. 继承中，如果子类没有，就去查找父类有没有这个方法，如果有，就执行父类的这个方法。</p><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image020.gif"></p><p><strong>实例：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image022.gif"></p><h2 id="3-2-super-关键字"><a href="#3-2-super-关键字" class="headerlink" title="3.2 super 关键字"></a>3.2 super 关键字</h2><p>super 关键字用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数（将子类构造函数的参数传递给父类，然后便可以使用父类的函数方法）</p><p><strong>调用父类的构造函数：</strong></p><p><strong>语法：super(父类构造函数&#x2F;函数的参数)</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image024.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image026.gif"></p><p>注意: 子类在构造函数中使用 super, 必须放到 this 前面 (必须先调用父类的构造方法,在使用子类构造方法)</p><p><strong>案例：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image028.gif"></p><p><strong>调用父类的方法：</strong></p><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image030.gif"></p><p><strong>继承父类方法同时扩展自己方法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image032.gif"></p><p><strong>注意： super 必须写在 this 前面</strong></p><p><strong>三个注意点:</strong></p><p>1.在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象.（即：要先声明定义类才能调用，而不能先调用再声明）</p><p>\2. 类里面的共有属性和方法一定要加 this 使用.</p><p><strong>例如：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image034.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image036.gif"></p><p>3.类里面的 this 指向问题.</p><p>4.constructor 里面的 this 指向实例对象, 方法里面的 this 指向这个方法的调用者,如果方法没有被注册事件调用，则 this 指向实例对象，如果被调用，则指向事件源，如需重新指向实例对象需要将实例对象的 this 通过变量进行储存。将需要改变的 this 改为该变量</p><script>​        var that;​        var _that;​        class Star {​            constructor(uname, age) {​                // constructor 里面的this 指向的是 创建的实例对象​                that = this;​                console.log(this); ​                this.uname = uname;​                this.age = age;​                // this.sing();​                this.btn = document.querySelector('button');​                this.btn.onclick = this.sing;​            }​            sing() {​                // 这个sing方法里面的this 指向的是 btn 这个按钮,因为这个按钮调用了这个函数​                console.log(this); ​                console.log(that.uname); // that里面存储的是constructor里面的this​            }​            dance() {​                // 这个dance里面的this 指向的是实例对象 ldh 因为ldh 调用了这个函数​                _that = this;​                console.log(this);​            }​        } ​        var ldh = new Star('刘德华');​        console.log(that === ldh);​        ldh.dance();​        console.log(_that === ldh); ​        // 1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象 ​        // 2. 类里面的共有的属性和方法一定要加this使用.​    </script><h1 id="4-类的初始化"><a href="#4-类的初始化" class="headerlink" title="4. 类的初始化"></a>4. 类的初始化</h1><p>用于一些注册事件的初始化绑定，（即在刷新页面或首次加载页面时提前调用一次初始化函数，绑定注册事件。）</p><p><strong>语法：</strong></p><p><strong>init</strong>() {注册事件等}</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image038.gif"></p><p><strong>函数的调用：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image040.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image042.gif"></p><h1 id="5-面向对象案例"><a href="#5-面向对象案例" class="headerlink" title="5 面向对象案例"></a>5 面向对象案例</h1><h2 id="5-1-面向对象版-tab-栏切换-添加功能"><a href="#5-1-面向对象版-tab-栏切换-添加功能" class="headerlink" title="5.1 面向对象版 tab 栏切换 添加功能"></a>5.1 面向对象版 tab 栏切换 添加功能</h2><h3 id="5-1-1-insertAdjacentHTML-position-text"><a href="#5-1-1-insertAdjacentHTML-position-text" class="headerlink" title="5.1.1 insertAdjacentHTML(position, text)"></a>5.1.1 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML">insertAdjacentHTML(position, text)</a></h3><p>\1. 点击 + 可以实现添加新的选项卡和内容</p><p>\2. 第一步: 创建新的选项卡 li 和 新的内容 section</p><p>\3. 第二步: 把创建的两个元素追加到对应的父元素中.</p><p>\4. 以前的做法: 动态创建元素 createElement , 但是元素里面内容较多, 需要 innerHTML 赋值,在 appendChild 追加到父元素里面.</p><p>\5. 高级做法: 利用 insertAdjacentHTML() 可以直接把字符串格式元素添加到父元素中</p><p>\6. appendChild 不支持追加字符串的子元素, insertAdjacentHTML 支持追加字符串的元素</p><p>\7. insertAdjacentHTML(追加的位置,‘要追加的字符串元素’)</p><p>\8. 追加的位置有: <strong>beforeend</strong> 插入元素内部的最后一个子节点之后</p><p><strong>position:</strong></p><p>l ‘beforebegin’：元素自身的前面。</p><p>l ‘afterbegin’：插入元素内部的第一个子节点之前。</p><p>l ‘beforeend’：插入元素内部的最后一个子节点之后。</p><p>l ‘afterend’：元素自身的后面。</p><p><strong>text:</strong></p><p>是要被解析为 HTML 或 XML 元素，并插入到 DOM 树中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString">DOMString</a>。</p><h3 id="位置名称的可视化"><a href="#位置名称的可视化" class="headerlink" title="位置名称的可视化"></a>位置名称的可视化</h3><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image044.gif"></p><p><strong>注意：</strong>beforebegin 和 afterend 位置，仅在节点在树中且节点具有一个 parent 元素时工作。</p><h2 id="5-2-面向对象版-tab-栏切换-编辑功能"><a href="#5-2-面向对象版-tab-栏切换-编辑功能" class="headerlink" title="5.2 面向对象版 tab 栏切换 编辑功能"></a>5.2 面向对象版 tab 栏切换 编辑功能</h2><p>1.双击选项卡 li 或者 section 里面的文字,可以实现修改功能</p><p>2.双击事件是: ondblclick，‘dblclick’</p><p>3.如果双击文字,会默认选定文字,此时需要双击禁止选中文字</p><p>4.window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</p><p>5.核心思路: 双击文字的时候, 在 里面生成一个文本框, 当失去焦点或者按下回车然后把文本框输入的值给原先元素即可.</p><h4 id="5-2-1-双击生成文本框时默认选中文本内容"><a href="#5-2-1-双击生成文本框时默认选中文本内容" class="headerlink" title="5.2.1 双击生成文本框时默认选中文本内容"></a>5.2.1 双击生成文本框时默认选中文本内容</h4><p><strong>语法：$(‘input’).select()</strong></p><h4 id="5-2-2-双击生成文本框时默认聚焦"><a href="#5-2-2-双击生成文本框时默认聚焦" class="headerlink" title="5.2.2 双击生成文本框时默认聚焦"></a>5.2.2 双击生成文本框时默认聚焦</h4><p><strong>语法：$(‘input’).focus()</strong></p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day03 函数进阶</title>
    <link href="/2022/05/05/JS%E9%AB%98%E7%BA%A7/day03/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/05/05/JS%E9%AB%98%E7%BA%A7/day03/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-函数的定义和调用"><a href="#1-函数的定义和调用" class="headerlink" title="1. 函数的定义和调用"></a>1. 函数的定义和调用</h1><h2 id="1-1-函数的定义方式"><a href="#1-1-函数的定义方式" class="headerlink" title="1.1 函数的定义方式"></a>1.1 函数的定义方式</h2><p>\1. 函数声明方式 function 关键字 (命名函数)</p><p>\2. 函数表达式 (匿名函数)</p><p>\3. new Function()</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image002.gif"></p><p>l Function 里面参数都必须是字符串格式</p><p>l 第三种方式执行效率低，也不方便书写，因此较少使用</p><p>l 所有函数都是 Function 的实例(对象)</p><p>l 函数也属于对象</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image004.gif"></p><h2 id="1-2-函数的调用方式"><a href="#1-2-函数的调用方式" class="headerlink" title="1.2 函数的调用方式"></a>1.2 函数的调用方式</h2><p>\1. 普通函数</p><p>\2. 对象的方法</p><p>\3. 构造函数</p><p>\4. 绑定事件函数</p><p>\5. 定时器函数</p><p>\6. 立即执行函数</p><h1 id="2-this"><a href="#2-this" class="headerlink" title="2. this"></a>2. this</h1><h2 id="2-1-函数内-this-的指向"><a href="#2-1-函数内-this-的指向" class="headerlink" title="2.1 函数内 this 的指向"></a>2.1 函数内 this 的指向</h2><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了 this 的指向不同</p><p>一般指向我们的调用者.</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image006.gif"></p><h2 id="2-2-改变函数内部-this-指向"><a href="#2-2-改变函数内部-this-指向" class="headerlink" title="2.2 改变函数内部 this 指向"></a>2.2 改变函数内部 this 指向</h2><p>JavaScript 为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部 this 的指向问题，常用的有 bind()、call()、apply() 三种方法。</p><h4 id="1-call-方法"><a href="#1-call-方法" class="headerlink" title="1. call 方法"></a>1. call 方法</h4><p>call() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image008.gif"></p><p>l thisArg：在 fun 函数运行时指定的 this 值</p><p>l arg1，arg2：传递的其他参数</p><p>l 返回值就是函数的返回值，因为它就是调用函数</p><p>l 因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承</p><h4 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="2. apply 方法"></a>2. apply 方法</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image010.gif"></p><p>l thisArg：在 fun 函数运行时指定的 this 值</p><p>l argsArray：传递的值，参数必须是数组（伪数组）</p><p>l 返回值就是函数的返回值，因为它就是调用函数</p><p>l 因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image012.gif"></p><h4 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="3. bind 方法"></a>3. bind 方法</h4><p>bind() 方法不会调用函数。但是能改变函数内部 this 指向</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image014.gif"></p><p>l thisArg：在 fun 函数运行时指定的 this 值</p><p>l arg1，arg2：传递的其他参数</p><p>l **返回由指定的 this 值和初始化参数改造的****原函数拷贝**</p><p>l 因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image016.gif"></p><p><strong>类构造函数里注册事件的 this 指向修改：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image018.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image020.gif"></p><p>第一个参数修改函数的 this 指向，第二个参数将构造函数指向的实例对象作为参数传递给函数的 that，即可实现一个函数使用两个不同的 this 指向</p><h2 id="2-3-call-apply-bind-总结"><a href="#2-3-call-apply-bind-总结" class="headerlink" title="2.3 call apply bind 总结"></a>2.3 call apply bind 总结</h2><p><strong>相同点:</strong></p><p>都可以改变函数内部的 this 指向.</p><p><strong>区别点:</strong></p><p>1.call 和 apply 会调用函数, 并且改变函数内部 this 指向.</p><p>2.call 和 apply 传递的参数不一样,call 传递参数 aru1,aru2..形式 apply 必须数组形式[arg]</p><p>3.bind 不会调用函数, 可以改变函数内部 this 指向.</p><p><strong>主要应用场景:</strong></p><p>1.call 经常做继承.</p><p>2.apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</p><p>3.bind 不调用函数,但是还想改变 this 指向. 比如改变定时器内部的 this 指向.</p><h1 id="3-严格模式"><a href="#3-严格模式" class="headerlink" title="3. 严格模式"></a>3. 严格模式</h1><h2 id="3-1-什么是严格模式"><a href="#3-1-什么是严格模式" class="headerlink" title="3.1 什么是严格模式"></a>3.1 什么是严格模式</h2><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码。</p><p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>严格模式对正常的 JavaScript 语义做了一些更改：</p><p>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</p><p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p><p>3.提高编译器效率，增加运行速度。</p><p>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class, enum, export, extends, import, super 不能做变量名</p><h2 id="3-2-开启严格模式"><a href="#3-2-开启严格模式" class="headerlink" title="3.2 开启严格模式"></a>3.2 开启严格模式</h2><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><h4 id="1-为脚本开启严格模式"><a href="#1-为脚本开启严格模式" class="headerlink" title="1. 为脚本开启严格模式"></a>1. 为脚本开启严格模式</h4><p>为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句“usestrict”;（或‘usestrict’;）。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image022.gif"></p><p>因为”use strict”加了引号，所以老版本的浏览器会把它当作一行普通字符串而忽略。</p><p>有的 script 基本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image024.gif"></p><h4 id="2-为函数开启严格模式"><a href="#2-为函数开启严格模式" class="headerlink" title="2. 为函数开启严格模式"></a>2. 为函数开启严格模式</h4><p>要给某个函数开启严格模式，需要把“usestrict”; (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image026.gif"></p><p>将 “use strict” 放在函数体的第一行，则整个函数以 “严格模式” 运行。</p><h2 id="3-4-严格模式中的变化"><a href="#3-4-严格模式中的变化" class="headerlink" title="3.4 严格模式中的变化"></a>3.4 严格模式中的变化</h2><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><p><strong>1.</strong> <strong>变量规定</strong></p><p>\1. 在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，变量都必须先用 var 命令声明，然后再使用。</p><p>\2. 严禁删除已经声明变量。例如，delete x; 语法是错误的。</p><p><strong>2.</strong> <strong>严格模式下 this 指向问题</strong></p><p>① 以前在全局作用域函数中的 this 指向 window 对象。</p><p>② 严格模式下全局作用域中函数中的 this 是 undefined。</p><p>③ 以前构造函数时不加 new 也可以 调用,当普通函数，this 指向全局对象</p><p>④ 严格模式下,如果构造函数不加 new 调用, this 指向的是 undefined 如果给他赋值则会报错</p><p>⑤ new 实例化的构造函数指向创建的对象实例。</p><p>⑥ 定时器 this 还是指向 window。</p><p>⑦ 事件、对象还是指向调用者。</p><p><strong>3.</strong> <strong>函数变化</strong></p><p>① 函数不能有重名的参数。</p><p>② 函数必须声明在顶层.新版本的 JavaScript 会引入“块级作用域”（ ES6 中已引入）。为了与新版本接轨，不允许在非函数的代码块内声明函数。</p><h1 id="4-高阶函数"><a href="#4-高阶函数" class="headerlink" title="4. 高阶函数"></a>4. 高阶函数</h1><p><strong>高阶函数</strong>是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image028.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image030.gif"></p><p>此时 fn 就是一个高阶函数</p><p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数。</p><p>同理函数也可以作为返回值传递回来</p><h1 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5. 闭包"></a>5. 闭包</h1><h2 id="5-1-变量作用域"><a href="#5-1-变量作用域" class="headerlink" title="5.1 变量作用域"></a>5.1 变量作用域</h2><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><p>\1. 函数内部可以使用全局变量。</p><p>\2. 函数外部不可以使用局部变量。</p><p>\3. 当函数执行完毕，本作用域内的局部变量会销毁。</p><h2 id="5-2-什么是闭包"><a href="#5-2-什么是闭包" class="headerlink" title="5.2 什么是闭包"></a>5.2 什么是闭包</h2><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。 —– JavaScript 高级程序设计</p><p>简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image032.gif"></p><h2 id="5-3-在-chrome-中调试闭包"><a href="#5-3-在-chrome-中调试闭包" class="headerlink" title="5.3 在 chrome 中调试闭包"></a>5.3 在 chrome 中调试闭包</h2><p>\1. 打开浏览器，按 F12 键启动 chrome 调试工具。</p><p>\2. 设置断点。</p><p>\3. 找到 Scope 选项（Scope 作用域的意思）。</p><p>\4. 当我们重新刷新页面，会进入断点调试，Scope 里面会有两个参数（global 全局作用域、local 局部作用域）。</p><p>\5. 当执行到 fn2() 时，Scope 里面会多一个 Closure 参数 ，这就表明产生了闭包。</p><h2 id="5-4-闭包的作用"><a href="#5-4-闭包的作用" class="headerlink" title="5.4 闭包的作用"></a>5.4 闭包的作用</h2><p><strong>提问：我们怎么能在 fn() 函数外面访问 fn() 中的局部变量 num 呢 ？</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image034.gif"></p><p><strong>闭包作用：延伸变量的作用范围。</strong></p><h4 id="5-4-1-立即执行函数闭包应用"><a href="#5-4-1-立即执行函数闭包应用" class="headerlink" title="5.4.1 立即执行函数闭包应用"></a>5.4.1 立即执行函数闭包应用</h4><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day03/clip_image036.gif"></p><h2 id="5-5-闭包案例"><a href="#5-5-闭包案例" class="headerlink" title="5.5 闭包案例"></a>5.5 闭包案例</h2><p>\1. 循环注册点击事件。</p><p>\2. 循环中的 setTimeout()。</p><p>\3. 计算打车价格。</p><h2 id="5-6-闭包总结"><a href="#5-6-闭包总结" class="headerlink" title="5.6 闭包总结"></a>5.6 闭包总结</h2><p>**1.****闭包是什么？**</p><p>闭包是一个函数 （一个作用域可以访问另外一个函数的局部变量）</p><p><strong>2.</strong> <strong>闭包的作用是什么？</strong></p><p>延伸变量的作用范围</p><h1 id="6-递归"><a href="#6-递归" class="headerlink" title="6. 递归"></a>6. 递归</h1><h2 id="6-1-什么是递归？"><a href="#6-1-什么是递归？" class="headerlink" title="6.1 什么是递归？"></a>6.1 什么是递归？</h2><p>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。</p><p>简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p>递归函数的作用和循环效果一样</p><p>由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return。</p><h2 id="6-2-利用递归求数学题"><a href="#6-2-利用递归求数学题" class="headerlink" title="6.2 利用递归求数学题"></a>6.2 利用递归求数学题</h2><p>\1. 求 1 * 2 *3 … * n 阶乘。</p><p>\2. 求斐波那契数列 。</p><p>\3. 根据 id 返回对应的数据对象</p><h2 id="6-3-利用递归求-根据-id-返回对应的数据对象"><a href="#6-3-利用递归求-根据-id-返回对应的数据对象" class="headerlink" title="6.3 利用递归求:根据 id 返回对应的数据对象"></a>6.3 利用递归求:根据 id 返回对应的数据对象</h2><h2 id="6-4-浅拷贝和深拷贝"><a href="#6-4-浅拷贝和深拷贝" class="headerlink" title="6.4 浅拷贝和深拷贝"></a>6.4 浅拷贝和深拷贝</h2><p>1.浅拷贝只是拷贝一层, 更深层次对象级别的只拷贝引用.</p><p>2.深拷贝拷贝多层, 每一级别的数据都会拷贝.</p><p>3.Object.assign(<em>target</em>, …<em>sources</em>) es6 新增方法可以浅拷贝</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day05 ES6</title>
    <link href="/2022/05/05/JS%E9%AB%98%E7%BA%A7/day05/ES6/"/>
    <url>/2022/05/05/JS%E9%AB%98%E7%BA%A7/day05/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-简介"><a href="#ES6-简介" class="headerlink" title="ES6 简介"></a>ES6 简介</h1><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image002.gif"></p><p>ES6 实际上是一个泛指，泛指 ES2015 及后续的版本。</p><p><strong>为什么使用 ES6 ?</strong></p><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript 语言本身也有一些令人不满意的地方。</p><p>l 变量提升特性增加了程序运行时的不可预测性</p><p>l 语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</p><h1 id="ES6-的新增语法"><a href="#ES6-的新增语法" class="headerlink" title="ES6 的新增语法"></a>ES6 的新增语法</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>ES6 中新增的用于声明变量的关键字。</p><p>l let 声明的变量只在所处于的块级有效</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image004.gif"></p><p>注意：使用 let 关键字声明的变量才具有块级作用域，使用 var 声明的变量不具备块级作用域特性。</p><p>l 不存在变量提升</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image006.gif"></p><p>l 暂时性死区</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image008.gif"></p><p>经典面试题</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image010.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image012.gif"></p><p>经典面试题图解：此题的关键点在于变量 i 是全局的，函数执行时输出的都是全局作用域下的 i 值。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image014.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image016.gif"></p><p>经典面试题图解：此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的 i 值.</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>作用：声明常量，常量就是值（内存地址）不能变化的量。</p><p>l 具有块级作用域</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image018.gif"></p><p>l 声明常量时必须赋值</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image020.gif"></p><p>l 常量赋值后，值不能修改。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image022.gif"></p><p>l 复杂数据可以修改值</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image024.gif"></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><p>ES6 中允许从数组中提取值，按照对应位置，对变量赋值。对象也可以实现解构。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image026.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image028.gif"></p><p>如果解构不成功，变量的值为 undefined。</p><p><strong>对象解构</strong></p><p>按照一定模式，从数组中或对象中提取值，将提取出来的值赋值给另外的变量。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image030.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image032.gif"></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6 中新增的定义函数的方式。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image034.gif"></p><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image036.gif"></p><p>如果形参只有一个，可以省略小括号</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image038.gif"></p><p>箭头函数不绑定 this 关键字，箭头函数中的 this，指向的是函数定义位置的上下文 this。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image040.gif"></p><p>箭头函数面试题</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image042.gif"></p><p>obj 是对象不能产生作用域，因此箭头函数 say 的 this 指向全局</p><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组。</p><p><strong>扩展运算符</strong>…args 代表接收剩余所有的实参，在参数名前面加上三个点使其本身变为一个数组</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image044.gif"></p><p>剩余参数和解构配合使用</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image046.gif"></p><h1 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h1><h2 id="Array-的扩展方法"><a href="#Array-的扩展方法" class="headerlink" title="Array 的扩展方法"></a>Array 的扩展方法</h2><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列(将数组的中括号给去掉了)。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image048.gif"></p><p>console.log(…ary)之所以其中没有逗号，是因为在 log 方法中被当做了参数分隔符</p><p>扩展运算符可以应用于合并数组。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image050.gif"></p><p>两个扩展运算符之间用逗号分隔。</p><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将类数组或可遍历对象转换为真正的数组（加中括号）</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image052.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image054.gif"></p><p>方法还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组。（相当于对数组中每个元素进行遍历）</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image056.gif"></p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员,并返回该成员，如果没有找到返回 undefined</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image058.gif"></p><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置,返回索引号，如果没有找到返回-1</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image060.gif"></p><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>表示某个数组是否包含给定的值，返回布尔值。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image062.gif"></p><h2 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h2><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>ES6 新增的创建字符串的方式，使用反引号定义。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image064.gif"></p><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><p>l startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</p><p>l endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image066.gif"></p><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat 方法表示将原字符串(只能是字符串)重复 n 次，返回一个新字符串。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image068.gif"></p><h2 id="Set-数据结构"><a href="#Set-数据结构" class="headerlink" title="Set 数据结构"></a>Set 数据结构</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用来生成 Set 数据结构。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image070.gif"></p><p>Set 函数可以接受一个数组作为参数，用来初始化。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image072.gif"></p><p>实际存储值只有 1,2,3,4</p><p>使用方法 set.size 可以返回伪数组的数组长度</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image074.gif"></p><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><p>l add(value)：添加某个值，返回 Set 结构本身，可以多次添加。添加重复值不会生效</p><p>l delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</p><p>l has(value)：返回一个布尔值，表示该值是否为 Set 的成员</p><p>l clear()：清除所有成员，没有返回值</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image076.gif"></p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day05/clip_image078.gif"></p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day05</title>
    <link href="/2022/05/05/WebAPIs/day05/"/>
    <url>/2022/05/05/WebAPIs/day05/</url>
    
    <content type="html"><![CDATA[<h1 id="滚动事件和加载事件"><a href="#滚动事件和加载事件" class="headerlink" title="滚动事件和加载事件"></a>滚动事件和加载事件</h1><h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><p>l 当页面进行滚动时触发的事件</p><p>l 为什么要学？</p><p>n 很多网页需要检测用户把页面滚动到某个区域后做一些处理， 比如固定导航栏，比如返回顶部</p><p>l 事件名：scroll</p><p>l 监听整个页面滚动：</p><p>n 给 window 或 document 添加 scroll 事件</p><p><img src="/img/WebAPIs/day05/clip_image002.gif" alt="截图.png"></p><h2 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h2><h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><p>l 加载外部资源（如图片、外联 CSS 和 JavaScript 等）加载完毕时触发的事件</p><p>l 为什么要学？</p><p>n 有些时候需要等页面资源全部处理完了做一些事情</p><p>n 老代码喜欢把 script 写在 head 中，这时候直接找 dom 元素找不到</p><p>l 事件名：load</p><p>l 监听页面所有资源加载完毕：</p><p>n 给 window 添加 load 事件</p><p><img src="/img/WebAPIs/day05/clip_image004.gif" alt="截图.png"></p><p>l 注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定 load 事件</p><h2 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h2><p><img src="/img/WebAPIs/day05/clip_image006.gif" alt="截图.png"></p><p>window.onresize 是调整窗口大小加载事件, 当触发时就调用的处理函数。</p><p>注意：</p><p>\1. 只要窗口大小发生像素变化，就会触发这个事件。</p><p>\2. 我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p><h4 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h4><p>l 当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表</p><p>l 、图像等完全加载</p><p>l 事件名：DOMContentLoaded</p><p>l 监听页面 DOM 加载完毕：</p><p>n 给 document 添加 DOMContentLoaded 事件</p><p><img src="/img/WebAPIs/day05/clip_image008.gif" alt="截图.png"></p><h1 id="元素大小和位置"><a href="#元素大小和位置" class="headerlink" title="元素大小和位置"></a>元素大小和位置</h1><h2 id="scroll-家族"><a href="#scroll-家族" class="headerlink" title="scroll 家族"></a>scroll 家族</h2><p>l 使用场景：</p><p>我们想要页面滚动一段距离，比如 100px，就让某些元素</p><p>显示隐藏，那我们怎么知道，页面滚动了 100 像素呢？</p><p>就可以使用 scroll 来检测页面滚动的距离~~~</p><p>l <strong>获取宽高：</strong></p><p>n 获取元素的内容总宽高（不包含滚动条）返回值不带单位</p><p>n scrollWidth 和 scrollHeight 代表内容的高宽，不包含边框和滚动条（添加滚动条会使 scrollWidth&#x2F;Height 变化）</p><p>l <strong>获取位置:</strong></p><p>n 获取元素内容往左、往上滚出去看不到的距离</p><p>n scrollLeft 和 scrollTop</p><p>n 这两个属性值是可以修改的</p><p>u 例如：在滚动事件中给固定值后，会在滑动鼠标滚轮时，直接将滚动条定位在 500 位置</p><p><img src="/img/WebAPIs/day05/clip_image010.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day05/clip_image012.gif" alt="截图.png"></p><p>l 开发中，我们经常检测页面滚动的距离，比如页面滚动 100 像素，就可以显示一个元素，或者固定一个元素</p><p><img src="/img/WebAPIs/day05/clip_image014.gif" alt="截图.png"></p><p>注意事项：document.documentElement HTML 文档返回对象为 HTML 元素</p><p><img src="/img/WebAPIs/day05/clip_image016.gif" alt="截图.png"></p><h2 id="offset-家族"><a href="#offset-家族" class="headerlink" title="offset 家族"></a>offset 家族</h2><p><img src="/img/WebAPIs/day05/clip_image018.gif" alt="截图.png"></p><p>l <strong>使用场景：</strong></p><p>前面案例滚动多少距离，都是我们自己算的，最好是页面</p><p>滚动到某个元素，就可以做某些事。</p><p>简单说，就是通过 js 的方式，得到元素在页面中的位置</p><p>这样我们可以做，页面滚动到这个位置，就可以返回</p><p>顶部的小盒子显示…</p><p>l <strong>获取宽高：</strong></p><p>n 获取元素的自身宽高、包含元素自身设置的宽高、padding、border</p><p>n offsetWidth 和 offsetHeight</p><p>l <strong>获取位置：</strong></p><p>n 获取元素距离自己定位父级元素的左、上距离（类似于定位属性的 top 和 left 值）</p><p>n offsetLeft 和 offsetTop 注意是只读属性</p><p>l <strong>window.pageYOffset</strong></p><p>n 返回文档在垂直方向已滚动的像素值</p><p><img src="/img/WebAPIs/day05/clip_image020.gif" alt="截图.png"></p><h2 id="client-家族"><a href="#client-家族" class="headerlink" title="client 家族"></a>client 家族</h2><p>l 获取宽高：</p><p>n 获取元素的可见部分宽高（不包含边框，滚动条等）</p><p>n clientWidth 和 clientHeight</p><p>l 获取位置：</p><p>n 其实就是左边框和上边框宽度</p><p>n clientLeft 和 clientTop 注意是只读属性</p><p><img src="/img/WebAPIs/day05/clip_image022.gif" alt="截图.png"></p><p>l 会在窗口尺寸改变的时候触发事件：</p><p>n resize</p><h1 id="鼠标在页面的坐标"><a href="#鼠标在页面的坐标" class="headerlink" title="鼠标在页面的坐标"></a>鼠标在页面的坐标</h1><p><img src="/img/WebAPIs/day05/clip_image024.gif" alt="截图.png"></p><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1>]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day06</title>
    <link href="/2022/05/05/WebAPIs/day06/"/>
    <url>/2022/05/05/WebAPIs/day06/</url>
    
    <content type="html"><![CDATA[<h1 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h1><h2 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM(浏览器对象模型)"></a>BOM(浏览器对象模型)</h2><p>l BOM(Browser Object Model ) 是浏览器对象模型</p><p>l window 是浏览器内置中的全局对象，我们所学习的所有 Web APIs 的知识内容都是基于 window 对象实现的</p><p>l window 对象下包含了 navigator、location、document、history、screen 5 个属性，即所谓的 BOM （浏览器对象模型）</p><p><img src="/img/WebAPIs/day06/clip_image002.gif" alt="截图.png"></p><p>l document 是实现 DOM 的基础，它其实是依附于 window 的属性。</p><p>l 注：依附于 window 对象的所有属性和方法，使用时可以省略 window</p><h2 id="定时器-延时函数"><a href="#定时器-延时函数" class="headerlink" title="定时器-延时函数"></a>定时器-延时函数</h2><p>l JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p><p>l <strong>语法：</strong></p><p><img src="/img/WebAPIs/day06/clip_image004.gif" alt="截图.png"></p><p>l setTimeout 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略 window</p><p>l <strong>清除延时函数：</strong></p><p><img src="/img/WebAPIs/day06/clip_image006.gif" alt="截图.png"></p><p>timer 是一个定时器的 ID 值，我们可以使用这个 ID 值来清除这个定时器</p><p>l 结合递归函数可以使用 setTimeout 实现 setInterval 一样的功能</p><p>l setTimeout 调用几次就会产生几个定时器，setTimeout 是放在一个 for 循环中，是一个 3 次循环，所以 setTimeout 会被调用 3 次，所以界面中会产生 3 个定时器，因此 4 输出的次数是 3 次。</p><p><img src="/img/WebAPIs/day06/clip_image008.gif" alt="截图.png"></p><p>l <strong>两种定时器对比：</strong></p><p>n setInterval 的特征是重复执行，首次执行会延时</p><p>n setTimeout 的特征是延时执行，只执行 1 次</p><p>n setTimeout 结合递归函数，能模拟 setInterval 重复执行</p><p>n clearTimeout 清除由 setTimeout 创建的定时任务</p><h2 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h2><h4 id="JS-是单线程"><a href="#JS-是单线程" class="headerlink" title="JS 是单线程"></a>JS 是单线程</h4><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这</p><p>门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比</p><p>如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问</p><p>题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许</p><p>JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p><p><strong>同步</strong></p><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步</p><p>做法：我们要烧水煮饭，等水开了（10 分钟之后），再去切菜，炒菜。</p><p><strong>异步</strong></p><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事</p><p>情。比如做饭的异步做法，我们在烧水的同时，利用这 10 分钟，去切菜，炒菜。</p><p>他们的本质区别：这条流水线上各个流程的执行顺序不同。</p><p><strong>同步任务</strong></p><p>同步任务都在主线程上执行，形成一个<strong>执行栈。</strong></p><p><strong>异步任务</strong></p><p>JS 的异步是通过回调函数实现的。</p><p>一般而言，异步任务有以下三种类型:</p><p>1、普通事件，如 click、resize 等</p><p>2、资源加载，如 load、error 等</p><p>3、定时器，包括 setInterval、setTimeout 等</p><p>异步任务相关添加到任务队列中（任务队列也称为消息队列）。</p><p><strong>同步和异步任务执行</strong></p><p>\1. 先执行执行栈中的同步任务。</p><p>\2. 异步任务放入任务队列中。</p><p>\3. 一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务</p><p>结束等待状态，进入执行栈，开始执行。</p><p><img src="/img/WebAPIs/day06/clip_image010.gif" alt="截图.png"></p><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><p><strong>图例</strong></p><p><img src="/img/WebAPIs/day06/clip_image012.gif" alt="截图.png"></p><p><strong>经典面试题</strong></p><p><img src="/img/WebAPIs/day06/clip_image014.gif" alt="截图.png"></p><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><p>l location 的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</p><p>l button 标签自带提交功能只要一点击且有 form 的话自动提交，但是输出数据的只能用 form 来提交，因此应该给 form 一个提交事件。</p><p><img src="/img/WebAPIs/day06/clip_image016.gif" alt="截图.png"></p><p>l <strong>常用属性和方法：</strong></p><p>n href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</p><p><img src="/img/WebAPIs/day06/clip_image018.gif" alt="截图.png"></p><p>n search 属性获取地址中携带的参数，符号 ？后面部分</p><p><img src="/img/WebAPIs/day06/clip_image020.gif" alt="截图.png"></p><p>u <strong>举例：</strong>将填写在 input 框里的值提交到 taget.html 里面去</p><p><img src="/img/WebAPIs/day06/clip_image022.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day06/clip_image024.gif" alt="截图.png"></p><p>n hash 属性获取地址中的啥希值，符号 # 后面部分</p><p><img src="/img/WebAPIs/day06/clip_image026.gif" alt="截图.png"></p><p>n reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</p><p><img src="/img/WebAPIs/day06/clip_image028.gif" alt="截图.png"></p><h4 id="location-其他对象方法"><a href="#location-其他对象方法" class="headerlink" title="location 其他对象方法"></a>location 其他对象方法</h4><p><img src="/img/WebAPIs/day06/clip_image030.gif" alt="截图.png"></p><h2 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h2><p>l navigator 的数据类型是对象，该对象下记录了浏览器自身的相关信息</p><p>l <strong>常用属性和方法：</strong></p><p>n 通过 userAgent 检测浏览器的版本及平台</p><p><img src="/img/WebAPIs/day06/clip_image032.gif" alt="截图.png"></p><h2 id="histroy-对象"><a href="#histroy-对象" class="headerlink" title="histroy 对象"></a>histroy 对象</h2><p>l history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</p><p>l <strong>常用属性和方法：</strong></p><p><img src="/img/WebAPIs/day06/clip_image034.gif" alt="截图.png"></p><p>history 对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p><p><img src="/img/WebAPIs/day06/clip_image036.gif" alt="截图.png"></p><h1 id="swiper-插件"><a href="#swiper-插件" class="headerlink" title="swiper 插件"></a>swiper 插件</h1><p>l 插件: 就是别人写好的一些代码,我们只需要复制对应的代码,就可以直接实现对应的效果</p><p>l 学习插件的基本过程</p><p>n 熟悉官网,了解这个插件可以完成什么需求 <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p><p>n 看在线演示,找到符合自己需求的 demo <a href="https://www.swiper.com.cn/demo/index.html">https://www.swiper.com.cn/demo/index.html</a></p><p>n 查看基本使用流程 <a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a></p><p>n 查看 APi 文档,去配置自己的插件 <a href="https://www.swiper.com.cn/api/index.html">https://www.swiper.com.cn/api/index.html</a></p><p>n 注意: 多个 swiper 同时使用的时候, 类名需要注意区分</p><p>l 本地文件</p><p><img src="/img/WebAPIs/day06/clip_image038.gif" alt="截图.png"></p><h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><h2 id="本地存储特性"><a href="#本地存储特性" class="headerlink" title="本地存储特性"></a>本地存储特性</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在</p><p>本地存储大量的数据，HTML5 规范提出了相关解决方案。</p><p>l 数据存储在用户浏览器中</p><p>l 设置、读取方便、甚至页面刷新不丢失数据</p><p>l 容量较大，sessionStorage 和 localStorage 约 5M 左右</p><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>l 生命周期永久生效，除非手动删除 否则关闭页面也会存在</p><p>l 可以多窗口（页面）共享（同一浏览器可以共享）</p><p>l 以键值对的形式存储使用</p><p>l <strong>存储数据：</strong></p><p>n localStorage.setItem(‘key’,’value’)</p><p>l <strong>获取数据：</strong></p><p>n localStorage.getItem(‘key’)</p><p>l <strong>删除数据：</strong></p><p>n localStorage.removeItem(‘key’)</p><p>l <strong>存储复杂数据类型存储</strong></p><p>n 本地只能存储字符串,无法存储复杂数据类型.需要将复杂数据类型转换成 JSON 字符串,在存储到本地</p><p>l <strong>JSON.stringify(复杂数据类型)</strong></p><p>n 将复杂数据转换成 JSON 字符串 存储 本地存储中</p><p>l <strong>清除数据</strong></p><p>n clear()</p><p><img src="/img/WebAPIs/day06/clip_image040.gif" alt="截图.png"></p><p>n JSON 属性和值都是双引号进行包含</p><p><img src="/img/WebAPIs/day06/clip_image042.gif" alt="截图.png"></p><p>l <strong>JSON.parse(JSON 字符串)</strong></p><p>n 将 JSON 字符串转换成对象 取出 时候使用</p><p><img src="/img/WebAPIs/day06/clip_image044.gif" alt="截图.png"></p><h2 id="sessionStorage（了解）"><a href="#sessionStorage（了解）" class="headerlink" title="sessionStorage（了解）"></a>sessionStorage（了解）</h2><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、以键值对的形式存储使用</p><p>4、 用法跟 localStorage 基本相同</p><h1 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h1><p>1.获取本地存储数据</p><p>n localStorage.setItem(‘key’,’value’)</p><p>\2. 清除原有页面元素内容</p><p>n dom 元素.innerHTML&#x3D; ‘ ‘</p><p>\3. 根据数据数组对象重新渲染页面</p><p>n 遍历数据数组对象，创建节点，将数据挨个放进节点中，然后追加节点。</p><p>注意点： 重新渲染数据时，如果想通过数组对象里的 flag &#x3D; true &#x2F;false 来添加不同的属性时，可以使用三元表达式来判断。</p><p>例如：根据 true 和 false 来添加不同的类名。</p><p><img src="/img/WebAPIs/day06/clip_image046.gif" alt="截图.png"></p>]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day04</title>
    <link href="/2022/05/05/WebAPIs/day04/"/>
    <url>/2022/05/05/WebAPIs/day04/</url>
    
    <content type="html"><![CDATA[<h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><h2 id="获取事件对象"><a href="#获取事件对象" class="headerlink" title="获取事件对象"></a>获取事件对象</h2><p>l <strong>事件对象是什么</strong></p><p>n 也是个对象，这个对象里有事件触发时的相关信息</p><p>n 例如：鼠标点击事件中，事件对象就存了鼠标点在哪个位置等信息</p><p>l <strong>如何获取</strong></p><p>n 在事件绑定的回调函数的第一个参数就是事件对象</p><p>n 一般命名为 event、ev、e</p><h2 id="事件对象常用属性"><a href="#事件对象常用属性" class="headerlink" title="事件对象常用属性"></a>事件对象常用属性</h2><p><img src="/img/WebAPIs/day04/clip_image002.gif" alt="截图.png"></p><p><strong>e.target 和 this 的区别</strong></p><p>l this 是事件绑定的元素（绑定这个事件处理函数的元素） 。</p><p>l e.target 是事件触发的元素。</p><p><strong>e.target 和 e.currentTarget 的区别</strong></p><p>n e.target 是事件触发的元素。</p><p>n e.currentTarget :注册绑定事件的元素</p><p>n this &#x3D;&#x3D;&#x3D; e.currentTarget</p><p><strong>部分常用属性</strong></p><p>l type</p><p>n 获取当前的事件类型</p><p>l clientX&#x2F;clientY</p><p>n 获取光标相对于浏览器可见窗口左上角的位置</p><p>n 当前可视区域有效</p><p>l offsetX&#x2F;offsetY</p><p>n 获取光标相对于当前 DOM 元素左上角的位置</p><p>l pageX&#x2F;pageY</p><p>n 不受可视窗口的影响，跟文档坐标有关系</p><p>n 整个页面有效</p><p>l key</p><p>n 用户按下的键盘键的值</p><p>n 开发常用 keyup 或者 keydown</p><p>u keyup 常用于回车时发布内容等操作，keydown 常用于鼠标点击拖拽物件等操作</p><p>n 现在不提倡使用 keyCode</p><p>n keypress</p><p>u 不能识别 ctrl,shift，方向键等功能键</p><p>l 属性查找方法：</p><p>先声明事件对象（即回调函数参数 e），再使用事件对象属性。</p><p><img src="/img/WebAPIs/day04/clip_image004.gif" alt="截图.png"></p><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><h2 id="事件流与两个阶段说明"><a href="#事件流与两个阶段说明" class="headerlink" title="事件流与两个阶段说明"></a>事件流与两个阶段说明</h2><p>l 事件流指的是事件完整执行过程中的流动路径</p><p>l 说明：假设页面里有个 div，当触发事件时，会经历两个阶段，分别是捕获阶段、冒泡阶段</p><p>l 简单来说：捕获阶段是 从父到子 冒泡阶段是从子到父</p><h2 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h2><p><img src="/img/WebAPIs/day04/clip_image006.gif" alt="截图.png"></p><h3 id="事件冒泡概念"><a href="#事件冒泡概念" class="headerlink" title="事件冒泡概念:"></a>事件冒泡概念:</h3><p>当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。这一过程被称为事件冒泡</p><p>l 简单理解：当一个元素触发事件后，会依次向上调用所有父级元素的同名事件（即如果儿子有一个点击事件，父亲也有个点击事件，那么点击儿子也会触发父亲的点击。）</p><p>l 事件冒泡是默认存在的（即第三个参数是否使用捕获机制不写即是 false，false 代表使用冒泡机制，true 代表使用捕获机制）</p><p><img src="/img/WebAPIs/day04/clip_image008.gif" alt="截图.png"></p><h3 id="事件捕获概念："><a href="#事件捕获概念：" class="headerlink" title="事件捕获概念："></a>事件捕获概念：</h3><p>从 DOM 的根元素开始去执行对应的事件 (从外到里)</p><p>l 事件捕获需要写对应代码才能看到效果</p><p>l 代码：</p><p><img src="/img/WebAPIs/day04/clip_image006.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day04/clip_image010.gif" alt="截图.png"></p><p>l 说明：</p><p>n addEventListener 第三个参数传入 true 代表是捕获阶段触发（很少使用）</p><p>n 若传入 false 代表冒泡阶段触发，默认就是 false</p><p>n 若是用 L0 事件监听，则只有冒泡阶段，没有捕获</p><h2 id="阻止事件流动"><a href="#阻止事件流动" class="headerlink" title="阻止事件流动"></a>阻止事件流动</h2><p>l 因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素</p><p>l 若想把事件就限制在当前元素内，就需要阻止事件流动</p><p>l <strong>阻止事件流动需要拿到事件对象</strong></p><p>l 语法：</p><p><img src="/img/WebAPIs/day04/clip_image012.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day04/clip_image014.gif" alt="截图.png"></p><p>l 此方法可以阻断事件流动传播，不光在冒泡阶段有效，捕获阶段也有效</p><p>l 鼠标经过事件：</p><p>n mouseover 和 mouseout 会有冒泡效果</p><p>n mouseenter 和 mouseleave 没有冒泡效果(推荐)</p><p>l <strong>阻止默认行为，比如链接点击不跳转，表单域的跳转</strong></p><p>l <strong>语法：</strong></p><p>l **e 为事件****对象**</p><p><img src="/img/WebAPIs/day04/clip_image016.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day04/clip_image018.gif" alt="截图.png"></p><p>l 两种注册事件的区别：</p><p>l 传统 on 注册（L0）</p><p>n 同一个对象,后面注册的事件会覆盖前面注册(同一个事件)（即层叠性）</p><p>n 直接使用 null 覆盖偶就可以实现事件的解绑</p><p>n 都是冒泡阶段执行的</p><p>l 事件监听注册（L2）</p><p>n 语法: addEventListener(事件类型, 事件处理函数, 是否使用捕获)</p><p>n 后面注册的事件不会覆盖前面注册的事件(同一个事件)</p><p>n 可以通过第三个参数去确定是在冒泡或者捕获阶段执行</p><p>n 必须使用 removeEventListener(事件类型, 事件处理函数, 获取捕获或者冒泡阶段)</p><p>n 匿名函数无法被解绑</p><h1 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h1><p>l 事件委托是利用事件冒泡的特征解决一些开发需求的知识技巧</p><p>l 总结：</p><p>n <strong>优点：</strong>给父级元素加事件（可以提高性能）</p><p>n <strong>原理：</strong>事件委托其实是利用事件冒泡的特点</p><p>n <strong>实现：</strong>事件对象.target 可以获得真正触发事件的元素</p><p>n target 里的属性 tagName 可以获得点击目标标签的大写名字</p><p><img src="/img/WebAPIs/day04/clip_image020.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day04/clip_image022.gif" alt="截图.png"></p><p>n</p>]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day07</title>
    <link href="/2022/05/05/WebAPIs/day07/"/>
    <url>/2022/05/05/WebAPIs/day07/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式</a></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>l 正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象</p><p>l 通常用来查找、替换那些符合正则表达式的文本，许多语言都支持正则表达式。</p><p>l 请在下图中找出【戴帽子和眼镜的男人】</p><p><img src="/img/WebAPIs/day07/clip_image002.gif" alt="截图.png"></p><p>l 戴帽子、戴眼镜、男人都是描述信息，通过这些信息能够在人群中查找到确定的某个人，那么这些用于查找的描述信息编</p><p>写一个模式，对应到计算机中就是所谓的正则表达式。</p><h4 id="正则表达式在-JavaScript-中的使用场景"><a href="#正则表达式在-JavaScript-中的使用场景" class="headerlink" title="正则表达式在 JavaScript 中的使用场景"></a>正则表达式在 JavaScript 中的使用场景</h4><p>l 例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)</p><p>l 比如用户名: &#x2F;^[a-z0-9_-]{3,16}$&#x2F; （只能输入英文 a-z，数字 0-9，下划线，减号。至少输入 3 位，最多输入 16 位）</p><p>l 过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><p><img src="/img/WebAPIs/day07/clip_image004.gif" alt="截图.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>l 我们想要查找是否有戴眼镜的人, 怎么做呢？</p><p>\1. 定义规则： 戴眼镜的</p><p>\2. 根据规则去查找：找到则返回</p><p>l 正则同样道理，我们分为两步：</p><p>\1. 定义规则</p><p>\2. 查找</p><p>l 比如：查找下面文本中是否包含字符串 ‘前端’</p><p><img src="/img/WebAPIs/day07/clip_image006.gif" alt="截图.png"></p><p>l JavaScript 中定义正则表达式的语法有两种，我们先学习其中比较简单的方法：</p><p>\1. <strong>定义正则表达式语法：</strong></p><p><img src="/img/WebAPIs/day07/clip_image008.gif" alt="截图.png"></p><p>n 其中 &#x2F; &#x2F; 是正则表达式字面量</p><p>l 比如：</p><p><img src="/img/WebAPIs/day07/clip_image010.gif" alt="截图.png"></p><p>\2. <strong>判断是否有符合规则的字符串：</strong></p><p>test() 方法 用来查看正则表达式与指定的字符串是否匹配</p><p>l <strong>语法：</strong></p><p><img src="/img/WebAPIs/day07/clip_image012.gif" alt="截图.png"></p><p>l 比如：</p><p><img src="/img/WebAPIs/day07/clip_image014.gif" alt="截图.png"></p><p>l 如果正则表达式与指定的字符串匹配 ，返回 true，否则 false</p><p>\3. <strong>检索（查找）符合规则的字符串：</strong></p><p>exec() 方法 在一个指定字符串中执行一个搜索匹配,如果有则返回该数值</p><p>l 语法：</p><p><img src="/img/WebAPIs/day07/clip_image016.gif" alt="截图.png"></p><p>l 比如：</p><p><img src="/img/WebAPIs/day07/clip_image018.gif" alt="截图.png"></p><p>如果匹配成功，exec() 方法返回一个数组，否则返回 null</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>l <strong>普通字符:</strong></p><p>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</p><p>也就是说普通字符只能够匹配字符串中与它们相同的字符。</p><p>l <strong>元字符(特殊字符）</strong></p><p>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</p><p>n 比如，规定用户只能输入英文 26 个英文字母，普通字符的话 abcdefghijklm…..</p><p>n 但是换成元字符写法： [a-z]</p><p>l <strong>参考文档：</strong></p><p>n MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p><p>n 正则测试工具: <a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a></p><p>l 为了方便记忆和学习，我们对众多的元字符进行了分类：</p><p>\1. 边界符（表示位置，开头和结尾，必须用什么开头，用什么结尾）</p><p>\2. 量词 （表示重复次数）</p><p>\3. 字符类 （比如 \d 表示 0~9）</p><h4 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h4><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><p><img src="/img/WebAPIs/day07/clip_image020.gif" alt="截图.png"></p><p>如果 ^ 和 $ 在一起，表示必须是精确匹配，即后面和前面相等。</p><p><img src="/img/WebAPIs/day07/clip_image022.gif" alt="截图.png"></p><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p>老师，你说的把这些知识点完全搞懂是指能够背出来的那种吗</p><p>量词用来 设定某个模式出现的次数，放在要重复的那个字符后面，并且只管自己前面一位的字符，</p><p><img src="/img/WebAPIs/day07/clip_image024.gif" alt="截图.png"></p><p><strong>注意： 逗号左右两侧千万不要出现空格</strong></p><p><img src="/img/WebAPIs/day07/clip_image026.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day07/clip_image028.gif" alt="截图.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="/img/WebAPIs/day07/clip_image030.gif" alt="截图.png"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p><img src="/img/WebAPIs/day07/clip_image032.gif" alt="截图.png"></p><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p>[ ]代表单个字符</p><h5 id="匹配字符集合"><a href="#匹配字符集合" class="headerlink" title="[ ] 匹配字符集合"></a>[ ] 匹配字符集合</h5><p>l 后面的字符串只要包含 abc 中任意一个字符，都返回 true 。</p><p><img src="/img/WebAPIs/day07/clip_image034.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day07/clip_image036.gif" alt="截图.png"></p><p>在前后加上^和$会使后面的字符串开头和结尾只能是 abc 中其中一个，并且要相同</p><h5 id="里面加上-连字符"><a href="#里面加上-连字符" class="headerlink" title="[ ] 里面加上 - 连字符"></a>[ ] 里面加上 - 连字符</h5><p>l 使用连字符 - 表示一个范围</p><p><img src="/img/WebAPIs/day07/clip_image038.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day07/clip_image040.gif" alt="截图.png"></p><p>l 比如：</p><p>n [a-z] 表示 a 到 z 26 个英文字母都可以</p><p>n [a-zA-Z] 表示大小写都可以</p><p>n [0-9] 表示 0~9 的数字都可以</p><p>n 单-减号或者单_下划线</p><p>认识下：</p><p><img src="/img/WebAPIs/day07/clip_image042.gif" alt="截图.png"></p><h5 id="里面加上-取反符号"><a href="#里面加上-取反符号" class="headerlink" title="[ ] 里面加上 ^ 取反符号"></a>[ ] 里面加上 ^ 取反符号</h5><p>l 比如：</p><p>n [^a-z] 匹配除了小写字母以外的字符</p><p>n 注意要写到中括号里面</p><h5 id="匹配除换行符之外的任何单个字符"><a href="#匹配除换行符之外的任何单个字符" class="headerlink" title=". 匹配除换行符之外的任何单个字符"></a>. 匹配除换行符之外的任何单个字符</h5><h5 id="预定义：指的是某些常见模式的简写方式。"><a href="#预定义：指的是某些常见模式的简写方式。" class="headerlink" title="预定义：指的是某些常见模式的简写方式。"></a>预定义：指的是某些常见模式的简写方式。</h5><p><img src="/img/WebAPIs/day07/clip_image044.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day07/clip_image046.gif" alt="截图.png"></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p><p><strong>语法：</strong></p><p><img src="/img/WebAPIs/day07/clip_image048.gif" alt="截图.png"></p><p>l i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</p><p>l g 是单词 global 的缩写，匹配所有满足正则表达式的结果</p><p><img src="/img/WebAPIs/day07/clip_image050.gif" alt="截图.png"></p><h4 id="替换-replace-替换"><a href="#替换-replace-替换" class="headerlink" title="替换 replace 替换"></a>替换 replace 替换</h4><p><strong>语法：</strong></p><p><img src="/img/WebAPIs/day07/clip_image052.gif" alt="截图.png"></p><p>若要替换多个元素，则使用或号隔开</p><p><img src="/img/WebAPIs/day07/clip_image054.gif" alt="截图.png"></p><h1 id="正则案例"><a href="#正则案例" class="headerlink" title="正则案例"></a>正则案例</h1><h2 id="小兔鲜注册模块"><a href="#小兔鲜注册模块" class="headerlink" title="小兔鲜注册模块"></a>小兔鲜注册模块</h2><p>不同模块之间，比如（表单验证，提交）等模块可用立即执行函数分别封装</p><p><img src="/img/WebAPIs/day07/clip_image056.gif" alt="截图.png"></p><h2 id="小兔鲜登录模块"><a href="#小兔鲜登录模块" class="headerlink" title="小兔鲜登录模块"></a>小兔鲜登录模块</h2><p>input 标签中添加 required 属性可自动帮忙识别框内是否输入字符，不能为空</p><p><img src="/img/WebAPIs/day07/clip_image058.gif" alt="截图.png"></p><h1 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h1><p>常见的触屏事件如下：</p><p><img src="/img/WebAPIs/day07/clip_image060.gif" alt="截图.png"></p><h3 id="触摸事件对象（TouchEvent）"><a href="#触摸事件对象（TouchEvent）" class="headerlink" title="触摸事件对象（TouchEvent）"></a>触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p><img src="/img/WebAPIs/day07/clip_image062.gif" alt="截图.png"></p><p>触摸事件对象重点我们看三个常见对象列表：</p><p><img src="/img/WebAPIs/day07/clip_image064.gif" alt="截图.png"></p><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p><h3 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h3><p>\1. touchstart、touchmove、touchend 可以实现拖动元素</p><p>\2. 但是拖动元素需要当前手指的坐标值 我们可以使用 targetTouches[0] 里面的 pageX 和 pageY</p><p>\3. 移动端拖动的原理： 手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</p><p>\4. 手指移动的距离： 手指滑动中的位置 减去 手指刚开始触摸的位置</p><p>拖动元素三步曲：</p><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>（3） 离开手指 touchend:</p><p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p><p>&#x2F;&#x2F; （1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p><p>​ &#x2F;&#x2F; （2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p><p>​ &#x2F;&#x2F; （3） 离开手指 touchend:</p><p>​ var div &#x3D; document.querySelector(‘div’)</p><p>​ var startX &#x3D; 0 &#x2F;&#x2F;获取手指初始坐标</p><p>​ var startY &#x3D; 0</p><p>​ var x &#x3D; 0 &#x2F;&#x2F;获得盒子原来的位置</p><p>​ var y &#x3D; 0</p><p>​ div.addEventListener(‘touchstart’, function (e) {</p><p>​ &#x2F;&#x2F; 获取手指初始坐标</p><p>​ startX &#x3D; e.targetTouches[0].pageX</p><p>​ startY &#x3D; e.targetTouches[0].pageY</p><p>​ x &#x3D; this.offsetLeft</p><p>​ y &#x3D; this.offsetTop</p><p>​ })</p><p>​ div.addEventListener(‘touchmove’, function (e) {</p><p>​ &#x2F;&#x2F; 计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标</p><p>​ var moveX &#x3D; e.targetTouches[0].pageX - startX</p><p>​ var moveY &#x3D; e.targetTouches[0].pageY - startY</p><p>​ &#x2F;&#x2F; 移动我们的盒子 盒子原来的位置 + 手指移动的距离</p><p>​ this.style.left &#x3D; x + moveX + ‘px’</p><p>​ this.style.top &#x3D; y + moveY + ‘px’</p><p>​ e.preventDefault() &#x2F;&#x2F; 阻止屏幕滚动的默认行为</p><p>​ })</p><h1 id="移动端常见特效"><a href="#移动端常见特效" class="headerlink" title="移动端常见特效"></a>移动端常见特效</h1><h3 id="案例-移动轮播图"><a href="#案例-移动轮播图" class="headerlink" title="案例: 移动轮播图"></a>案例: 移动轮播图</h3><p>移动端轮播图功能和基本 PC 端一致。</p><p>\1. 可以自动播放图片</p><p>\2. 手指可以拖动播放轮播图</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析:"></a>案例分析:</h3><p>\1. 自动播放功能</p><p>\2. 开启定时器</p><p>\3. 移动端移动，可以使用 translate 移动</p><p>\4. 想要图片优雅的移动，请添加过渡效果</p><p><img src="/img/WebAPIs/day07/clip_image066.gif" alt="截图.png"></p><p>\1. 自动播放功能-无缝滚动</p><p>\2. 注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p><p>\3. 此时需要添加检测过渡完成事件 transitionend</p><p>\4. 判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p><p>\5. 此时图片，去掉过渡效果，然后移动</p><p>\6. 如果索引号小于 0， 说明是倒着走， 索引号等于 2</p><p>\7. 此时图片，去掉过渡效果，然后移动</p><p><img src="/img/WebAPIs/day07/clip_image068.gif" alt="截图.png"></p><h1 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h1><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><p>\1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</p><meta name="viewport"content="user-scalable=no"><p>2.利用 touch 事件自己封装这个事件解决 300ms 延迟。</p><p>原理就是：</p><p>\1. 当我们手指触摸屏幕，记录当前触摸时间</p><p>\2. 当我们手指离开屏幕， 用离开的时间减去触摸的时间</p><p>\3. 如果时间小于 150ms，并且没有滑动过屏幕， 那么我们就定义为点击</p><p>代码如下:</p><p>&#x2F;&#x2F;封装 tap，解决 click 300ms 延时</p><p>function tap (obj, callback) {</p><p>​ var isMove &#x3D; false;</p><p>​ var startTime &#x3D; 0; &#x2F;&#x2F; 记录触摸时候的时间变量</p><p>​ obj.addEventListener(‘touchstart’, function (e) {</p><p>​ startTime &#x3D; Date.now(); &#x2F;&#x2F; 记录触摸时间</p><p>​ });</p><p>​ obj.addEventListener(‘touchmove’, function (e) {</p><p>​ isMove &#x3D; true; &#x2F;&#x2F; 看看是否有滑动，有滑动算拖拽，不算点击</p><p>​ });</p><p>​ obj.addEventListener(‘touchend’, function (e) {</p><p>​ if (!isMove &amp;&amp; (Date.now() - startTime) &lt; 150) { &#x2F;&#x2F; 如果手指触摸和离开时间小于 150ms 算点击</p><p>​ callback &amp;&amp; callback(); &#x2F;&#x2F; 执行回调函数</p><p>​ }</p><p>​ isMove &#x3D; false; &#x2F;&#x2F; 取反 重置</p><p>​ startTime &#x3D; 0;</p><p>​ });</p><p>}</p><p>&#x2F;&#x2F;调用</p><p>tap(div, function(){ &#x2F;&#x2F; 执行代码 });</p><h1 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h1><p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p><p>实现步骤：</p><p>\1. 获得盒子当前位置</p><p>\2. 让盒子在当前位置加上 1 个移动距离</p><p>\3. 利用定时器不断重复这个操作</p><p>\4. 加一个结束定时器的条件</p><p>\5. 注意此元素需要添加定位，才能使用 element.style.left</p><h3 id="1-6-2-动画函数给不同元素记录不同定时器"><a href="#1-6-2-动画函数给不同元素记录不同定时器" class="headerlink" title="1.6.2. 动画函数给不同元素记录不同定时器"></a>1.6.2. 动画函数给不同元素记录不同定时器</h3><p>如果多个元素都使用这个动画函数，每次都要 var 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p><p>function animate(obj, target) {</p><p>​ &#x2F;&#x2F; 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</p><p>​ &#x2F;&#x2F; 解决方案就是 让我们元素只有一个定时器执行</p><p>​ &#x2F;&#x2F; 先清除以前的定时器，只保留当前的一个定时器执行</p><p>​ clearInterval(obj.timer);</p><p>​ obj.timer &#x3D; setInterval(function() {</p><p>​ if (obj.offsetLeft &gt;&#x3D; target) {</p><p>​ &#x2F;&#x2F; 停止动画 本质是停止定时器</p><p>​ clearInterval(obj.timer);</p><p>​ }</p><p>​ obj.style.left &#x3D; obj.offsetLeft + 1 + ‘px’;</p><p>​ }, 30);</p><p>​ }</p><h2 id="缓动效果原理"><a href="#缓动效果原理" class="headerlink" title="缓动效果原理"></a>缓动效果原理</h2><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><p>思路：</p><p>\1. 让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</p><p>\2. <strong>核心算法： (目标值 - 现在的位置) &#x2F; 10 做为每次移动的距离步长</strong></p><p>\3. 停止的条件是： 让当前盒子位置等于目标位置就停止定时器</p><p>\4. 注意步长值需要取整</p><h2 id="动画函数多个目标值之间移动"><a href="#动画函数多个目标值之间移动" class="headerlink" title="动画函数多个目标值之间移动"></a>动画函数多个目标值之间移动</h2><p>可以让动画函数从 800 移动到 500。</p><p>当我们点击按钮时候，判断步长是正值还是负值</p><p>1.如果是正值，则步长往大了取整</p><p>2.如果是负值，则步长 向小了取整</p><h2 id="动函数添加回调函数"><a href="#动函数添加回调函数" class="headerlink" title="动函数添加回调函数"></a>动函数添加回调函数</h2><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p><p>1.声明回调函数 callback</p><p><img src="/img/WebAPIs/day07/clip_image070.gif" alt="截图.png"></p><p>2.将函数作为参数返回给 callback</p><p><img src="/img/WebAPIs/day07/clip_image072.gif" alt="截图.png"></p><p>\3. 符合条件调用函数（调用函数有两种写法）</p><p><img src="/img/WebAPIs/day07/clip_image074.gif" alt="截图.png"></p><p>回调函数写的位置：定时器结束的位置。</p><h2 id="动画完整版代码"><a href="#动画完整版代码" class="headerlink" title="动画完整版代码:"></a>动画完整版代码:</h2><p>function animate(obj, target, callback) {</p><p>​ &#x2F;&#x2F; console.log(callback); callback &#x3D; function() {} 调用的时候 callback()</p><p>​ &#x2F;&#x2F; 先清除以前的定时器，只保留当前的一个定时器执行</p><p>​ clearInterval(obj.timer);</p><p>​ obj.timer &#x3D; setInterval(function() {</p><p>​ &#x2F;&#x2F; 步长值写到定时器的里面</p><p>​ &#x2F;&#x2F; 把我们步长值改为整数 不要出现小数的问题</p><p>​ &#x2F;&#x2F; var step &#x3D; Math.ceil((target - obj.offsetLeft) &#x2F; 10);</p><p>​ var step &#x3D; (target - obj.offsetLeft) &#x2F; 10;</p><p>​ step &#x3D; step &gt; 0 ? Math.ceil(step) : Math.floor(step);</p><p>​ if (obj.offsetLeft &#x3D;&#x3D; target) {</p><p>​ &#x2F;&#x2F; 停止动画 本质是停止定时器</p><p>​ clearInterval(obj.timer);</p><p>​ &#x2F;&#x2F; 回调函数写到定时器结束里面</p><p>​ &#x2F;&#x2F; if (callback) {</p><p>​ &#x2F;&#x2F; &#x2F;&#x2F; 调用函数</p><p>​ &#x2F;&#x2F; callback();</p><p>​ &#x2F;&#x2F; }</p><p>​ callback &amp;&amp; callback();</p><p>​ }</p><p>​ &#x2F;&#x2F; 把每次加 1 这个步长值改为一个慢慢变小的值 步长公式：(目标值 - 现在的位置) &#x2F; 10</p><p>​ obj.style.left &#x3D; obj.offsetLeft + step + ‘px’;</p><p>​ }, 15);</p><p>}</p><p>​ &#x2F;&#x2F; 回调函数用法</p><p>​ var span &#x3D; document.querySelector(‘span’)</p><p>​ var btn500 &#x3D; document.querySelector(‘.btn500’)</p><p>​ var btn800 &#x3D; document.querySelector(‘.btn800’)</p><p>​ btn500.addEventListener(‘click’, function () {</p><p>​ &#x2F;&#x2F; 调用函数</p><p>​ animate(span, 500)</p><p>​ })</p><p>​ btn800.addEventListener(‘click’, function () {</p><p>​ &#x2F;&#x2F; 调用函数</p><p>​ animate(span, 800, function () {</p><p>​ &#x2F;&#x2F; alert(‘你好吗’);</p><p>​ span.style.backgroundColor &#x3D; ‘red’</p><p>​ })</p><p>​ })</p><h2 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h2><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：利用动画回调函数，添加一个变量来控制，锁住函数和解锁函数。</p><p>开始设置一个变量 var flag&#x3D; true;</p><p>If(flag){flag &#x3D; false; do something} 关闭水龙头</p><p>利用回调函数动画执行完毕， flag &#x3D; true 打开水龙头</p><p><img src="/img/WebAPIs/day07/clip_image076.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day07/clip_image078.gif" alt="截图.png"></p><h2 id="案例：返回顶部"><a href="#案例：返回顶部" class="headerlink" title="案例：返回顶部"></a>案例：返回顶部</h2><p>\1. 带有动画的返回顶部</p><p>\2. 此时可以继续使用我们封装的动画函数</p><p>\3. 只需要把所有的 left 相关的值改为 跟 页面垂直滚动距离相关就可以了</p><p>\4. 页面滚动了多少，可以通过 window.pageYOffset 得到</p><p>\5. 最后是页面滚动，使用 window.scroll(x,y)</p><h2 id="淘宝-flexible-js-源码分析"><a href="#淘宝-flexible-js-源码分析" class="headerlink" title="淘宝 flexible.js 源码分析"></a>淘宝 flexible.js 源码分析</h2><p>立即执行函数 (function(){})() 或者 (function(){}())</p><p>主要作用： 创建一个独立的作用域。 避免了命名冲突问题</p><p>下面三种情况都会刷新页面都会触发 load 事件。</p><p>1.a 标签的超链接</p><p>2.F5 或者刷新按钮（强制刷新）</p><p>3.前进后退按钮</p><p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了 DOM 和 JavaScript 的状态；实际上是将整个页面都保存在了内存里。</p><p>所以此时后退按钮不能刷新页面。</p><p>此时可以使用 pageshow 事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow 会在 load 事件触发后触发；根据事件对象中的 persisted 来判断是否是缓存中的页面触发的 pageshow 事件</p><p>注意这个事件给 window 添加。</p>]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day01</title>
    <link href="/2022/05/05/WebAPIs/day01/"/>
    <url>/2022/05/05/WebAPIs/day01/</url>
    
    <content type="html"><![CDATA[<h1 id="获取-DOM-对象"><a href="#获取-DOM-对象" class="headerlink" title="获取 DOM 对象"></a>获取 DOM 对象</h1><p>查找元素 DOM 元素就是选择页面中标签元素</p><h2 id="根据-CSS-选择器来获取-DOM-元素-重点"><a href="#根据-CSS-选择器来获取-DOM-元素-重点" class="headerlink" title="根据 CSS 选择器来获取 DOM 元素 (重点)"></a>根据 CSS 选择器来获取 DOM 元素 (重点)</h2><h3 id="选择匹配的第一个元素"><a href="#选择匹配的第一个元素" class="headerlink" title="选择匹配的第一个元素"></a>选择匹配的第一个元素</h3><p><strong>语法：</strong></p><p><img src="/img/WebAPIs/day01/clip_image002.gif"></p><p><strong>参数:</strong></p><p>包含一个或多个有效的 CSS 选择器 字符串</p><p><strong>注意：必须是字符串，也就是必须加引号</strong></p><p><strong>返回值：</strong></p><p>CSS 选择器匹配的第一个元素,一个 HTMLElement 对象。</p><p>如果没有匹配到，则返回 null。</p><h3 id="选择匹配的多个元素"><a href="#选择匹配的多个元素" class="headerlink" title="选择匹配的多个元素"></a>选择匹配的多个元素</h3><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image004.gif"></p><p>得到的是一个<strong>伪数组：</strong></p><p>l 有长度有索引号的数组</p><p>l 但是没有 pop() push() 等数组方法</p><p>想要得到里面的每一个对象或者修改里面的对象，则需要遍历（for）的方式获得。</p><p><strong>举例：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image006.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image008.gif"></p><p><strong>参数:</strong></p><p>包含一个或多个有效的 CSS 选择器 字符串，可以是标签选择器，类名选择器等。</p><p><strong>注意：必须是字符串，也就是必须加引号</strong></p><p><strong>返回值：</strong></p><p>CSS 选择器匹配的 NodeList 对象集合</p><p><strong>例如：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image010.gif"></p><h3 id="通过-css-属性选择器获取-dom-元素"><a href="#通过-css-属性选择器获取-dom-元素" class="headerlink" title="通过 css 属性选择器获取 dom 元素"></a>通过 css 属性选择器获取 dom 元素</h3><p>例如：</p><p>document.querySelector(‘[name&#x3D;username]’)</p><p>等号&#x3D;两边不能输入空格</p><h3 id="其他获取-DOM-元素方法（了解）"><a href="#其他获取-DOM-元素方法（了解）" class="headerlink" title="其他获取 DOM 元素方法（了解）"></a>其他获取 DOM 元素方法（了解）</h3><p>document.getElementById()</p><p>下面两个获得的是伪数组。使用需要加索引号</p><p>l document.getElementByTagName()</p><p>l document.getElementByClassName()</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image012.gif"></p><h3 id="获取特殊元素（body，html）"><a href="#获取特殊元素（body，html）" class="headerlink" title="获取特殊元素（body，html）"></a>获取特殊元素（body，html）</h3><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image014.gif"></p><h1 id="设置-x2F-修改-DOM-元素内容"><a href="#设置-x2F-修改-DOM-元素内容" class="headerlink" title="设置&#x2F;修改 DOM 元素内容"></a>设置&#x2F;修改 DOM 元素内容</h1><p>能够修改元素的文本更换内容</p><p>DOM 对象都是根据标签生成的,所以操作标签,本质上就是操作 DOM 对象。</p><p>就是操作对象使用的点语法。</p><p>如果想要修改标签元素的里面的内容，则可以使用如下几种方式：</p><p>l document.write() 方法</p><p>l 对象.innerText 属性</p><p>l 对象.innerHTML 属性</p><p>l <strong>document.write()</strong></p><p>n 只能将文本内容追加到 </body> 前面的位置</p><p>n 文本中包含的标签会被解析</p><p>l <strong>元素 innerText 属性</strong></p><p>n 将文本内容添加&#x2F;更新到任意标签位置</p><p>n 文本中包含的标签不会被解析</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image016.gif"></p><p>l <strong>元素.innerHTML 属性</strong></p><p>n 将文本内容添加&#x2F;更新到任意标签位置</p><p>n 文本中包含的标签会被解析</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image018.gif"></p><h1 id="设置-x2F-修改-DOM-元素属性"><a href="#设置-x2F-修改-DOM-元素属性" class="headerlink" title="设置&#x2F;修改 DOM 元素属性"></a>设置&#x2F;修改 DOM 元素属性</h1><h2 id="设置-x2F-修改元素常用属性"><a href="#设置-x2F-修改元素常用属性" class="headerlink" title="设置&#x2F;修改元素常用属性"></a>设置&#x2F;修改元素常用属性</h2><p>l 可以通过 JS 设置&#x2F;修改标签元素属性，比如通过 src 更换 图片</p><p>l 最常见的属性比如： href、title、src 等</p><p>l <strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image020.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image022.gif"></p><h2 id="设置-x2F-修改元素样式属性"><a href="#设置-x2F-修改元素样式属性" class="headerlink" title="设置&#x2F;修改元素样式属性"></a>设置&#x2F;修改元素样式属性</h2><p>还可以通过 JS 设置&#x2F;修改标签元素的样式属性。</p><p>l 比如通过 轮播图小圆点自动更换颜色样式</p><p>l 点击按钮可以滚动图片，这是移动的图片的位置 left 等等</p><h3 id="通过-style-属性操作-CSS"><a href="#通过-style-属性操作-CSS" class="headerlink" title="通过 style 属性操作 CSS"></a>通过 style 属性操作 CSS</h3><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image024.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image026.gif"></p><p>注意：</p><p>\1. 修改样式通过 style 属性引出</p><p>\2. 如果属性有-连接符，需要转换为小驼峰命名法</p><p>\3. 赋值的时候，需要的时候不要忘记加 css 单位</p><p>\4. 设置 body 的背景图片样式可以不用设置 dom 对象，直接写：</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image028.gif"></p><h3 id="操作类名-className-操作-CSS"><a href="#操作类名-className-操作-CSS" class="headerlink" title="操作类名(className) 操作 CSS"></a>操作类名(className) 操作 CSS</h3><p>如果修改的样式比较多，直接通过 style 属性修改比较繁琐，我们可以通过借助于 css 类名的形式</p><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image030.gif"></p><p>注意：</p><p>\1. 由于 class 是关键字, 所以使用 className 去代替</p><p>\2. className 是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image032.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image034.gif"></p><p><strong>问：为什么不直接在 div 的类名里面添加这一个类名？</strong></p><p><strong>答：因为一些交互行为需要添加或者删除这个类名</strong></p><h3 id="通过-classList-操作类控制-CSS"><a href="#通过-classList-操作类控制-CSS" class="headerlink" title="通过 classList 操作类控制 CSS"></a>通过 classList 操作类控制 CSS</h3><p>为了解决 className 容易覆盖以前的类名，我们可以通过 classList 方式追加和删除类名</p><p><strong>语法：</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image036.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image038.gif"></p><p><strong>注意：</strong></p><p><strong>1. 引号里面的类名不用在前面打 . 号</strong></p><p><strong>2. toggle 将元素的类名从有这个类名和无这个类名之间切换</strong></p><p><strong>3. add 添加类名时，如果已经存在类名不会重复添加</strong></p><h2 id="设置-x2F-修改表单元素属性"><a href="#设置-x2F-修改表单元素属性" class="headerlink" title="设置&#x2F;修改表单元素属性"></a>设置&#x2F;修改表单元素属性</h2><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p><p>正常的有属性有取值的 跟其他的标签属性没有任何区别</p><p>l 获取: DOM 对象.属性名</p><p>l 设置: DOM 对象.属性名 &#x3D; 新值</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image040.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image042.gif"></p><p>表单属性中添加就有效果,移除就没有效果,一律使用布尔值表示 如果为 true 代表添加了该属性 如果是 false 代表移除了该属性</p><p>比如： disabled、checked、selected</p><p><strong>额外：</strong></p><p><strong>1.</strong> 想要得到表单里用户输入的值可以用 value 来获取，例如 input，textarea,text 等带有 value 属性的表单元素，button 除外。</p><p><strong>2.</strong> 按钮 button 设置属性 disabled 可以使按钮变成不可点击状态。</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image044.gif"></p><h1 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h1><h2 id="Element-setAtrribute"><a href="#Element-setAtrribute" class="headerlink" title="Element.setAtrribute()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/setAttribute">Element.setAtrribute()</a></h2><p>设置指定元素上的某个属性值。如果属性已经存在，则更新该值；否则，使用指定的名称和值添加一个新的属性。</p><p>要获取某个属性当前的值，可使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getAttribute">getAttribute()</a>,对于不存在的属性则返回 null；要删除某个属性，可使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/removeAttribute">removeAttribute()</a>。</p><p><strong>语法：</strong></p><p><strong>element</strong>.setAttribute(‘<strong>name</strong>‘, <strong>value</strong>);</p><p>属性名，属性值要用引号包裹（除了数字类型）</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image046.gif"></p><h2 id="data-自定义属性"><a href="#data-自定义属性" class="headerlink" title="data-自定义属性:"></a>data-自定义属性:</h2><p>传统的自定义属性没有专门的定义规则,开发者随意定值,不够规范,所以在 html5 中推出来了专门的 data-自定义属性 在</p><p>标签上一律以 data- 开头</p><p>在 DOM 对象上一律以 dataset 对象方式获取（dataset 作为一个对象，储存自定义属性）</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image048.gif"></p><h1 id="定时器-间歇函数"><a href="#定时器-间歇函数" class="headerlink" title="定时器-间歇函数"></a>定时器-间歇函数</h1><h2 id="定时器函数介绍"><a href="#定时器函数介绍" class="headerlink" title="定时器函数介绍"></a>定时器函数介绍</h2><p>l 网页中经常会需要一种功能：每隔一段时间需要自动执行一段代码，不需要我们手动去触发</p><p>l 例如：网页中的倒计时</p><p>l 要实现这种需求，需要定时器函数</p><p>l 定时器函数有两种，今天我先讲间歇函数</p><h2 id="定时器函数基本使用"><a href="#定时器函数基本使用" class="headerlink" title="定时器函数基本使用"></a>定时器函数基本使用</h2><p>定时器函数可以开启和关闭定时器</p><h3 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h3><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image050.gif"></p><p>l 作用：每隔一段时间调用这个函数</p><p>l 间隔时间单位是毫秒</p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image052.gif"></p><p><strong>另外一种写法：使用匿名函数</strong></p><p><strong>定时器的匿名回调函数会在最开始打开页面后一秒再调用函数，解决办法是将函数拿出来先进行调用</strong></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image054.gif"></p><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image056.gif"></p><p><strong>返回值：</strong>此返回值 intervalID 是一个非零数值，用来标识通过 setInterval()创建的计时器，这个值可以用来作为 clearInterval()的参数来清除对应的计时器 。</p><p>l <strong>注意：</strong></p><p>\1. 函数名字不需要加括号</p><p>\2. 定时器返回的是一个 id 数字</p><p>\3. 想要呈现出定时器效果，必须将想要输出的属性内容（innerHTML,innerText 等）写下函数里面才能生效</p><h3 id="关闭定时器"><a href="#关闭定时器" class="headerlink" title="关闭定时器"></a>关闭定时器</h3><p><img src="/img/JS%E9%AB%98%E7%BA%A7/day01/clip_image058.gif"></p><p>l <strong>注意：</strong>一般不会刚创建就停止，而是满足一定条件再停止</p><h1 id="综合案例-焦点图案例"><a href="#综合案例-焦点图案例" class="headerlink" title="综合案例-焦点图案例"></a>综合案例-焦点图案例</h1><div class="img-box"><p><imgclass="pic" src="./images/b01.jpg" alt="第1张图的描述信息" /></p><divclass="tip"><p>​ <h3 class="text">挑战云歌单，欢迎你来</h3></p><p>​ </div></p><p>​ </div></p><script>​ let data = [​ {​ imgSrc: 'images/b01.jpg',​ title: '挑战云歌单，欢迎你来',​ },​ {​ imgSrc: 'images/b02.jpg',​ title: '田园日记，上演上京记',​ },​ {​ imgSrc: 'images/b03.jpg',​ title: '甜蜜攻势再次回归',​ },​ {​ imgSrc: 'images/b04.jpg',​ title: '我为歌狂，生为歌王',​ },​ {​ imgSrc: 'images/b05.jpg',​ title: '年度校园主题活动',​ },​ {​ imgSrc: 'images/b06.jpg',​ title: 'pink 老师新歌发布，5 月 10 号正式推出',​ },​ {​ imgSrc: 'images/b07.jpg',​ title: '动力火车来到西安',​ },​ {​ imgSrc: 'images/b08.jpg',​ title: '钢铁侠 3，英雄镇东风',​ },​ {​ imgSrc: 'images/b09.jpg',​ title: '我用整颗心来等你',​ },​ ]​ let pic = document.querySelector('img')​ let text = document.querySelector('.text')​ let i = 0​ let show = setInterval(function () {​ i++​ text.innerHTML = data[i].title​ pic.src = data[i].imgSrc​ if (i === data.length - 1) {​ i = -1​ }​ // i === 8 ? (i = -1) : i​ }, 800)]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day02</title>
    <link href="/2022/05/05/WebAPIs/day02/"/>
    <url>/2022/05/05/WebAPIs/day02/</url>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件是在编程时系统内发生的动作或者发生的事情</p><p>比如用户在网页上单击一个按钮</p><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为 注册事件</p><p><strong>语法：</strong></p><p><img src="/img/WebAPIs/day02/clip_image002.gif" alt="截图.png"></p><p><strong>事件监听三要素：</strong></p><p>l 事件源： 那个 dom 元素被事件触发了，要获取 dom 元素</p><p>l 事件： 用什么方式触发，比如鼠标单击 click、鼠标经过 mouseover 等</p><p>l 事件调用的函数： 要做什么事</p><p><strong>举例：</strong></p><p><img src="/img/WebAPIs/day02/clip_image004.gif" alt="截图.png"></p><p><strong>注意：</strong></p><p>\1. 事件类型要加引号，也就是必须是字符串</p><p>\2. 函数是点击之后再去执行，每次点击都会执行一次</p><p>\3. <strong>因事件的发生而产生的数值改变，如果要对改变的数值进行判定也必须在事件函数里面进行判定否则不会生效。</strong></p><p>\4. 元素不能注册同名事件,比如给同一个按钮同时注册 2 个点击事件</p><p><img src="/img/WebAPIs/day02/clip_image006.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day02/clip_image008.gif" alt="截图.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><h2 id="-7"><a href="#-7" class="headerlink" title=""></a></h2><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p><img src="/img/WebAPIs/day02/clip_image010.gif" alt="截图.png"></p><p><strong>常见鼠标事件</strong></p><p><img src="/img/WebAPIs/day02/clip_image012.gif" alt="截图.png"></p><p><strong>其他鼠标事件</strong></p><p>contextmenu 禁止右键菜单，selectstart 禁止选中文字</p><p><img src="/img/WebAPIs/day02/clip_image014.gif" alt="截图.png"></p><h3 id="动态创建-input-框时自动聚焦："><a href="#动态创建-input-框时自动聚焦：" class="headerlink" title="动态创建 input 框时自动聚焦："></a>动态创建 input 框时自动聚焦：</h3><p><strong>语法：</strong></p><p>myInput.focus();</p><h3 id="change-文本事件"><a href="#change-文本事件" class="headerlink" title="change 文本事件:"></a>change 文本事件:</h3><p>当表单里面的值发生变化且光标失去焦点时才会触发，和 blur 不一样，也可用于复选框的改变</p><p><img src="/img/WebAPIs/day02/clip_image016.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day02/clip_image018.gif" alt="截图.png"></p><p><strong>文本长度：</strong></p><p>l 通常搭配 area.value.length（即文本字符长度检测）来使用</p><p>l 最大文本长度为 maxlength &#x3D; “ “</p><p><img src="/img/WebAPIs/day02/clip_image020.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day02/clip_image022.gif" alt="截图.png"></p><p><strong>注意：回车时自动生效</strong></p><h3 id="随机点名案例（鼠标点击事件）"><a href="#随机点名案例（鼠标点击事件）" class="headerlink" title="随机点名案例（鼠标点击事件）"></a>随机点名案例（鼠标点击事件）</h3><p><strong>注意点：</strong>要想在结束事件里影响开始事件里面的元素需要给开始事件里面的元素设置全局变量</p><h2>随机点名</h2><divclass="box"><p>​ <span>名字是：</span></p><divclass="qs">这里显示姓名</div><p>​ </div></p><divclass="btns"><p>​ <button class="start">开始</button></p><p>​ <button class="end">结束</button></p><p>​ </div></p><script>​ // 数据数组​ let arr = [​ '刘备',​ '曹操',​ 'pink 老师',​ '马超',​ '黄盖',​ '赵云',​ '关羽',​ '张飞',​ ]​ function getRandom(min, max) {​ return Math.floor(Math.random() \* (max - min + 1)) + min​ }​ let start = document.querySelector('.start')​ let end = document.querySelector('.end')​ let qs = document.querySelector('.qs')​ let text = document.querySelector('span')​ let dianMing = 0​ let random = 0​ start.addEventListener('click', function () {​ if (arr.length == 0) {​ text.innerText = ''​ qs.innerHTML = '已点完所有人'​ start.disabled = true​ end.disabled = true​ } else {​ dianMing = setInterval(function () {​ random = getRandom(0, arr.length - 1)​ qs.innerHTML = arr[random]​ }, 30)​ }​ })​ end.addEventListener('click', function () {​ clearInterval(dianMing)​ arr.splice(random, 1)​ })### 小米搜索框案例（焦点事件）<script>​ // 1. 获取元素 input​ let search = document.querySelector('input')​ let list = document.querySelector('.result-list')​ // 2. 事件监听 获得光标事件 focus​ search.addEventListener('focus', function () {​ // 显示下拉菜单​ list.style.display = 'block'​ // 文本框变色​ this.classList.add('search')​ })​ // 3. 事件监听 失去光标事件 blur​ search.addEventListener('blur', function () {​ // 隐藏下拉菜单​ list.style.display = 'none'​ // 文本框去色​ this.classList.remove('search')​ })​ </script><p>​</p><h3 id="微博输入案例（文本事件）"><a href="#微博输入案例（文本事件）" class="headerlink" title="微博输入案例（文本事件）"></a>微博输入案例（文本事件）</h3><div class="w"><divclass="controls"><p><imgsrc="images/tip.png" alt="" /><br /></p><p>​ &lt;textarea</p><p>​ placeholder&#x3D;”说点什么吧…”</p><p>​ id&#x3D;”area”</p><p>​ cols&#x3D;”30”</p><p>​ rows&#x3D;”10”</p><p>​ maxlength&#x3D;”200”</p><p>​ &gt;</textarea></p><div><p>​ <span class="useCount">0</span></p><p>​ <span>&#x2F;</span></p><p>​ <span>200</span></p><p>​ <button id="send">发布</button></p><p>​ </div></p><p>​ </div></p><divclass="contentList"><p>​ <ul></ul></p><p>​ </div></p><p>​ </div></p><script>​ let text = document.querySelector('textarea')​ let counts = document.querySelector('.useCount')​ text.addEventListener('input', function () {​ counts.innerHTML = area.value.length​ })​ </script><h3 id="全选反选案例-单击事件"><a href="#全选反选案例-单击事件" class="headerlink" title="全选反选案例(单击事件)"></a>全选反选案例(单击事件)</h3><p><img src="/img/WebAPIs/day02/clip_image024.gif" alt="截图.png"></p><p><strong>难点：反选的编写思路：使用嵌套 for 循环，第一个循环生成多个对象的事件，第二个循环判断其他几个对象的状态。</strong></p><p><img src="/img/WebAPIs/day02/clip_image026.gif" alt="截图.png"></p><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>高阶函数可以被简单理解为函数的高级应用，JavaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用。</p><p>【值】就是 JavaScript 中的数据，如数值、字符串、布尔、对象等。</p><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>函数表达式和普通函数并无本质上的区别：</p><p><img src="/img/WebAPIs/day02/clip_image028.gif" alt="截图.png"></p><p>l 普通函数的声明与调用无顺序限制，推荐做法先声明再调用</p><p>l <strong>函数表达式必须要先声明再调用</strong></p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数</p><p>简单理解： 当一个函数当做参数（值）来传递给另外一个函数的时候，这个函数就是回调函数</p><p><img src="/img/WebAPIs/day02/clip_image030.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day02/clip_image032.gif" alt="截图.png"></p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>环境对象指的是函数内部特殊的<strong>变量 this</strong> ，它代表着当前函数运行时所处的环境</p><p>作用：弄清楚 this 的指向，可以让我们代码更简洁</p><p>l 函数的调用方式不同，this 指代的对象也不同</p><p>l 【谁调用， this 就是谁】 是判断 this 指向的粗略规则</p><p>l 直接调用函数，其实相当于是 window.函数，所以 this 指代 window</p><p>l 在定时器里面不能用 this，this 执行的 window</p><p><img src="/img/WebAPIs/day02/clip_image034.gif" alt="截图.png"></p><h1 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h1><h2 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h2><p>当前元素为 A 状态,其他元素为 B 状态</p><p><strong>使用：</strong></p><p>\1. 干掉所有人</p><p>a) 使用 for 循环</p><p>\2. 复活他自己</p><p>a) 通过 this 或者下标找到自己或者对应的元素</p><p><img src="/img/WebAPIs/day02/clip_image036.gif" alt="截图.png"></p><h3 id="排他思想升级："><a href="#排他思想升级：" class="headerlink" title="排他思想升级："></a>排他思想升级：</h3><p><img src="/img/WebAPIs/day02/clip_image038.gif" alt="截图.png"></p><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1>]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day03</title>
    <link href="/2022/05/05/WebAPIs/day03/"/>
    <url>/2022/05/05/WebAPIs/day03/</url>
    
    <content type="html"><![CDATA[<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="DOM-节点"><a href="#DOM-节点" class="headerlink" title="DOM 节点"></a>DOM 节点</h2><p>l <strong>DOM 节点</strong></p><p>DOM 树里每一个内容都称之为节点</p><p>l <strong>节点类型</strong></p><p>n 元素节点</p><p>u 所有的标签 比如 body、 div</p><p>u html 是根节点</p><p>n 属性节点</p><p>u 所有的属性 比如 href</p><p>n 文本节点</p><p>u 所有的文本</p><p>n 其他</p><h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><p>nodeType 属性一共有 12 种取值（1~12），对应不同的节点。节点类型由在 Node 类型中定义的下列 12 个常量来表示，任何节点类型必居其一</p><p><img src="/img/WebAPIs/day03/clip_image002.gif" alt="截图.png"></p><p>l 关闭二维码案例：</p><p>n 点击关闭按钮， 关闭的是二维码的盒子， 还要获取 erweima 盒子</p><p>l 思考：</p><p>n 关闭按钮 和 erweima 是什么关系呢？</p><p>n 父子关系</p><p>n 所以，我们完全可以这样做：</p><p>n 点击关闭按钮， 直接关闭它的爸爸，就无需获取 erweima 元素了</p><p>l <strong>节点关系：</strong></p><p>n 父节点</p><p>n 子节点</p><p>n 兄弟节点</p><p>l <strong>父节点查找：</strong></p><p>n parentNode 属性</p><p>n 返回最近一级的父节点 找不到返回为 null</p><p><img src="/img/WebAPIs/day03/clip_image004.gif" alt="截图.png"></p><p>l <strong>子节点查找：</strong></p><p>n childNodes</p><p><img src="/img/WebAPIs/day03/clip_image006.gif" alt="截图.png"></p><p>u 获得所有子节点、包括文本节点（空格、换行）、注释节点等，如下图，所以一般开发环境中使用 children</p><p><img src="/img/WebAPIs/day03/clip_image008.gif" alt="截图.png"></p><p>n <strong>children （重点）</strong></p><p><img src="/img/WebAPIs/day03/clip_image010.gif" alt="截图.png"></p><p>u 仅获得所有元素节点</p><p>u 返回的还是一个伪数组，具有长度</p><p>l <strong>兄弟关系查找：</strong></p><p>\1. 下一个兄弟节点</p><p>n nextElementSibling 属性</p><p>\2. 上一个兄弟节点</p><p>n previousElementSibling 属性</p><h2 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h2><p>l 很多情况下，我们需要在页面中增加元素</p><p>n 比如，点击发布按钮，可以新增一条信息</p><p>l 一般情况下，我们新增节点，按照如下操作：</p><p>n 创建一个新的节点</p><p>n 把创建的新的节点放入到指定的元素内部</p><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><p>即创造出一个新的网页元素，再添加到网页内，一般得先创建出节点，然后才能插入节点，创建一个节点只能插入一个节点</p><p>创建元素节点方法：</p><p><img src="/img/WebAPIs/day03/clip_image012.gif" alt="截图.png"></p><h4 id="追加节点"><a href="#追加节点" class="headerlink" title="追加节点"></a>追加节点</h4><p>l 要想在界面看到，还得插入到某个父元素中</p><p>l 插入到父元素的最后一个子元素:</p><p><img src="/img/WebAPIs/day03/clip_image014.gif" alt="截图.png"></p><p>l 插入到父元素中某个子元素的前面</p><p><img src="/img/WebAPIs/day03/clip_image016.gif" alt="截图.png"></p><p><strong>使用：</strong></p><p><img src="/img/WebAPIs/day03/clip_image018.gif" alt="截图.png"></p><h4 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h4><p>l 特殊情况下，我们新增节点，按照如下操作：</p><p>n 复制一个原有的节点</p><p>n 把复制的节点放入到指定的元素内部</p><p><img src="/img/WebAPIs/day03/clip_image020.gif" alt="截图.png"></p><p>cloneNode 会克隆出一个跟原标签一样的元素，括号内传入布尔值</p><p>n 若为 true（深拷贝），则代表克隆时会包含后代节点一起克隆</p><p>n 若为 false（浅拷贝），则代表克隆时不包含后代节点</p><p>n 默认为 false</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>l 若一个节点在页面中已不需要时，可以删除它</p><p>l 在 JavaScript 原生 DOM 操作中，要删除元素必须通过父元素删除，不能跨级删除（不能通过爷爷删除孙子）</p><p>l <strong>语法</strong></p><p><img src="/img/WebAPIs/day03/clip_image022.gif" alt="截图.png"></p><p>要删除的元素可以通过子节点查找</p><p><img src="/img/WebAPIs/day03/clip_image024.gif" alt="截图.png"></p><p>或者设置子元素 dom 对象来查找</p><p><img src="/img/WebAPIs/day03/clip_image026.gif" alt="截图.png"></p><p>l 注：</p><p>n 如不存在父子关系则删除不成功</p><p>n 删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从 html 中删除节点</p><h1 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h1><p>l 时间对象：用来表示时间的对象</p><p>l 作用：可以得到当前系统时间</p><p><img src="/img/WebAPIs/day03/clip_image028.gif" alt="截图.png"></p><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>l 在代码中发现了 new 关键字时，一般将这个操作称为实例化</p><p>l 创建一个时间对象并获取时间</p><p>n 获得当前标准时间</p><p><img src="/img/WebAPIs/day03/clip_image030.gif" alt="截图.png"></p><p>l 获得当前时间 格式化</p><p><img src="/img/WebAPIs/day03/clip_image032.gif" alt="截图.png"></p><p>n 获得指定时间</p><p><img src="/img/WebAPIs/day03/clip_image034.gif" alt="截图.png"></p><h2 id="时间对象方法"><a href="#时间对象方法" class="headerlink" title="时间对象方法"></a>时间对象方法</h2><p>因为时间对象返回的数据我们不能直接使用，所以需要转换为实际开发中常用的格式</p><p><img src="/img/WebAPIs/day03/clip_image036.gif" alt="截图.png"></p><h4 id="显示时间"><a href="#显示时间" class="headerlink" title="显示时间"></a>显示时间</h4><p>注意点：</p><p>\1. 实例化对象和调用函数一定要写到定时器里面才可以</p><p>\2. 使用定时器+匿名函数会在首次打开页面时产生一秒空白期，解决办法是将函数拿出来，并提前调用。</p><p>let arr &#x3D; [</p><p>​ ‘星期日’,</p><p>​ ‘星期一’,</p><p>​ ‘星期二’,</p><p>​ ‘星期三’,</p><p>​ ‘星期四’,</p><p>​ ‘星期五’,</p><p>​ ‘星期六’,</p><p>​ ]</p><p>​ let div &#x3D; document.querySelector(‘div’)</p><p>​ &#x2F;&#x2F; 先调用，就省去了打开页面时 1 秒的空白期</p><p>​ getTime()</p><p>​ setInterval(getTime, 1000)</p><p>​ function getTime() {</p><p>​ &#x2F;&#x2F; 1. 实例化时间对象 一定写到定时器里面才可以额</p><p>​ let date &#x3D; new Date()</p><p>​ let year &#x3D; date.getFullYear()</p><p>​ let month &#x3D; date.getMonth() + 1</p><p>​ let date1 &#x3D; date.getDate()</p><p>​ let hour &#x3D; date.getHours()</p><p>​ hour &#x3D; hour &lt; 10 ? ‘0’ + hour : hour</p><p>​ let min &#x3D; date.getMinutes()</p><p>​ min &#x3D; min &lt; 10 ? ‘0’ + min : min</p><p>​ let sec &#x3D; date.getSeconds()</p><p>​ sec &#x3D; sec &lt; 10 ? ‘0’ + sec : sec</p><p>​ let day &#x3D; date.getDay()</p><p>​ div.innerHTML &#x3D; <code>今天是： $&#123;year&#125;年$&#123;month&#125;月$&#123;date1&#125;日 $&#123;hour&#125;:$&#123;min&#125;:$&#123;sec&#125; $&#123;arr[day]&#125;</code></p><p>​ }</p><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>时间戳是指 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的毫秒数，它是一种特殊的计量时间的方式</p><p>三种方式获取时间戳</p><p>用将来时间戳减去现在时间戳即可得到剩余时间戳。</p><p>未来时间戳书写方法：</p><p>let date2 &#x3D; new Date(‘2021-8-29 18:30:00’)</p><p>n 1. 使用 getTime() 方法</p><p><img src="/img/WebAPIs/day03/clip_image038.gif" alt="截图.png"></p><p>n 2. 简写 +new Date()</p><p><img src="/img/WebAPIs/day03/clip_image040.gif" alt="截图.png"></p><p>n 3. 使用 Date().now()</p><p><img src="/img/WebAPIs/day03/clip_image042.gif" alt="截图.png"></p><p>u 无需实例化</p><p>u 但是只能得到当前的时间戳， 而前面两种可以返回指定时间的时间戳</p><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><p>注意点：</p><p>\1. 在点击发送时检测用户是否输入为空以及是否连续输入无意义空格</p><p>n 使用 textarea.value.trim()中的 trim()函数去除字符串中首部和尾部的空格(除了中间部分的空格)</p><p>\2. 点击 x 号删除发布信息部分</p><p>n 声明 x 号 dom 对象只能在 send 点击事件里面声明，因为没有 send 信息之前，不存在 li 盒子，x 号也不存在。要将 x 号的点击事件放在 li 的追加节点之前，且声明删除号 dom 对象只能在 li 中查找，不能在 document 里查找要在 li 中查找，因为如果用 document 会出现删不掉最新发布的消息的情况，用 li 查找可以避免这个问题</p><p><img src="/img/WebAPIs/day03/clip_image044.gif" alt="截图.png"></p><p><img src="/img/WebAPIs/day03/clip_image046.gif" alt="截图.png"></p><h1 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h1><h2 id="浏览器是如何进行界面渲染的"><a href="#浏览器是如何进行界面渲染的" class="headerlink" title="浏览器是如何进行界面渲染的"></a>浏览器是如何进行界面渲染的</h2><p><img src="/img/WebAPIs/day03/clip_image048.gif" alt="截图.png"></p><p>l 解析（Parser）HTML，生成 DOM 树(DOM Tree)</p><p>l 同时解析（Parser） CSS，生成样式规则 (Style Rules)</p><p>l 根据 DOM 树和样式规则，生成渲染树(Render Tree)</p><p>l 进行布局 Layout(回流&#x2F;重排):根据生成的渲染树，得到节点的几何信息（位置，大小）</p><p>l 进行绘制 Painting(重绘): 根据计算和获取的信息进行整个页面的绘制</p><p>l Display: 展示在页面上</p><h2 id="重绘和回流-重排"><a href="#重绘和回流-重排" class="headerlink" title="重绘和回流(重排)"></a>重绘和回流(重排)</h2><p>l <strong>回流(重排)</strong></p><p>当 Render Tree 中部分或者全部元素的尺寸、结构、布局等发生改变时，浏览器就会重新渲染部分或全部文档的过程称为 回流。</p><p>l <strong>重绘</strong></p><p>由于节点(元素)的样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、outline 等), 称为重绘。</p><p>l <strong>重绘不一定引起回流，而回流一定会引起重绘。</strong></p><p>l 会导致回流（重排）的操作：</p><p>n 页面的首次刷新</p><p>n 浏览器的窗口大小发生改变</p><p>n 元素的大小或位置发生改变</p><p>n 改变字体的大小</p><p>n 内容的变化（如：input 框的输入，图片的大小）</p><p>n 激活 css 伪类 （如：:hover）</p><p>n 脚本操作 DOM（添加或者删除可见的 DOM 元素）</p><p><strong>简单理解影响到布局了，就会有回流</strong></p><h1 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h1><p><strong>注意点：</strong></p><p><strong>1. input 用 vlue 属性修改 text 的值</strong></p><p><strong>2. 在生成元素的 dom 对象时，如果该元素没有类名或者 id 为防止生成的 dom 对象冲突，用后代选择器的方法选择出该元素</strong></p><p><strong>例如：</strong></p><p><img src="/img/WebAPIs/day03/clip_image050.gif" alt="截图.png"></p><p><strong>3. parseInt 不仅能够将数据转换为数字类型，还能去除非数字的单位或者符号。</strong></p><p><strong>4. 计算总价时，因为每次增加或减少商品数量以及删除商品都会影响总价价格，因此需要在每 个能影响总价的事件中添加总价计算公式，为了防止代码冗余，使用函数将公式代码封装起来，之后在每个事件中调用该函数，需要注意的是：函数里面的 dom 对象不能使用全局声明的 dom 对象，因为全局声明的对象在删除商品后不会发生变化，因此在函数中重新声明需要的 dom 对象，在每次调用函数时都重新查找 dom 对象，实现实时更新 dom 对象。</strong></p>]]></content>
    
    
    <categories>
      
      <category>WebAPIs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day01</title>
    <link href="/2022/05/05/jQuery/day01/"/>
    <url>/2022/05/05/jQuery/day01/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery-概述"><a href="#jQuery-概述" class="headerlink" title="jQuery 概述"></a>jQuery 概述</h1><h2 id="JavaScript-库"><a href="#JavaScript-库" class="headerlink" title="JavaScript 库"></a>JavaScript 库</h2><p>**JavaScript****库：**即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画 animate、hide、show，比如获取元素等。</p><p>简单理解： 就是一个 JS 文件，里面对我们原生 js 代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。比如 jQuery，就是为了快速方便的操作 DOM，里面基本都是函数（方法）。</p><p>学习 jQuery 本质： 就是学习调用这些函数（方法），从而开发效率。</p><h2 id="常见的-JavaScript-库"><a href="#常见的-JavaScript-库" class="headerlink" title="常见的 JavaScript 库"></a>常见的 JavaScript 库</h2><p>l jQuery</p><p>l Prototype</p><p>l YUI</p><p>l Dojo</p><p>l Ext JS 移动端的 zepto</p><p>l 这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。其他库都已淘汰</p><h2 id="jQuery-的入口函数"><a href="#jQuery-的入口函数" class="headerlink" title="jQuery 的入口函数"></a>jQuery 的入口函数</h2><p>一开始对页面所有 DOM 元素做一个监听，等所有 DOM 元素加载完后执行代码</p><p>设置后可以将<script>标签写在 dom 元素前面</p><p><img src="/img/jQuery/day01/clip_image002.gif"></p><p><img src="/img/jQuery/day01/clip_image004.gif"></p><p><img src="/img/jQuery/day01/clip_image006.gif"></p><p><img src="/img/jQuery/day01/clip_image008.gif"></p><p>1.等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</p><p>2.相当于原生 js 中的 DOMContentLoaded。</p><p>3.不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css 文件、图片加载完毕才执行内部代码。</p><p>\4. 更推荐使用第一种方式。</p><h2 id="jQuery-的顶级对象"><a href="#jQuery-的顶级对象" class="headerlink" title="jQuery 的顶级对象 $"></a>jQuery 的顶级对象 $</h2><p>1.$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $，但一般为了方便，通常都直接使用 $ 。</p><p>2.$ 是 jQuery 的顶级对象， 相当于原生 JavaScript 中的 window。把元素利用$包装成 jQuery 对象，就可以调用 jQuery 的方法。</p><h2 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h2><p>\1. 用原生 JS 获取来的对象就是 DOM 对象</p><p>\2. jQuery 方法获取的元素就是 jQuery 对象。</p><p>\3. jQuery 对象本质是： 利用$对 DOM 对象包装后产生的对象（伪数组形式存储）。</p><p><strong>注意：</strong></p><p><strong>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</strong></p><p>DOM 对象与 jQuery 对象之间是可以相互转换的。</p><p>因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery 没有给我们封装. 要想使用这些属性和方法需要把 jQuery 对象转换为 DOM 对象才能使用。</p><p>\1. DOM 对象转换为 jQuery 对象： $(DOM 对象)</p><p><img src="/img/jQuery/day01/clip_image010.gif"></p><p>\2. jQuery 对象转换为 DOM 对象（两种方式）</p><p>加索引号</p><p><img src="/img/jQuery/day01/clip_image012.gif"></p><p><img src="/img/jQuery/day01/clip_image014.gif"></p><h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><h2 id="jQuery-基础选择器"><a href="#jQuery-基础选择器" class="headerlink" title="jQuery 基础选择器"></a>jQuery 基础选择器</h2><p>原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><p><img src="/img/jQuery/day01/clip_image016.gif"></p><p>在添加动态元素时可以应用在引号里面写出完整的 html 标签</p><p><img src="/img/jQuery/day01/clip_image018.gif"></p><p><img src="/img/jQuery/day01/clip_image020.gif"></p><p><img src="/img/jQuery/day01/clip_image022.gif"></p><p><strong>注意事项：并集选择器中所有元素以一对引号包裹</strong></p><h4 id="jQuery-设置样式"><a href="#jQuery-设置样式" class="headerlink" title="jQuery 设置样式"></a>jQuery 设置样式</h4><p><img src="/img/jQuery/day01/clip_image024.gif"></p><h2 id="隐式迭代（重要）"><a href="#隐式迭代（重要）" class="headerlink" title="隐式迭代（重要）"></a>隐式迭代（重要）</h2><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做<strong>隐式迭代。（自动遍历）</strong></p><p>简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</p><p>如何指向其中一个，举例：mouseenter 事件</p><p>用 this 指向鼠标指向的那么元素即可修改属性</p><h2 id="jQuery-筛选选择器"><a href="#jQuery-筛选选择器" class="headerlink" title="jQuery 筛选选择器"></a>jQuery 筛选选择器</h2><p>添加在子元素上</p><h4 id="常用筛选选择器"><a href="#常用筛选选择器" class="headerlink" title="常用筛选选择器"></a>常用筛选选择器</h4><p><img src="/img/jQuery/day01/clip_image026.gif"></p><h4 id="checked-选择器"><a href="#checked-选择器" class="headerlink" title=":checked 选择器"></a>:checked 选择器</h4><p>:checked 筛选出被选中的表单元素，以对象形式存储，有 length</p><h2 id="jQuery-筛选方法（重点）"><a href="#jQuery-筛选方法（重点）" class="headerlink" title="jQuery 筛选方法（重点）"></a>jQuery 筛选方法（重点）</h2><p><img src="/img/jQuery/day01/clip_image028.gif"></p><table><thead><tr><th><strong>语法</strong></th><th><strong>用法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>next()</td><td>$(‘ li ‘).next()</td><td>查找当前元素后面一个兄弟元素</td></tr><tr><td>prev()</td><td>$(‘ li ‘).prev()</td><td>查找当前元素前面一个兄弟元素</td></tr></tbody></table><p>注意: siblings()括号里不添加元素指的是除了自身元素之外的所有亲兄弟，添加元素这个则是指所有兄弟里的该元素。</p><p>重点记住： parent() children() find() siblings() eq()</p><p>其他：parents()可以返回指定祖先元素集，可通过指定要选择的祖先选择器类名来得到</p><p><img src="/img/jQuery/day01/clip_image030.gif"></p><h2 id="jQuery-排他思想"><a href="#jQuery-排他思想" class="headerlink" title="jQuery 排他思想"></a>jQuery 排他思想</h2><p>先写自己，再写其他兄弟</p><p>想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</p><p>$(this) jQuery 当前元素 this 不要加引号</p><p><img src="/img/jQuery/day01/clip_image032.gif"></p><h2 id="jQuery-得到当前元素索引号"><a href="#jQuery-得到当前元素索引号" class="headerlink" title="jQuery 得到当前元素索引号"></a>jQuery 得到当前元素索引号</h2><p>使用$(this).index() 获得索引号，通过 eq(index)方法去选择</p><p>注意这是个方法，index 后面要添加小括号</p><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p>链式编程是为了节省代码量，看起来更优雅。(将重复的部分合并，不同的部分加起来)</p><p><img src="/img/jQuery/day01/clip_image034.gif"></p><p>使用链式编程一定注意是哪个对象执行样式.</p><h1 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h1><h2 id="操作-css-方法"><a href="#操作-css-方法" class="headerlink" title="操作 css 方法"></a>操作 css 方法</h2><p>jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p><p>\1. 参数只写属性名，则是返回属性值</p><p><img src="/img/jQuery/day01/clip_image036.gif"></p><p>\2. 参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号,属性名如果有短杠衔接需要加引号，或者使用驼峰命名法</p><p><img src="/img/jQuery/day01/clip_image038.gif"></p><p>\3. 参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性名可以不用加引号，如果是单项样式则必须加引号</p><p><strong>对象形式，属性名不用加引号，属性名如果有短杠衔接需要加引号，或者使用驼峰命名法</strong></p><p><img src="/img/jQuery/day01/clip_image040.gif"></p><h2 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h2><p>作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><p>\1. 添加类</p><p><img src="/img/jQuery/day01/clip_image042.gif"></p><p>\2. 移除类</p><p><img src="/img/jQuery/day01/clip_image044.gif"></p><p>\3. 切换类</p><p><img src="/img/jQuery/day01/clip_image046.gif"></p><p>一些运动的动画类效果可以通过添加移除或者切换来实现正放和倒放</p><p>例如：</p><p><img src="/img/jQuery/day01/clip_image048.gif"></p><p>添加和删除这个类可使元素正旋转和逆旋转</p><h2 id="类操作与-className-区别"><a href="#类操作与-className-区别" class="headerlink" title="类操作与 className 区别"></a>类操作与 className 区别</h2><p>l 原生 JS 中 className 会覆盖元素原先里面的类名。</p><p>l jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p><h1 id="jQuery-绑定事件"><a href="#jQuery-绑定事件" class="headerlink" title="jQuery 绑定事件"></a>jQuery 绑定事件</h1><p><strong>语法：</strong></p><p><strong>$</strong>('选择器').注册事件名(click 等)(function() {})</p><h3 id="hover-事件"><a href="#hover-事件" class="headerlink" title="hover 事件"></a>hover 事件</h3><p>鼠标悬浮和离开时触发，和 mouseenter，mouseleave 等同效果。</p><p><img src="/img/jQuery/day01/clip_image050.gif"></p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>$('元素').click('委托元素',function () {})</p><h1 id="jQuery-效果"><a href="#jQuery-效果" class="headerlink" title="jQuery 效果"></a>jQuery 效果</h1><h2 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h2><h3 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h3><h4 id="显示语法规范"><a href="#显示语法规范" class="headerlink" title="显示语法规范"></a>显示语法规范</h4><p>括号里面不用加中括号，easing 指定切换效果需要加引号</p><p><img src="/img/jQuery/day01/clip_image052.gif"></p><h4 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h4><p>（1）参数都可以省略， 无动画直接显示。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="隐藏效果"><a href="#隐藏效果" class="headerlink" title="隐藏效果"></a>隐藏效果</h3><h4 id="隐藏语法规范"><a href="#隐藏语法规范" class="headerlink" title="隐藏语法规范"></a>隐藏语法规范</h4><p>括号里面不用加中括号，easing 指定切换效果需要加引号</p><p><img src="/img/jQuery/day01/clip_image054.gif"></p><h4 id="隐藏参数"><a href="#隐藏参数" class="headerlink" title="隐藏参数"></a>隐藏参数</h4><p>（1）参数都可以省略， 无动画直接显示。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="切换效果"><a href="#切换效果" class="headerlink" title="切换效果"></a>切换效果</h3><h4 id="切换语法规范"><a href="#切换语法规范" class="headerlink" title="切换语法规范"></a>切换语法规范</h4><p>括号里面不用加中括号，easing 指定切换效果需要加引号</p><p><img src="/img/jQuery/day01/clip_image056.gif"></p><h3 id="切换参数"><a href="#切换参数" class="headerlink" title="切换参数"></a>切换参数</h3><p>（1）参数都可以省略， 无动画直接显示。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><p>建议：平时一般不带参数，直接显示隐藏即可。</p><h2 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h2><p>滑动效果只是将目标元素设置为了 display：none 隐藏起来了，并没有将其删除</p><h3 id="下滑效果"><a href="#下滑效果" class="headerlink" title="下滑效果"></a>下滑效果</h3><h4 id="下滑效果语法规范"><a href="#下滑效果语法规范" class="headerlink" title="下滑效果语法规范"></a>下滑效果语法规范</h4><p><img src="/img/jQuery/day01/clip_image058.gif"></p><h4 id="下滑效果参数"><a href="#下滑效果参数" class="headerlink" title="下滑效果参数"></a>下滑效果参数</h4><p>（1）参数都可以省略。</p><p>（2）speed:三种预定速度之一的字符串(“slow”,“normal”,or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing:(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="上滑效果"><a href="#上滑效果" class="headerlink" title="上滑效果"></a>上滑效果</h3><h4 id="上滑效果语法规范"><a href="#上滑效果语法规范" class="headerlink" title="上滑效果语法规范"></a>上滑效果语法规范</h4><p><img src="/img/jQuery/day01/clip_image060.gif"></p><h3 id="上滑效果参数"><a href="#上滑效果参数" class="headerlink" title="上滑效果参数"></a>上滑效果参数</h3><p>（1）参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="滑动切换效果"><a href="#滑动切换效果" class="headerlink" title="滑动切换效果"></a>滑动切换效果</h3><h4 id="滑动切换效果语法规范"><a href="#滑动切换效果语法规范" class="headerlink" title="滑动切换效果语法规范"></a>滑动切换效果语法规范</h4><p><img src="/img/jQuery/day01/clip_image062.gif"></p><h4 id="滑动切换效果参数"><a href="#滑动切换效果参数" class="headerlink" title="滑动切换效果参数"></a>滑动切换效果参数</h4><p>（1）参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h2 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h2><p><img src="/img/jQuery/day01/clip_image064.gif"></p><p>（1）over:鼠标移到元素上要触发的函数（相当于 mouseenter）</p><p>（2）out:鼠标移出元素要触发的函数（相当于 mouseleave）</p><p>（3）如果只写一个函数，则鼠标经过和离开都会触发它</p><h2 id="动画队列及其停止排队方法"><a href="#动画队列及其停止排队方法" class="headerlink" title="动画队列及其停止排队方法"></a>动画队列及其停止排队方法</h2><h4 id="动画或效果队列"><a href="#动画或效果队列" class="headerlink" title="动画或效果队列"></a>动画或效果队列</h4><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><h4 id="停止排队"><a href="#停止排队" class="headerlink" title="停止排队"></a>停止排队</h4><p><img src="/img/jQuery/day01/clip_image066.gif"></p><p>(1）stop() 方法用于停止动画或效果。</p><p>(2) 注意： stop()写到动画或者效果的前面，相当于停止结束上一次的动画。</p><h2 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h2><h3 id="淡入效果"><a href="#淡入效果" class="headerlink" title="淡入效果"></a>淡入效果</h3><h4 id="淡入效果语法规范"><a href="#淡入效果语法规范" class="headerlink" title="淡入效果语法规范"></a>淡入效果语法规范</h4><p><img src="/img/jQuery/day01/clip_image068.gif"></p><h4 id="淡入效果参数"><a href="#淡入效果参数" class="headerlink" title="淡入效果参数"></a>淡入效果参数</h4><p>（1）参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="淡出效果"><a href="#淡出效果" class="headerlink" title="淡出效果"></a>淡出效果</h3><h4 id="淡出效果语法规范"><a href="#淡出效果语法规范" class="headerlink" title="淡出效果语法规范"></a>淡出效果语法规范</h4><p><img src="/img/jQuery/day01/clip_image070.gif"></p><h4 id="淡出效果参数"><a href="#淡出效果参数" class="headerlink" title="淡出效果参数"></a>淡出效果参数</h4><p>（1）参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="淡入淡出切换效果"><a href="#淡入淡出切换效果" class="headerlink" title="淡入淡出切换效果"></a>淡入淡出切换效果</h3><h4 id="淡入淡出切换效果语法规范"><a href="#淡入淡出切换效果语法规范" class="headerlink" title="淡入淡出切换效果语法规范"></a>淡入淡出切换效果语法规范</h4><p><img src="/img/jQuery/day01/clip_image072.gif"></p><h4 id="淡入淡出切换效果参数"><a href="#淡入淡出切换效果参数" class="headerlink" title="淡入淡出切换效果参数"></a>淡入淡出切换效果参数</h4><p>（1）参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h3 id="渐进方式调整到指定的不透明度"><a href="#渐进方式调整到指定的不透明度" class="headerlink" title="渐进方式调整到指定的不透明度"></a>渐进方式调整到指定的不透明度</h3><p><img src="/img/jQuery/day01/clip_image074.gif"></p><h3 id="效果参数"><a href="#效果参数" class="headerlink" title="效果参数"></a>效果参数</h3><p>（1）opacity 透明度必须写，取值 0~1 之间。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。必须写</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><h2 id="自定义动画-animate"><a href="#自定义动画-animate" class="headerlink" title="自定义动画 animate"></a>自定义动画 animate</h2><p><strong>语法：</strong></p><p><img src="/img/jQuery/day01/clip_image076.gif"></p><p>params 是以对象形式存储样式属性，可以写多个样式属性</p><p><img src="/img/jQuery/day01/clip_image078.gif"></p><p><strong>参数：</strong></p><p>（1）params: 想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><p>注意：</p><p>\1. 自定义动画可以写多个，设置不同数值，动画效果会安书写顺序依次呈现。</p><p>\2. jQuery 里面的自定义动画不能设置背景色和 transform，只能改数值。</p><p><img src="/img/jQuery/day01/clip_image080.gif"></p><h1 id="jQuery-属性操作"><a href="#jQuery-属性操作" class="headerlink" title="jQuery 属性操作"></a>jQuery 属性操作</h1><h2 id="设置或获取元素固有属性值-prop"><a href="#设置或获取元素固有属性值-prop" class="headerlink" title="设置或获取元素固有属性值 prop()"></a>设置或获取元素固有属性值 prop()</h2><p>所谓元素固有属性就是元素本身自带的属性，比如 <a>元素里面的 href ，比如 <input>元素里面的 type。</p><h4 id="获取固有属性语法"><a href="#获取固有属性语法" class="headerlink" title="获取固有属性语法"></a>获取固有属性语法</h4><p><img src="/img/jQuery/day01/clip_image082.gif"></p><h4 id="设置属性语法"><a href="#设置属性语法" class="headerlink" title="设置属性语法"></a>设置属性语法</h4><p><img src="/img/jQuery/day01/clip_image084.gif"></p><h2 id="设置或获取元素自定义属性值-attr"><a href="#设置或获取元素自定义属性值-attr" class="headerlink" title="设置或获取元素自定义属性值 attr()"></a>设置或获取元素自定义属性值 attr()</h2><p>用户自己给元素添加的属性，我们称为自定义属性。比如给 div 添加 index=“1”。</p><h4 id="获取属性语法"><a href="#获取属性语法" class="headerlink" title="获取属性语法"></a>获取属性语法</h4><p><img src="/img/jQuery/day01/clip_image086.gif"></p><p><strong>设置属性语法</strong></p><p><img src="/img/jQuery/day01/clip_image088.gif"></p><p>改方法也可以获取 H5 自定义属性</p><h2 id="数据缓存-data"><a href="#数据缓存-data" class="headerlink" title="数据缓存 data()"></a>数据缓存 data()</h2><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。</p><h4 id="附加数据语法"><a href="#附加数据语法" class="headerlink" title="附加数据语法"></a>附加数据语法</h4><p><img src="/img/jQuery/day01/clip_image090.gif"></p><p>附加的数据可以是对象</p><p><img src="/img/jQuery/day01/clip_image092.gif"></p><h4 id="获取数据语法"><a href="#获取数据语法" class="headerlink" title="获取数据语法"></a>获取数据语法</h4><p>name 名用驼峰命名法或者短横线</p><p><img src="/img/jQuery/day01/clip_image094.gif"></p><p>同时，还可以读取 HTML5 自定义属性 data-index，得到的是数字型，获取 index 不用写 - 号</p><p><img src="/img/jQuery/day01/clip_image096.gif"></p><p><img src="/img/jQuery/day01/clip_image098.gif"></p><h2 id="change-事件"><a href="#change-事件" class="headerlink" title="change 事件"></a>change 事件</h2><p>当表单元素值发生改变或光标失去焦点时要发生的事</p><p><img src="/img/jQuery/day01/clip_image100.gif"></p><h1 id="jQuery-内容文本值"><a href="#jQuery-内容文本值" class="headerlink" title="jQuery 内容文本值"></a>jQuery 内容文本值</h1><p>**普通元素内容 html()（****相当于原生 inner HTML 能识别标签)**</p><p><img src="/img/jQuery/day01/clip_image102.gif"></p><p><img src="/img/jQuery/day01/clip_image104.gif"></p><p>元素的内容（比如：标签里面要添加两个不同内容）可以通过+加号来拼接</p><p><img src="/img/jQuery/day01/clip_image106.gif"></p><p><strong>普通元素文本内容 text() (相当与原生 innerText 不能识别标签)</strong></p><p><img src="/img/jQuery/day01/clip_image108.gif"></p><p><img src="/img/jQuery/day01/clip_image110.gif"></p><p>**表单的值 val()（****相当于原生 value)**</p><p><img src="/img/jQuery/day01/clip_image112.gif"></p><p><img src="/img/jQuery/day01/clip_image114.gif"></p><h1 id="jQuery-元素操作"><a href="#jQuery-元素操作" class="headerlink" title="jQuery 元素操作"></a>jQuery 元素操作</h1><p>主要是遍历、创建、添加、删除元素操作。</p><h2 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h2><p>jQuery 隐式迭代是对同一类元素做了同样的操作。如果想要给同一类元素做不同操作，就需要用到遍历。</p><h4 id="语法-1："><a href="#语法-1：" class="headerlink" title="语法 1："></a>语法 1：</h4><p><img src="/img/jQuery/day01/clip_image116.gif"></p><p>\1. each() 方法遍历匹配的每一个元素。主要用 DOM 处理。 each 每一个</p><p><img src="/img/jQuery/day01/clip_image118.gif"></p><p>\2. 里面的回调函数有 2 个参数： index 是每个元素的索引号; demEle 是每个 DOM 元素对象，不是 jquery 对象</p><p>\3. 所以要想使用 jquery 方法，需要给这个 dom 元素转换为 jquery 对象 $(domEle)</p><h4 id="语法-2："><a href="#语法-2：" class="headerlink" title="语法 2："></a>语法 2：</h4><p><img src="/img/jQuery/day01/clip_image120.gif"></p><p>\1. $.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</p><p><img src="/img/jQuery/day01/clip_image122.gif"></p><p>\2. 里面的函数有 2 个参数： index 是每个元素的索引号; element 遍历内容</p><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p><img src="/img/jQuery/day01/clip_image124.gif"></p><p>动态的创建了一个 <li></p><p><strong>修改元素内容：</strong></p><p><img src="/img/jQuery/day01/clip_image126.gif"></p><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><h4 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h4><p><img src="/img/jQuery/day01/clip_image128.gif"></p><p>把内容放入匹配元素内部最后面，类似原生 appendChild。</p><p><img src="/img/jQuery/day01/clip_image130.gif"></p><p>把内容放入匹配元素内部最前面。</p><p>注意： 每创建一个元素只能添加添加一个，要添加多个得多次创建</p><p><img src="/img/jQuery/day01/clip_image132.gif"></p><h4 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h4><p><img src="/img/jQuery/day01/clip_image134.gif"></p><p><img src="/img/jQuery/day01/clip_image136.gif"></p><p>① 内部添加元素，生成之后，它们是父子关系。</p><p>② 外部添加元素，生成之后，他们是兄弟关系。</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="/img/jQuery/day01/clip_image138.gif"></p><p><img src="/img/jQuery/day01/clip_image140.gif"></p><p><img src="/img/jQuery/day01/clip_image142.gif"></p><p>① remove(空) 删除元素本身。</p><p>② empt() 和 html('''') 作用等价，都可以删除元素里面的内容，只不过 html 还可以设置内容。</p><h1 id="jQuery-尺寸、位置操作"><a href="#jQuery-尺寸、位置操作" class="headerlink" title="jQuery 尺寸、位置操作"></a>jQuery 尺寸、位置操作</h1><h2 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h2><p><img src="/img/jQuery/day01/clip_image144.gif"></p><p>width()不包含 padding，只是内容大小</p><p>l 以上参数为空，则是获取相应值，返回的是数字型。</p><p>l 如果参数为数字，则是修改相应值。</p><p>l 参数可以不必写单位</p><h2 id="jQuery-位置"><a href="#jQuery-位置" class="headerlink" title="jQuery 位置"></a>jQuery 位置</h2><p>位置主要有三个： offset()、position()、scrollTop()/scrollLeft()</p><h4 id="offset-设置或获取元素偏移"><a href="#offset-设置或获取元素偏移" class="headerlink" title="offset() 设置或获取元素偏移"></a>offset() 设置或获取元素偏移</h4><p>①offset() 方法设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，跟父级没有关系。</p><p>② 该方法有 2 个属性 left、top 。offset().top 用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离。</p><p>③ 可以设置元素的偏移：offset({top: 10, left: 30 });</p><h4 id="position-获取元素偏移"><a href="#position-获取元素偏移" class="headerlink" title="position() 获取元素偏移"></a>position() 获取元素偏移</h4><p>①position() 方法用于返回被选元素相对于<strong>带有定位的父级</strong>偏移坐标，如果父级都没有定位，则以文档为准。</p><p>② 该方法有 2 个属性 left、top。position().top 用于获取距离定位父级顶部的距离，position().left 用于获取距离定位父级左侧的距离。</p><p>③ 该方法只能获取,不能设置。</p><p><strong>scrollTop()/scrollLeft()</strong> <strong>设置或获取元素被卷去的头部和左侧</strong></p><p>①scrollTop() 方法设置或返回被选元素被卷去的头部。</p><p>② 不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。</p><h1 id="案例：带有动画的返回顶部"><a href="#案例：带有动画的返回顶部" class="headerlink" title="案例：带有动画的返回顶部"></a>案例：带有动画的返回顶部</h1><p>animate 动画函数里面有个 scrollTop 属性，可以设置位置</p><p>但是由于是网页元素做动画（滚动条慢慢往上移动）不能是文档做动画，因此用$('body,html').animate({scrollTop: 0})来做</p><p>注意：选择网页元素用$('body,html)或者$('html')</p><p><img src="/img/jQuery/day01/clip_image146.gif"></p><h1 id="案例：电梯导航节流阀-互斥锁"><a href="#案例：电梯导航节流阀-互斥锁" class="headerlink" title="案例：电梯导航节流阀(互斥锁)"></a>案例：电梯导航节流阀(互斥锁)</h1><p>代码存在小 bug：当点击左侧工具栏不同的 Li 时由于会触发右侧页面滚动的动画效果到指定的位置，</p><p><img src="/img/jQuery/day01/clip_image148.gif"></p><p>而页面滚动至不同位置的同时又会触发函数里面左侧工具栏不同 Li 背景颜色切换效果</p><p><img src="/img/jQuery/day01/clip_image150.gif"></p><p>从而形成一个相互冲突的动画效果（点击工具栏会使背景颜色切换到处乱变）</p><p>因此需要应用节流阀的原理：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>方法：</p><p>\1. 先声明一个 let flag = true</p><p>\2. 设置如果 flag = true 时，打开另一个不想的打开的动画效果触发开关。</p><p><img src="/img/jQuery/day01/clip_image152.gif"></p><p>\3. 而在我们想要触发动画效果的注册事件中设置 flag = false</p><p>先关闭另外一个动画效果的触发开关，等到我们动画执行完毕时，利用 animate 的回调函数功能，添加 flag = true，重新打开另外动画效果的触发开关</p><p><img src="/img/jQuery/day01/clip_image154.gif"></p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day02</title>
    <link href="/2022/05/05/jQuery/day02/"/>
    <url>/2022/05/05/jQuery/day02/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery-事件注册"><a href="#jQuery-事件注册" class="headerlink" title="jQuery 事件注册"></a>jQuery 事件注册</h1><h2 id="单个事件注册"><a href="#单个事件注册" class="headerlink" title="单个事件注册"></a>单个事件注册</h2><p><strong>语法：</strong></p><p><img src="/img/jQuery/day02/clip_image002.gif"></p><p><img src="/img/jQuery/day02/clip_image004.gif"></p><p>其他事件和原生基本一致。</p><p>比如 mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll 等</p><h1 id="jQuery-事件处理（委托）"><a href="#jQuery-事件处理（委托）" class="headerlink" title="jQuery 事件处理（委托）"></a>jQuery 事件处理（委托）</h1><p>on() 方法在匹配元素上绑定一个或多个事件的事件处理函数</p><p><strong>语法：</strong></p><p><img src="/img/jQuery/day02/clip_image006.gif"></p><p>\1. events:一个或多个用空格分隔的事件类型，如”click”或”keydown”。</p><p>\2. selector: 元素的子元素选择器 。</p><p>\3. fn:回调函数 即绑定在元素身上的侦听函数。</p><p><strong>on()</strong> <strong>方法优势 1：</strong></p><p>可以绑定多个事件，多个处理事件处理程序。</p><p><img src="/img/jQuery/day02/clip_image008.gif"></p><p>如果事件处理程序相同 ：</p><p><img src="/img/jQuery/day02/clip_image010.gif"></p><p><strong>on()</strong> <strong>方法优势 2：</strong></p><p>可以事件委派操作。事件委派的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委托给父元素。事件委托里面的 this 指向的是子元素 li</p><p><img src="/img/jQuery/day02/clip_image012.gif"></p><p>在此之前有 bind(), live()delegate()等方法来处理事件绑定或者事件委派，最新版本的请用 on 替代他们。</p><p><strong>on()</strong> <strong>方法优势 3：</strong></p><p>动态创建的元素，click() 没有办法绑定事件， on() 可以给动态生成的元素绑定事件 (给未来动态创建的元素绑定事件)</p><p>原理：本质利用了事件冒泡的原理，其实点击的是父元素。</p><p><img src="/img/jQuery/day02/clip_image014.gif"></p><p><img src="/img/jQuery/day02/clip_image016.gif"></p><h2 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h2><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p><p><img src="/img/jQuery/day02/clip_image018.gif"></p><p><strong>额外：</strong></p><p>\1. 如果有的事件只想触发一次， 可以使用 one()来绑定事件,触发一次后自动解除绑定事件。</p><p><img src="/img/jQuery/day02/clip_image020.gif"></p><p>\2. 同一个元素同一个事件，多个处理函数，解除某个处理程序（函数）</p><p>n 可以在’click’后面添加指定事件的函数名.</p><p><img src="/img/jQuery/day02/clip_image022.gif"></p><h2 id="自动触发事件-trigger"><a href="#自动触发事件-trigger" class="headerlink" title="自动触发事件 trigger()"></a>自动触发事件 trigger()</h2><p>有些事件希望自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><p><img src="/img/jQuery/day02/clip_image024.gif"></p><p>刷新页面即可触发一次</p><p><img src="/img/jQuery/day02/clip_image026.gif"></p><p>会触发默认行为(例如：input 获取焦点事件)</p><p>trigger 模拟触发点击事件，他是模拟的事件对象 e，和事件冒泡，本质并不是一个点击事件。不能触发 a 标签点击跳转。</p><p>n 解决方法 1：$(‘a’)[0].click() 将 jquery 对象 a 转换为 dom 对象，后调用 dom 的点击事件</p><p>n 解决方法 2: $(‘span’).click() &#x2F; $(‘span’).trigger(‘click’) 利用事件冒泡，给 a 标签的子元素模拟触发事件.</p><p><img src="/img/jQuery/day02/clip_image028.gif"></p><p><img src="/img/jQuery/day02/clip_image030.gif"></p><p>不会触发默认行为</p><p><strong>和前面两种的区别：</strong>triggerHandler 模式不会触发元素的默认行为(例如：自动触发时表单元素的默认行为是聚焦时光标闪烁。)，并且完成触发后，也无法点击 input 框重新聚焦</p><p><img src="/img/jQuery/day02/clip_image032.gif"></p><h1 id="jQuery-事件对象"><a href="#jQuery-事件对象" class="headerlink" title="jQuery 事件对象"></a>jQuery 事件对象</h1><p>事件被触发，就会有事件对象的产生</p><p><img src="/img/jQuery/day02/clip_image034.gif"></p><p>阻止默认行为：event.preventDefault() 或者 return false</p><p>阻止冒泡： event.stopPropagation()</p><h1 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h1><p>如果想要把某个对象拷贝（合并） 给另外一个对象使用，此时可以使用 $.extend()方法</p><p><strong>语法：</strong></p><p><img src="/img/jQuery/day02/clip_image036.gif"></p><p>\1. deep: 如果设为 true 为深拷贝， 默认为 false 浅拷贝</p><p>\2. target: 要拷贝的目标对象</p><p>\3. object1:待拷贝到第一个对象的对象。</p><p>\4. objectN:待拷贝到第 N 个对象的对象。</p><p>\5. 浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象。6. 深拷贝，前面加 true， 完全克隆(拷贝的对象,而不是地址)，修改目标对象不会影响被拷贝对象。</p><p>深拷贝：拷贝属性，新创一个地址，递归拷贝对象所有属性（对象里面的对象或者数组也会被拷贝），修改属性不会影响原对象</p><p>浅拷贝：拷贝地址，修改属性会影响被拷贝对象。</p><h1 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h1><p><strong>问题概述：</strong></p><p>jQuery 使用$作为标示符，随着jQuery的流行,其他 js 库也会用这$作为标识符，这样一起使用会引起冲突。</p><p><strong>客观需求：</strong></p><p>需要一个解决方案，让 jQuery 和其他的 js 库不存在冲突，可以同时存在，这就叫做多库共存。</p><p><strong>jQuery</strong> <strong>解决方案：</strong></p><p>\1. 把里面的 $ 符号 统一改为 jQuery。 比如 jQuery(‘’div’’)</p><p>\2. jQuery 变量规定新的名称：</p><p>a) 替换$符号：$.noConflict()</p><p>b) 重新设置$符号： var xx &#x3D; $.noConflict();</p><p>c) 使用新符号： xx( ‘ div ‘ )</p><h1 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h1><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。</p><p>注意: 这些插件也是依赖于 jQuery 来完成的，所以必须要先引入 jQuery 文件，因此也称为 jQuery 插件。</p><p><strong>jQuery</strong> <strong>插件常用的网站：</strong></p><p>\1. jQuery 插件库 <a href="http://www.jq22.com/">http://www.jq22.com/</a></p><p>\2. jQuery 之家 <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a></p><p><strong>jQuery</strong> <strong>插件使用步骤：</strong></p><p>\1. 引入相关文件。（jQuery 文件 和插件文件） 2. 复制相关 html、css、js (调用插件)。</p><p><strong>jQuery</strong> <strong>插件演示：</strong></p><p>\1. 瀑布流</p><p>\2. 图片懒加载（图片使用延迟加载在可提高网页下载速度。它也能帮助减轻服务器负载）</p><p>当我们页面滑动到可视区域，再显示图片。</p><p>我们使用 jquery 插件库 EasyLazyload。注意，此时的 js 引入文件和 js 调用必须写到 DOM 元素（图片）最后面</p><p>\3. 全屏滚动（fullpage.js）</p><p>​ gitHub： <a href="https://github.com/alvarotrigo/fullPage.js">https://github.com/alvarotrigo/fullPage.js</a></p><p>​ 中文翻译网站： <a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p><p><strong>bootstrap JS</strong> <strong>插件：</strong></p><p>bootstrap 框架也是依赖于 jQuery 开发的，因此里面的 js 插件使用 ，也必须引入 jQuery 文件。</p>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day02</title>
    <link href="/2022/05/05/JS%E5%9F%BA%E7%A1%80/day02/"/>
    <url>/2022/05/05/JS%E5%9F%BA%E7%A1%80/day02/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>数学运算符也叫算术运算符，主要包括加、减、乘、除、取余（求模）。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image002.gif"></p><p><strong>false 参与算数运算被当做 0</strong></p><h3 id="执行优先级顺序"><a href="#执行优先级顺序" class="headerlink" title="执行优先级顺序"></a>执行优先级顺序</h3><p>同时使用多个运算符编写程序时，会按着某种顺序先后执行，我们称为优先级。</p><p>JavaScript 中 优先级越高越先被执行，优先级相同时以书写顺序从左向右执行。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image004.gif"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符：对变量进行赋值的运算符</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image006.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image008.gif"></p><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p><strong>自增：</strong></p><p>l 符号：++</p><p>l 作用：让变量的值 +1</p><p><strong>自减：</strong></p><p>符号：- -</p><p>作用：让变量的值 -1</p><p><strong>使用场景：</strong>经常用于计数来使用。 比如进行 10 次操作，用它来计算进行了多少次了。</p><p><strong>前置，后置自增</strong></p><p><strong>前置自增和后置自增单独使用没有区别</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image010.gif"></p><p><strong>前置自增和后置自增如果参与运算就有区别</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image012.gif"></p><p><strong>注意：</strong></p><p>l 前置自增和后置自增独立使用时二者并没有差别！</p><p>l 一般开发中我们都是独立使用</p><p>l 后面 i++ 后置自增会使用相对较多</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><strong>比较运算符的使用：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image014.gif"></p><p><strong>比较运算符的细节：</strong></p><p>l 字符串比较，是比较的字符对应的 ASCII 码</p><p>n 从左往右依次比较</p><p>n 如果第一位一样再比较第二位，以此类推</p><p>n 比较的少，了解即可</p><p>l NaN 不等于任何值，包括它本身</p><p>l 尽量不要比较小数，因为小数有精度问题</p><p>l 不同类型之间比较会发生隐式转换</p><p>n 最终把数据隐式转换转成 number 类型再比较</p><p>n 所以开发中，如果进行准确的比较我们更喜欢 &#x3D;&#x3D;&#x3D; 或者 !&#x3D;&#x3D;</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><strong>逻辑运算符的使用：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image016.gif"></p><p><strong>注意：有 5 个值是当 false 来看的，其余都是真的。</strong></p><p><strong>false , 数字 0 , ‘ ‘ , undefined , null , NaN</strong></p><p><strong>逻辑运算符里的短路：</strong></p><p>l 短路：只存在于 &amp;&amp; 和 || 中，当满足一定条件会让右边代码不执行, 直接反馈短路的值。</p><p>l 不短路时以后面的值为准。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image018.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image020.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image022.gif"></p><p>l 原因：通过左边能得到整个式子的结果，因此没必要再判断右边，就算有两个&amp;&amp;或者 || 只要前面的发生短路中断了，后面就不用判断了。</p><p>l 运算结果：无论 &amp;&amp; 还是 || ，运算结果都是最后被执行的表达式值，一般用在变量赋值</p><p>l 左边为变量赋的值，右边为给的默认值。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image024.gif"></p><p><strong>额外内容：</strong>判断一个数是否整除案例</p><p>当用户不输入值时：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image026.gif"></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image028.gif"></p><p>l 一元运算符里面的逻辑非优先级很高</p><p>l 逻辑与比逻辑或优先级高</p><p><strong>练习：</strong></p><p>let a &#x3D; 3 &gt; 5 &amp;&amp; 2 &lt; 7 &amp;&amp; 3 &#x3D;&#x3D; 4 &#x2F;&#x2F; 答案是 false，此时发生了逻辑与中断</p><p>console.log(a);</p><p>let b &#x3D; 3 &lt;&#x3D; 4 || 3 &gt; 1 || 3 !&#x3D; 2 &#x2F;&#x2F; 答案是 true，此时发生了逻辑或中断</p><p>console.log(b);</p><p>let c &#x3D; 2 &#x3D;&#x3D;&#x3D; “2” &#x2F;&#x2F; 答案是 false，数据类型不同</p><p>console.log(c);</p><p>​</p><p>let d &#x3D; !c || b &amp;&amp; a &#x2F;&#x2F; 答案是 true，此事发生了逻辑或中断</p><p>console.log(d);</p><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="表达式和语句的区别"><a href="#表达式和语句的区别" class="headerlink" title="表达式和语句的区别"></a>表达式和语句的区别</h3><p>l <strong>表达式：</strong></p><p>n 表达式是一组代码的集合，js 解释器会将其计算出一个结果</p><p>l <strong>语句：</strong></p><p>n js 整句或命令，js 语句是以分号结束（可以省略）</p><p>n 比如： if 语句 for 循环语句</p><p>l <strong>区别：</strong></p><p>n 表达式计算出一个值，但语句用来自行以使某件事发生(做什么事)</p><p>u 表达式 3 + 4</p><p>u 语句 alert() 弹出对话框</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="程序三大流程控制语句"><a href="#程序三大流程控制语句" class="headerlink" title="程序三大流程控制语句"></a>程序三大流程控制语句</h3><p>l 以前我们写的代码，写几句就从上往下执行几句，这种叫顺序结构</p><p>l 有的时候要根据条件选择执行代码，这种就叫分支结构</p><p>l 某段代码被重复执行，就叫循环结构</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image030.gif"></p><h3 id="分支语句包含"><a href="#分支语句包含" class="headerlink" title="分支语句包含"></a>分支语句包含</h3><p>l 分支语句包含：</p><p>n If 分支语句</p><p>n 三元运算符</p><p>n switch 语句</p><h4 id="if-分支语句"><a href="#if-分支语句" class="headerlink" title="if 分支语句"></a>if 分支语句</h4><p>l if 语句有三种使用：单分支、双分支、多分支</p><p>l js 里规定，如果后面只有一个语句可以省略花括号，但是推荐都写花括号。</p><p>l <strong>单分支使用语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image032.gif"></p><p>n 括号内的条件为 true 时，进入大括号里执行代码</p><p>n 小括号内的结果若不是布尔类型时，会发生隐式转换转为布尔类型</p><p>l <strong>双分支 if 语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image034.gif"></p><p>l <strong>多分支 if 语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image036.gif"></p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>l 其实是比 if 双分支 更简单的写法，有时候也叫做三元表达式</p><p>l 符号：? 与 : 配合使用</p><p>l <strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image038.gif"></p><p>l 一般用来取值：可以直接赋值给一个变量</p><p>n 案例：判断输入的两个数的最大值</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image040.gif"></p><h4 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image042.gif"></p><p><strong>释义：</strong></p><p>l 找到跟小括号里数据全等的 case 值，并执行里面对应的代码</p><p>l 若没有全等 &#x3D;&#x3D;&#x3D; 的则执行 default 里的代码，default 语句不是必须要写的，可以不写</p><p>l 例：数据若跟值 2 全等，则执行代码 2</p><p>注意事项：</p><p>l switch case 语句一般用于等值判断,不适合于区间判断</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image044.gif"></p><p>l switch case 一般需要配合 break 关键字使用 没有 break 会造成 case 穿透（一直往下执行，直到碰到 break）</p><p>l 可应用于分支较多的范围取值判定</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>l <strong>作用：</strong>学习时可以帮助更好的理解代码运行，工作时可以更快找到 bug</p><p>l 浏览器打开调试界面</p><p>n 按 F12 打开开发者工具</p><p>n 点到 sources 一栏</p><p>n 选择代码文件</p><p>l <strong>断点：</strong>在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p><h3 id="while-循环语法："><a href="#while-循环语法：" class="headerlink" title="while 循环语法："></a>while 循环语法：</h3><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image046.gif"></p><p><strong>释义：</strong></p><p>l 跟 if 语句很像，都要满足小括号里的条件为 true 才会进入执行代码</p><p>l while 大括号里代码执行完毕后不会跳出，而是继续回到小括号里判断条件是否满足，若满足又执行大括号里的代码，然后再回到小括号判断条件，直到括号内条件不满足，即跳出</p><h3 id="while-循环注意事项："><a href="#while-循环注意事项：" class="headerlink" title="while 循环注意事项："></a>while 循环注意事项：</h3><p>循环的本质就是以某个变量为起始值，然后不断产生变化量，慢慢靠近终止条件的过程。</p><p>所以，循环需要具备三要素：</p><p>\1. 变量起始值</p><p>\2. 终止条件（没有终止条件，循环会一直执行，造成死循环）</p><p>\3. 变量变化量（用自增或者自减</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image048.gif"></p><h3 id="循环退出"><a href="#循环退出" class="headerlink" title="循环退出"></a>循环退出</h3><p>l <strong>循环结束：</strong></p><p>n continue：结束本次循环，继续下次循环</p><p>u 在 i 加到 3 时 if 条件成立，使得 i++，并且结束从这次循环直接进行下次循环，由此跳过第三次的吃包子。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day02/clip_image050.gif"></p><p>n break：跳出所在的循环，即退出循环。</p><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a>do-while 循环</h3><p>do… while 语句其实是 while 语句的一个变体。<strong>该循环会先执行一次代码块，然后对条件表达式进行判断</strong>，<strong>如果条件为真，就会重复执行循环体，否则退出循环。</strong></p><p><strong>do… while 语句的语法结构如下：</strong></p><p>do {</p><p>&#x2F;&#x2F; 循环体代码 - 条件表达式为 true 时重复执行循环体代码</p><p>} while(条件表达式);</p><h4 id="do-while-循环-案列"><a href="#do-while-循环-案列" class="headerlink" title="do-while 循环 案列"></a>do-while 循环 案列</h4><p>&#x2F;&#x2F; while 循环案例</p><p>&#x2F;&#x2F; 1. 打印人的一生，从 1 岁到 100 岁</p><p>let i &#x3D; 1;</p><p>do {</p><p>console.log(‘这个人今年’ + i + ‘岁了’);</p><p>i++;</p><p>} while (i &lt;&#x3D; 100)</p><p>&#x2F;&#x2F; 2. 计算 1 ~ 100 之间所有整数的和</p><p>let sum &#x3D; 0;</p><p>let j &#x3D; 1;</p><p>do {</p><p>sum +&#x3D; j;</p><p>j++;</p><p>} while (j &lt;&#x3D; 100)</p><p>console.log(sum);</p><p>&#x2F;&#x2F; 3. 弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问。</p><p>do {</p><p>let message &#x3D; prompt(‘你爱我吗?’);</p><p>} while (message !&#x3D;&#x3D; ‘我爱你’)</p><p>alert(‘我也爱你啊’);</p>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day01</title>
    <link href="/2022/05/05/JS%E5%9F%BA%E7%A1%80/day01/"/>
    <url>/2022/05/05/JS%E5%9F%BA%E7%A1%80/day01/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-介绍"><a href="#JavaScript-介绍" class="headerlink" title="JavaScript 介绍"></a>JavaScript 介绍</h1><h2 id="JavaScript-书写位置"><a href="#JavaScript-书写位置" class="headerlink" title="JavaScript 书写位置"></a>JavaScript 书写位置</h2><h2 id="内部形式"><a href="#内部形式" class="headerlink" title="内部形式"></a>内部形式</h2><p>直接写在 html 文件里，用 script 标签包住</p><p><strong>拓展</strong>：alert（’你好，js’）页面弹出警告对话框</p><p><strong>注意：我们将<script>放在 HTML 文件底部附近的原因是浏览器会按照代码在文件中的顺序加载 HTML。</strong></p><p><strong>如果先加载 JavaScript 期望修改其下方的 HTML， 那么他可能由于 HTML 尚未被加载而生效。x</strong></p><p><strong>因此，将 JavaScript 代码放在 HTML 页面的底部附近通常是最好的策略。</strong></p><h2 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h2><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 script 标签的 src 属性引入</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image002.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image004.gif"></p><h2 id="注释和结束符"><a href="#注释和结束符" class="headerlink" title="注释和结束符"></a>注释和结束符</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>使用 // 注释单行代码</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>使用 /* */ 注释多行代码</p><h3 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h3><p>在 JavaScript 中 ; 代表一段代码的结束，多数情况下可以省略 ; 使用回车（enter）替代。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image006.gif"></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>向 alert() 或 document.write() 输入任意数字，他都会以弹窗形式展示（输出）给用户。</p><h4 id="输出语法："><a href="#输出语法：" class="headerlink" title="输出语法："></a>输出语法：</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image008.gif"></p><p>l 向 body 内输出内容。</p><p>l 如果输出的内容写的是标签，也会被解析成网页元素。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image010.gif"></p><p>l 页面弹出警告对话框</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image012.gif"></p><p>l 控制台输入语法，程序员调试使用</p><h4 id="输入语法："><a href="#输入语法：" class="headerlink" title="输入语法："></a>输入语法：</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image014.gif"></p><p>l 显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</p><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image016.gif"></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量是计算机存储数据的“容器”，用户输入的数据就是用变量存储起来的。</p><p>\1. 白话：变量就是一个装东西的盒子。</p><p>\2. 通俗：变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image018.gif"></p><p><strong>注意：</strong>变量不是数据本身，它们仅仅是一个用于存储数值的容器。可以理解为是一个个用来装东西的纸箱子。</p><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p><strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image020.gif"></p><p>l 声明变量有两部分构成：声明关键字、变量名（标识）</p><p>l let 即关键字 (let: 允许、许可、让、要)，所谓关键字是系统提供的专门用来声明（定义）变量的词语</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image022.gif"></p><h3 id="变量赋值："><a href="#变量赋值：" class="headerlink" title="变量赋值："></a>变量赋值：</h3><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image024.gif"></p><h3 id="更新变量："><a href="#更新变量：" class="headerlink" title="更新变量："></a>更新变量：</h3><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image026.gif"></p><p><strong>注意：</strong> let 不允许多次声明一个变量。</p><h3 id="声明多个变量："><a href="#声明多个变量：" class="headerlink" title="声明多个变量："></a>声明多个变量：</h3><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image028.gif"></p><h2 id="变量命名规则与规范"><a href="#变量命名规则与规范" class="headerlink" title="变量命名规则与规范"></a>变量命名规则与规范</h2><p><strong>规则：</strong>必须遵守，不遵守会报错</p><p><strong>规范：</strong>建议，不遵守不会报错，但不符合业内通识</p><p>l <strong>规则：</strong></p><p>n 不能用关键字：有特殊含义的字符，JavaScript 内置的一些英文词汇。例如：let, var, if, for 等</p><p>n 只能用下划线，字母，数字，$组成，且不能以数字开头</p><p>n 字母严格区分大小写，如 Age 和 age 是不同变量</p><p>l <strong>规范：</strong></p><p>n 起名要有意义</p><p>n 遵守小驼峰命名法</p><p>n 第一个单词首字母小写，后面每个单词首字母大写。例：userName</p><h2 id="变量拓展-let-和-var-的区别"><a href="#变量拓展-let-和-var-的区别" class="headerlink" title="变量拓展-let 和 var 的区别"></a>变量拓展-let 和 var 的区别</h2><p><strong>var 声明：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image030.gif"></p><p>结论：以后声明变量我们统一使用 let</p><h2 id="变量拓展-数组"><a href="#变量拓展-数组" class="headerlink" title="变量拓展-数组"></a>变量拓展-数组</h2><p>数组(Array)是一种可以按顺序保存多个数据</p><p><strong>声明语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image032.gif"></p><p>l 数组是按顺序保存，所以每个数据都有自己的编号</p><p>l 计算机中的编号从 0 开始，所以小明的编号为 0，小刚编号为 1，以此类推</p><p>l 在数组中，数据的编号也叫索引或下标</p><p>l 数组可以存储任意类型的数据</p><p><strong>取值语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image034.gif"></p><p>l 通过下标取数据</p><p>l 取出来是什么类型的，就根据这种类型特点来访问</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>JS 数据类型整体分为两大类：</strong></p><p>l 基本数据类型</p><p>l 引用数据类型</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image036.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image038.gif"></p><h2 id="数据类型-–-数字类型（number）"><a href="#数据类型-–-数字类型（number）" class="headerlink" title="数据类型 – 数字类型（number）"></a>数据类型 – 数字类型（number）</h2><p>即我们数学中学习到的数字，可以是整数、小数、正数、负数。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image040.gif"></p><p><strong>注意事项：</strong>JS 是弱数据类型，变量到底属于那种类型，只有赋值之后，我们才能确认 Java 是强数据类型 例如 int a = 3 必须是整数</p><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h3><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image042.gif"></p><h2 id="数据类型-–-字符串类型（string）"><a href="#数据类型-–-字符串类型（string）" class="headerlink" title="数据类型 – 字符串类型（string）"></a>数据类型 – 字符串类型（string）</h2><p>通过单引号（ ''） 、双引号（ ""）或反引号( ` )包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image044.gif"></p><p><strong>注意事项：</strong></p><p>l 无论单引号或是双引号必须成对使用</p><p>l 单引号/双引号可以互相嵌套，但是不以自已嵌套自已（口诀：外双内单，或者外单内双）</p><p>l 字符串里面的引号也算一个字符</p><p>l 必要时可以使用转义符 \，输出单引号或双引号</p><p>l prompt()里就算输入数字字面量 18 其表现的数据类型仍然为字符串类型</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image046.gif"></p><p><strong>字符串拼接：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image048.gif"></p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><strong>作用：</strong></p><p>l 拼接字符串和变量</p><p>l 在没有它之前，要拼接变量比较麻烦</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image050.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image052.gif"></p><p><strong>符号：</strong></p><p>l ``</p><p>l 在英文输入模式下按键盘的 tab 键上方那个键（1 左边那个键）</p><p>l 内容拼接变量时，用 ${} 包住变量</p><p>l ${} 里面能进行运算</p><p>l 不仅仅能用在 document 上，也能用在 alert 等其他语句上。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image054.gif"></p><p>l 反引号里面能直接换行，不用插入<br />标签。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image056.gif"></p><p>l 反引号里面能放 html 标签，能修改样式。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image058.gif"></p><p>l 并且标签的首和尾能分别用 document 打印</p><p>n 例：将<div></div>标签以及里面的内容进行分别打印，</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image060.gif"></p><h2 id="数据类型-–-布尔类型（boolean）"><a href="#数据类型-–-布尔类型（boolean）" class="headerlink" title="数据类型 – 布尔类型（boolean）"></a>数据类型 – 布尔类型（boolean）</h2><p>表示肯定或否定时在计算机中对应的是布尔类型数据。</p><p>它有两个固定的值 true 和 false，表示肯定的数据用 true（真），表示否定的数据用 false（假）。</p><p>布尔值+数字型会隐式转换为数字型，布尔值+字符串会隐式转换为字符串</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image062.gif"></p><h2 id="数据类型-–-未定义类型（undefined）"><a href="#数据类型-–-未定义类型（undefined）" class="headerlink" title="数据类型 – 未定义类型（undefined）"></a>数据类型 – 未定义类型（undefined）</h2><p>未定义是比较特殊的类型，只有一个值 undefined。</p><p>只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image064.gif"></p><p><strong>工作中的使用场景：</strong>我们开发中经常声明一个变量，等待传送过来的数据。如果我们不知道这个数据是否传递过来，此时我们可以通过检测这个变量是不是 undefined，就判断用户是否有数据传递过来。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image066.gif"></p><h2 id="数据类型-–-null（空类型）"><a href="#数据类型-–-null（空类型）" class="headerlink" title="数据类型 – null（空类型）"></a>数据类型 – null（空类型）</h2><p>null 表示 值为 空</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image068.gif"></p><p><strong>null 和 undefined 区别：</strong></p><p>l undefined 表示没有赋值</p><p>l null 表示赋值了，但是内容为空</p><p><strong>null 开发中的使用场景：</strong></p><p>官方解释：把 null 作为尚未创建的对象</p><p>大白话： 将来有个变量里面存放的是一个对象，但是对象还没创建好，可以先给个 null</p><h2 id="其他数据类型-symbol-bigint"><a href="#其他数据类型-symbol-bigint" class="headerlink" title="其他数据类型 symbol,bigint"></a>其他数据类型 symbol,bigint</h2><h2 id="控制台输出语句和检测数据类型"><a href="#控制台输出语句和检测数据类型" class="headerlink" title="控制台输出语句和检测数据类型"></a>控制台输出语句和检测数据类型</h2><h3 id="通过-typeof-关键字检测数据类型"><a href="#通过-typeof-关键字检测数据类型" class="headerlink" title="通过 typeof 关键字检测数据类型"></a>通过 typeof 关键字检测数据类型</h3><p>通过 typeof 关键字检测数据类型，并且输出数据类型的名称</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image070.gif"></p><p>typeof null // object</p><p><strong>2. instanceof 检测引用类型</strong></p><p><strong>3. Object.prototype.toString.call() 既可以检测基本类型，也可以检测引用类型</strong></p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="为什么需要类型转换"><a href="#为什么需要类型转换" class="headerlink" title="为什么需要类型转换"></a>为什么需要类型转换</h2><p>JavaScript 是弱数据类型： JavaScript 也不知道变量到底属于那种数据类型，只有赋值了才清楚。</p><p><strong>坑：</strong> 使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image072.gif"></p><p>此时需要转换变量的数据类型。</p><p>通俗来说，就是把一种数据类型的变量转换成我们需要的数据类型。</p><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><p><strong>规则：</strong></p><p>l + 号两边只要有一个是字符串，都会把另外一个转成字符串</p><p>l 除了+以外的算术运算符 比如 - * / 等都会把数据转成数字类型</p><p>l ++，--也能将数据转换为数字类型</p><p><strong>缺点：</strong></p><p>l 转换类型不明确，靠经验才能总结</p><p><strong>小技巧：</strong></p><p>l +号作为正号解析可以转换成 Number</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image074.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image076.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image078.gif"></p><h2 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h2><p>自己写代码告诉系统该转成什么类型</p><h3 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h3><p>Number(数据)</p><p>l 转成数字类型</p><p>l 如果字符串内容里有非数字，转换失败时结果为 NaN（Not a Number）即不是一个数字</p><p>l NaN 也是 number 类型的数据，代表非数字</p><p>l Number 能将 false 转换为 0，true 转换为 1</p><p>parseInt(数据)</p><p>l 只带有数字的字符串转换为数字型的同时去除非数字的单位或者符号</p><p>l paseint 第一个参数放数据，第二个参数放几进制</p><p>l 如果数据里有不能直接识别为数字的值则直接返回第一个数字</p><p>parseFloat(数据)</p><p>l 可以保留小数</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image080.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image082.gif"></p><h3 id="转换为字符型"><a href="#转换为字符型" class="headerlink" title="转换为字符型"></a>转换为字符型</h3><p>l String(数据)</p><p>l 变量.toString(进制)</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image084.gif"></p><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><p>l <strong>false , 数字 0 , ' ' , undefined , null, NaN 代表 false</strong></p><p>l 其余值都会被转换为 true</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day01/clip_image086.gif"></p>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day03</title>
    <link href="/2022/05/05/JS%E5%9F%BA%E7%A1%80/day03/"/>
    <url>/2022/05/05/JS%E5%9F%BA%E7%A1%80/day03/</url>
    
    <content type="html"><![CDATA[<h1 id="循环-for"><a href="#循环-for" class="headerlink" title="循环-for"></a>循环-for</h1><h2 id="for-循环基本使用"><a href="#for-循环基本使用" class="headerlink" title="for 循环基本使用"></a>for 循环基本使用</h2><p><strong>for 循环语法：</strong></p><p>l 也是重复执行代码</p><p>l 好处：把声明起始值、循环条件、变化值写到一起，让人一目了然</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image002.gif"></p><p>能在里面直接声明</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image004.gif"></p><h2 id="退出循环"><a href="#退出循环" class="headerlink" title="退出循环"></a>退出循环</h2><p>l <strong>循环结束：</strong></p><p>n continue：结束本次循环，继续下次循环</p><p>n break：跳出所在的循环</p><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image006.gif"></p><p>l 一个循环里再套一个循环，一般用在 for 循环里</p><p>总结：for 循环和 while 循环有什么区别呢：</p><p>l 当如果明确了循环的次数的时候推荐使用 for 循环</p><p>l 当不明确循环的次数的时候推荐使用 while 循环</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组是什么"><a href="#数组是什么" class="headerlink" title="数组是什么"></a>数组是什么</h2><p>l 数组(Array)是一种可以按顺序保存数据的数据类型</p><p>l 为什么要数组？</p><p>n 思考：如果我想保存一个班里 5 个人的姓名怎么办？</p><p>n 如果有多个数据可以用数组保存起来</p><h2 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h2><p><strong>声明语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image008.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image010.gif"></p><p>l 数组是按顺序保存，所以每个数据都有自己的编号</p><p>l 计算机中的编号从 0 开始，所以小明的编号为 0，小刚编号为 1，以此类推</p><p>l 在数组中，数据的编号也叫<strong>索引或下标</strong></p><p>l 数组可以存储任意类型的数据，</p><p>&#x2F;&#x2F; 数字，字符串，布尔，undefine， 空， 对象， 数组</p><p>let arr &#x3D; [1, ‘pink’, true, undefined, null, {}, []]</p><p><strong>取值语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image012.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image014.gif"></p><p>l 通过下标取数据</p><p>l 取出来是什么类型的，就根据这种类型特点来访问</p><p><strong>一些术语：</strong></p><p>l 元素：数组中保存的每个数据都叫数组元素</p><p>l 下标：数组中数据的编号</p><p>l 长度：数组中数据的个数，通过数组的 length 属性获得</p><p><strong>遍历数组：</strong></p><p>用循环把数组中每个元素都访问到,一般会用 for 循环遍历</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image016.gif"></p><h2 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h2><p>l 字面量方式</p><p>var arr &#x3D; [1,”test”,true];</p><p>l new Array()</p><p>&#x2F;&#x2F; var arr1 &#x3D; new Array(); &#x2F;&#x2F; 创建了一个空的数组</p><p>&#x2F;&#x2F; var arr1 &#x3D; new Array(2); &#x2F;&#x2F; 这个 2 表示 数组的长度为 2 里面有 2 个空的数组元素</p><p>var arr1 &#x3D; new Array(2,3); &#x2F;&#x2F; 等价于 [2,3] 这样写表示 里面有 2 个数组元素 是 2 和 3</p><p>console.log(arr1);</p><p>l 注意：上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数 Array 创建非空数组，可以在创建数组时传入参数</p><p>l 参数传递规则如下：</p><p>n 如果只传入<strong>一个参数</strong>，则参数规定了<strong>数组的长度</strong></p><p>n 如果传入了<strong>多个参数</strong>，则参数称为<strong>数组的元素</strong></p><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><p>l instanceof 运算符</p><p>&#x2F;&#x2F; instanceof 可以判断一个对象是否是某个构造函数的实例</p><p>var arr &#x3D; [1, 23];</p><p>var obj &#x3D; {};</p><p>console.log(arr instanceof Array); &#x2F;&#x2F; true</p><p>console.log(obj instanceof Array); &#x2F;&#x2F; false</p><p>l Array.isArray()</p><p>&#x2F;&#x2F; Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><p>var arr &#x3D; [1, 23];</p><p>var obj &#x3D; {};</p><p>console.log(Array.isArray(arr)); &#x2F;&#x2F; true</p><p>console.log(Array.isArray(obj)); &#x2F;&#x2F; false</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h2><p>数组本质是数据集合, 操作数据无非就是 增 删 改 查 语法：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image018.gif"></p><h3 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h3><p><strong>console.log(arr[0])</strong></p><h3 id="改："><a href="#改：" class="headerlink" title="改："></a>改：</h3><p><strong>arr[0] &#x3D; ‘lightpink’</strong></p><h3 id="数组增加新的数据"><a href="#数组增加新的数据" class="headerlink" title="数组增加新的数据"></a>数组增加新的数据</h3><h4 id="数组-push-方法"><a href="#数组-push-方法" class="headerlink" title="数组.push() 方法:"></a>数组.push() 方法:</h4><p>将一个或多个元素添加到数组的末尾，返回值该数组的新长度 (重点)</p><p>语法：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image020.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image022.gif"></p><p><strong>案例：筛选 arr 里面大于 10 的数组，并存放在新的数组中。</strong></p><p><strong>声明新的要存放数据的数组，必须要放一个空的中括号。</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image024.gif"></p><h4 id="arr-unshift-新增的内容-方法"><a href="#arr-unshift-新增的内容-方法" class="headerlink" title="arr.unshift(新增的内容) 方法:"></a>arr.unshift(新增的内容) 方法:</h4><p>将一个或多个元素添加到数组的开头，并返回该数组的新长度</p><p><strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image026.gif"></p><p><strong>添加单个元素：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image028.gif"></p><p><strong>添加多个元素：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image030.gif"></p><h4 id="通过修改-length-长度新增数组元素："><a href="#通过修改-length-长度新增数组元素：" class="headerlink" title="通过修改 length 长度新增数组元素："></a>通过修改 length 长度新增数组元素：</h4><p>l 可以通过修改 length 长度来实现数组扩容的目的</p><p>l length 属性是可读写的</p><p>var arr &#x3D; [‘red’, ‘green’, ‘blue’];</p><p>console.log(arr.length);</p><p>arr.length &#x3D; 1; &#x2F;&#x2F; 把我们数组的长度修改为了 5 里面应该有 5 个元素</p><p>console.log(arr);</p><p>console.log(arr[3]); &#x2F;&#x2F; undefined</p><p>console.log(arr[4]); &#x2F;&#x2F; undefined</p><p>如果设置的<strong>length 属性值大于数组的元素个数</strong>，则会在数组末尾出现空白元素；</p><p>如果设置的<strong>length 属性值小于数组的元素个数</strong>，则会把超过该值的数组元素删除；</p><h4 id="通过修改数组索引新增数组元素"><a href="#通过修改数组索引新增数组元素" class="headerlink" title="通过修改数组索引新增数组元素:"></a>通过修改数组索引新增数组元素:</h4><p>l 可以通过修改数组索引的方式追加数组元素</p><p>l 不能直接给数组名赋值，否则会覆盖掉以前的数据</p><p>l 注意点：给数组的尾部添加新元素的方法：<strong>数组[ 数组.length ] &#x3D; 新数据;</strong></p><p>&#x2F;&#x2F; 2. 新增数组元素 修改索引号 追加数组元素</p><p>var arr1 &#x3D; [‘red’, ‘green’, ‘blue’];</p><p>arr1[3] &#x3D; ‘pink’;</p><p>console.log(arr1);</p><p>arr1[4] &#x3D; ‘hotpink’;</p><p>console.log(arr1);</p><p>arr1[0] &#x3D; ‘yellow’; &#x2F;&#x2F; 这里是替换原来的数组元素</p><p>console.log(arr1);</p><p>arr1 &#x3D; ‘有点意思’;</p><p>console.log(arr1); &#x2F;&#x2F; 不要直接给 数组名赋值 否则里面的数组元素都没有了</p><p>1.6.3 案例 <strong>数组新增元素</strong></p><p>&#x2F;&#x2F; 新建一个数组，里面存放 10 个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</p><p>&#x2F;&#x2F; 核心原理：使用循环来追加数组。</p><p>&#x2F;&#x2F; 1、声明一个空数组 arr。</p><p>&#x2F;&#x2F; 2、循环中的计数器 i 可以作为数组元素存入。</p><p>&#x2F;&#x2F; 3、由于数组的索引号是从 0 开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</p><p>var arr &#x3D; [];</p><p>for (var i &#x3D; 0; i &lt; 100; i++) {</p><p>&#x2F;&#x2F; arr &#x3D; i; 不要直接给数组名赋值 否则以前的元素都没了</p><p>arr[i] &#x3D; i + 1;</p><p>}</p><p>console.log(arr);</p><h3 id="删除数组中的部分"><a href="#删除数组中的部分" class="headerlink" title="删除数组中的部分"></a>删除数组中的部分</h3><p><strong>arr.pop()方法：</strong></p><p>从数组中删除最后一个元素，并返回被删除元素的值，（括号里面不带参数，返回值是删除的元素）</p><p><strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image032.gif"></p><p><strong>arr.shift()方法：</strong></p><p>从数组中删除第一个元素，并返回该元素的值。（括号里面不带参数，返回值是删除的元素）</p><p><strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image034.gif"></p><p><strong>arr.splice(操作的下标，删除的个数)：</strong></p><p>删除指定元素</p><p><strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image036.gif"></p><p>解释：</p><p>l 起始位置:</p><p>n 指定修改的开始位置（从 0 计数），可以用方位名词，意义用数字表示从第几个开始。并且算上自己</p><p>l deleteCount:</p><p>n 表示要移除的数组元素的个数</p><p>n 可选的。 如果省略则默认从指定的起始位置删除到最后</p><p><strong>删除元素 splice 的使用场景</strong>：</p><p>\1. 随机抽奖，中奖的用户就需要从数组里面删除，不允许重复抽奖</p><h2 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h2><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image038.gif"></p><p>&#x2F;&#x2F; 返回数组元素索引号方法 indexOf(数组元素) 作用就是返回该数组元素的索引号 从前面开始查找</p><p>&#x2F;&#x2F; 它只返回第一个满足条件的索引号</p><p>&#x2F;&#x2F; 它如果在该数组里面找不到元素，则返回的是 -1</p><p>&#x2F;&#x2F; var arr &#x3D; [‘red’, ‘green’, ‘blue’, ‘pink’, ‘blue’];</p><p>var arr &#x3D; [‘red’, ‘green’, ‘pink’];</p><p>console.log(arr.indexOf(‘blue’));</p><p>&#x2F;&#x2F; 返回数组元素索引号方法 lastIndexOf(数组元素) 作用就是返回该数组元素的索引号 从后面开始查找</p><p>var arr &#x3D; [‘red’, ‘green’, ‘blue’, ‘pink’, ‘blue’];</p><p>console.log(arr.lastIndexOf(‘blue’)); &#x2F;&#x2F; 4</p><h2 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h2><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image040.gif"></p><p>注意：join 方法如果不传入参数，则按照 “ , ”拼接元素</p><script>  // 数组转换为字符串   // 1. toString() 将我们的数组转换为字符串  var arr = [1, 2, 3];  console.log(arr.toString()); // 1,2,3  // 2. join(分隔符)   var arr1 = ['green', 'blue', 'pink'];  console.log(arr1.join()); // green,blue,pink  console.log(arr1.join('-')); // green-blue-pink  console.log(arr1.join('&')); // green&blue&pink</script><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习（concat（），slice（），splice（））</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image042.gif"></p><p>&#x2F;&#x2F; 其他方法</p><p>&#x2F;&#x2F; 数组连接:concat() 连接多个数组，返回一个新数组</p><p>var arr2 &#x3D; [‘green’, ‘blue’, ‘pink’];</p><p>var arr3 &#x3D; [‘pink1’]</p><p>var arr4 &#x3D; arr2.concat(arr3)</p><p>console.log(arr4);</p><p>&#x2F;&#x2F; 数组截取:slice(begin, end) [begin, end) &#x2F;&#x2F; 返回一个新数组</p><p>var arr5 &#x3D; arr4.slice(0,2)</p><p>console.log(arr5);</p><h2 id="数组案例"><a href="#数组案例" class="headerlink" title="数组案例"></a>数组案例</h2><p>综合案例：让用户输入四个季节的数据，并生成柱状图。</p><p>\1. 利用循环弹出四次框，并且将获得的数据存储到数组中。</p><p>\2. 遍历数组，根据数据生成 4 个柱状图，渲染打印在页面中。</p><p>a) 柱状图就是 div 盒子，设置宽度固定， 高度为用户输入的数据</p><p>\3. 其中大盒子的首尾标签用 document 分别打印，中间的柱状图用 for 循环生成，并且通过 document 打印出来。</p><p>\4. i 变量能重复使用是因为两个地方分别为不同的块范围，各自互不影响。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day03/clip_image044.gif"></p><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p>排列数组顺序可以使用数组的 sort 方法</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><h4 id="数组去重可用-new-Set-方法"><a href="#数组去重可用-new-Set-方法" class="headerlink" title="数组去重可用 new Set()方法"></a>数组去重可用 new Set()方法</h4><p>方法用于对数组的元素去重。</p><p>let arr &#x3D; [3, 5, 2, 2, 5, 5]</p><p>let setArr &#x3D; new Set(arr) &#x2F;&#x2F; 返回 set 数据结构 Set(3) {3, 5, 2}</p><p>&#x2F;&#x2F;方法一 es6 的…解构</p><p>let unique1 &#x3D; […setArr ] &#x2F;&#x2F;去重转数组后 [3,5,2]</p><p>&#x2F;&#x2F;方法二 Array.from()解析类数组为数组</p><p>let unique2 &#x3D; Array.from(setArr ) &#x2F;&#x2F;去重转数组后 [3,5,2]</p><h4 id="数组去重-indexOf-方法"><a href="#数组去重-indexOf-方法" class="headerlink" title="数组去重 indexOf()方法"></a>数组去重 indexOf()方法</h4><p>JavaScript indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</p><p>注释：indexOf() 方法对大小写敏感！</p><p>注释：如果要检索的字符串值没有出现，则该方法返回 -1</p><p>JavaScript indexOf() 方法</p><scripttype="text/javascript">var str="Hello world!"document.write(str.indexOf("Hello") + "<br />")document.write(str.indexOf("World") + "<br />")document.write(str.indexOf("world"))</script><p>&#x2F;&#x2F; 以上代码的输出：</p><p>0</p><p>-1</p><p>6</p><h4 id="Array-includes"><a href="#Array-includes" class="headerlink" title="Array.includes()"></a>Array.includes()</h4><p>该方法返回一个布尔值，表示某个数组是否包含给定的值</p><p>var arr &#x3D; [1, 2, 3, 6]</p><p>var res &#x3D; arr.includes(6)</p><p>console.log(res)</p><p>if(arr.includes(6)) {</p><p>console.log(<code>数组里面存在6</code>)</p><p>}</p><p>&#x2F;&#x2F; eg.2</p><p>var arr2 &#x3D; [true, true, false, true]</p><p>if (arr2.includes(false)){</p><p>console.log(‘数组里边有 false’)</p><p>}</p><h2 id="arguments（伪数组）的使用"><a href="#arguments（伪数组）的使用" class="headerlink" title="arguments（伪数组）的使用"></a>arguments（伪数组）的使用</h2><p>当不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。</p><p><strong>arguments 展示形式是一个伪数组</strong>，因此可以进行遍历。</p><p><strong>伪数组</strong>具有以下特点：</p><p>l 具有 length 属性</p><p>l 按索引方式储存数据</p><p>l 不具有数组的 push , pop 等方法注意：<strong>在函数内部使用该对象</strong>，用此对象获取函数调用时传的实参。</p>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day05</title>
    <link href="/2022/05/05/JS%E5%9F%BA%E7%A1%80/day05/"/>
    <url>/2022/05/05/JS%E5%9F%BA%E7%A1%80/day05/</url>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>l 对象是什么？</p><p>n 对象是一种数据类型</p><p>n 无序的数据的集合</p><p>l 对象有什么特点？</p><p>n 无序的数据的集合</p><p>n 可以详细的描述描述某个事物</p><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>l 对象（object）：JavaScript 里的一种数据类型</p><p>l 可以理解为是一种无序的数据集合</p><p>l 用来描述某个事物，例如描述一个人</p><p>n 人有姓名、年龄、性别等信息、还有吃饭睡觉打代码等功能</p><p>n 如果用多个变量保存则比较散，用对象比较统一</p><p>l 比如描述 班主任 信息：</p><p>n 静态特征 (姓名, 年龄, 身高, 性别, 爱好) &#x3D;&gt; 可以使用数字, 字符串, 数组, 布尔类型等表示</p><p>n 动态行为 (点名, 唱, 跳, rap) &#x3D;&gt; 使用函数表示</p><h2 id="对象使用"><a href="#对象使用" class="headerlink" title="对象使用"></a>对象使用</h2><h4 id="对象声明语法："><a href="#对象声明语法：" class="headerlink" title="对象声明语法："></a>对象声明语法：</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image002.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image004.gif"></p><h4 id="对象有属性和方法组成"><a href="#对象有属性和方法组成" class="headerlink" title="对象有属性和方法组成"></a>对象有属性和方法组成</h4><p>n <strong>属性：</strong>信息或叫特征（名词）。 比如 手机尺寸、颜色、重量等…</p><p>n <strong>方法：</strong>功能或叫行为（动词）。 比如 手机打电话、发短信、玩游戏…</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image006.gif"></p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image008.gif"></p><p>n 属性都是成 对出现的，包括属性名和值，它们之间使用英文 : 分隔</p><p>n 多个属性之间使用英文 , 分隔</p><p>n 属性就是依附在对象上的变量（外面是变量，对象内是属性）</p><p>n 属性名可以使用 “” 或 ‘’，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</p><h4 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h4><p>声明对象，并添加了若干属性后，可以使用 . 或 [] 获得对象中属性对应的值(需要用单引号包裹)，我称之为属性访问。</p><p>简单理解就是获得对象里面的属性值。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image010.gif"></p><h4 id="对象中的方法"><a href="#对象中的方法" class="headerlink" title="对象中的方法"></a>对象中的方法</h4><p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，<strong>其本质是函数</strong>。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image012.gif"></p><p>l 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</p><p>l 多个属性之间使用英文 , 分隔</p><p>l 方法是依附在对象中的函数</p><p>l 方法名可以使用 “” 或 ‘’，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</p><h4 id="对象中的方法访问"><a href="#对象中的方法访问" class="headerlink" title="对象中的方法访问"></a>对象中的方法访问</h4><p>声明对象，并添加了若干方法后，可以使用 . 调用对象中函数，称之为方法调用。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image014.gif"></p><p><strong>注意： 千万别忘了给方法名后面加小括号</strong></p><h2 id="操作对象"><a href="#操作对象" class="headerlink" title="操作对象"></a>操作对象</h2><p>对象本质是无序的数据集合, 操作数据无非就是 增 删 改 查 语法：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image016.gif"></p><h3 id="查询对象"><a href="#查询对象" class="headerlink" title="查询对象"></a>查询对象</h3><p>console.dir 能够打印对象里面所有属性和方法</p><h4 id="获取不同对象名的属性："><a href="#获取不同对象名的属性：" class="headerlink" title="获取不同对象名的属性："></a>获取不同对象名的属性：</h4><p>\1. 在多个同类 dom 元素中设置一个 data-key&#x3D;”对象属性名”,</p><p>\2. 触发点击事件，</p><p>\3. 获取点击对象的 dataset 值，并且获取对象里的对应属性名的属性值。</p><h3 id="增加属性"><a href="#增加属性" class="headerlink" title="增加属性"></a>增加属性</h3><p>也可以动态为对象添加属性，动态添加与直接定义是一样的，只是语法上更灵活。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image018.gif"></p><h3 id="新增对象中的方法"><a href="#新增对象中的方法" class="headerlink" title="新增对象中的方法"></a>新增对象中的方法</h3><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image020.gif"></p><p>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</p><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p><strong>能够遍历输出对象里面的元素</strong></p><p>对象没有像数组一样的 length 属性,所以无法确定长度</p><p>对象里面是无序的键值对, 没有规律. 不像数组里面有规律的下标</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image022.gif"></p><p>l 一般不用这种方式遍历数组、主要是用来遍历对象</p><p>l 一定记住： k 是获得对象的属性名， 对象名[k] 是获得 属性值</p><p>l 为什么这么写？</p><p>n k &#x3D;&#x3D;&#x3D; ‘uname’ &#x3D;&#x3D;&#x3D; ‘age’ &#x3D;&#x3D;&#x3D; ‘sex’</p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p><strong>掌握内置对象，调用 JavaScript 为我们准备好的功能</strong></p><h4 id="内置对象是什么"><a href="#内置对象是什么" class="headerlink" title="内置对象是什么"></a>内置对象是什么</h4><p>l JavaScript 内部提供的对象，包含各种属性和方法给开发者调用</p><p>l 思考：我们之前用过内置对象吗？</p><p>n document.write()</p><p>n console.log()</p><h4 id="内置对象-Math"><a href="#内置对象-Math" class="headerlink" title="内置对象 Math"></a>内置对象 Math</h4><p>l Math 对象是 JavaScript 提供的一个“数学高手”对象</p><p>l 提供了一系列做数学运算的方法</p><p>l 方法有：</p><p>n random：生成 0-1 之间的随机数（包含 0 不包括 1）</p><p>n ceil：向上取整</p><p>n floor：向下取整</p><p>n max：找最大数</p><p>n min：找最小数</p><p>n pow：幂运算</p><p>n abs：绝对值</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image024.gif"></p><h3 id="生成任意范围随机数"><a href="#生成任意范围随机数" class="headerlink" title="生成任意范围随机数"></a>生成任意范围随机数</h3><p>l 如何生成 0-10 的随机数呢？</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image026.gif"></p><p>l 如何生成 5-10 的随机数？</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image028.gif"></p><p>l 如何生成 N-M 之间的随机数，包含 N 和 M 两个数?</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image030.gif"></p><h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image032.gif"></p><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><p>l 字面量方式</p><p>var arr &#x3D; [1,”test”,true];</p><p>l new Array()</p><p>&#x2F;&#x2F; var arr1 &#x3D; new Array(); &#x2F;&#x2F; 创建了一个空的数组</p><p>&#x2F;&#x2F; var arr1 &#x3D; new Array(2); &#x2F;&#x2F; 这个 2 表示 数组的长度为 2 里面有 2 个空的数组元素</p><p>var arr1 &#x3D; new Array(2,3); &#x2F;&#x2F; 等价于 [2,3] 这样写表示 里面有 2 个数组元素 是 2 和 3</p><p>console.log(arr1);</p><p>l 注意：上面代码中 arr 创建出的是一个空数组，如果需要使用构造函数 Array 创建非空数组，可以在创建数组时传入参数</p><p>l 参数传递规则如下：</p><p>n 如果只传入<strong>一个参数</strong>，则参数规定了<strong>数组的长度</strong></p><p>n 如果传入了<strong>多个参数</strong>，则参数称为<strong>数组的元素</strong></p><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><p>l instanceof 运算符</p><p>&#x2F;&#x2F; instanceof 可以判断一个对象是否是某个构造函数的实例</p><p>var arr &#x3D; [1, 23];</p><p>var obj &#x3D; {};</p><p>console.log(arr instanceof Array); &#x2F;&#x2F; true</p><p>console.log(obj instanceof Array); &#x2F;&#x2F; false</p><p>l Array.isArray()</p><p>&#x2F;&#x2F; Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><p>var arr &#x3D; [1, 23];</p><p>var obj &#x3D; {};</p><p>console.log(Array.isArray(arr)); &#x2F;&#x2F; true</p><p>console.log(Array.isArray(obj)); &#x2F;&#x2F; false</p><h2 id="利用-new-Object-创建对象"><a href="#利用-new-Object-创建对象" class="headerlink" title="利用 new Object 创建对象"></a>利用 new Object 创建对象</h2><p>l 创建空对象</p><p>var andy &#x3D; new Obect();</p><p>通过内置构造函数 Object 创建对象，此时 andy 变量已经保存了创建出来的空对象</p><p>l 给空对象添加属性和方法</p><p>n 通过对象操作属性和方法的方式，来为对象增加属性和方法</p><p>n 示例代码如下：</p><p>andy.name &#x3D; ‘pink’;</p><p>andy.age &#x3D; 18;</p><p>andy.sex &#x3D; ‘男’;</p><p>andy.sayHi &#x3D; function(){</p><p>​ alert(‘大家好啊~’);</p><p>}</p><p>l 注意：</p><p>n Object() ：第一个字母大写</p><p>n new Object() ：需要 new 关键字</p><p>n 使用的格式：对象.属性 &#x3D; 值;</p><h2 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h2><p>构造函数</p><p>n 构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><p>n 构造函数的封装格式：</p><p>function 构造函数名(形参 1,形参 2,形参 3) {</p><p>​ this.属性名 1 &#x3D; 参数 1;</p><p>​ this.属性名 2 &#x3D; 参数 2;</p><p>​ this.属性名 3 &#x3D; 参数 3;</p><p>​ this.方法名 &#x3D; 函数体;</p><p>}</p><p>n 构造函数的调用格式</p><p>var obj &#x3D; new 构造函数名(实参 1，实参 2，实参 3)</p><p>n 以上代码中，obj 即接收到构造函数创建出来的对象。</p><p>n 注意事项</p><p>​ i. 构造函数约定<strong>首字母大写</strong>。</p><p>​ ii. 函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</p><p>​ iii. 构造函数中<strong>不需要 return 返回结果</strong>。</p><p>​ iv. 当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</p><p>n 其他构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class） 创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p><p>l new 关键字的作用</p><p>b) 在构造函数代码开始执行之前，创建一个空对象；</p><p>c) 修改 this 的指向，把 this 指向创建出来的空对象；</p><p>d) 执行函数的代码;</p><p>e) 在函数完成之后，返回 this—即创建出来的对象;</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image034.gif"></p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="拓展-术语解释"><a href="#拓展-术语解释" class="headerlink" title="拓展-术语解释"></a>拓展-术语解释</h2><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image036.gif"></p><h2 id="拓展-基本数据类型和引用数据类型"><a href="#拓展-基本数据类型和引用数据类型" class="headerlink" title="拓展- 基本数据类型和引用数据类型"></a>拓展- 基本数据类型和引用数据类型</h2><p>堆栈空间分配区别：</p><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中</p><p>的栈；</p><p>简单数据类型存放到栈里面</p><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p>引用数据类型存放到堆里面</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image038.gif"></p><h2 id="简单类型的内存分配"><a href="#简单类型的内存分配" class="headerlink" title="简单类型的内存分配"></a>简单类型的内存分配</h2><p>l 值类型（简单数据类型）： string ，number，boolean，undefined，null</p><p>l 值类型变量的数据直接存放在变量（栈空间）中</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image040.gif"></p><p>l 引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date 等</p><p>l 引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image042.gif"></p><p><strong>思考：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image044.gif"></p><p>obj2.age &#x3D; 20,因为对象为引用类型，引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中, let obj2 &#x3D; obj1 使得两个变量在栈中的地址相同，所对应的堆中的对象为一个对象，因此改变一次对象的值，两个变量都会变。</p><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number 和 Boolean。</p><p>基本包装类型就是<strong>把简单数据类型包装成为复杂数据类型</strong>，这样基本数据类型就有了属性和方法。</p><p>&#x2F;&#x2F; 下面代码有什么问题？</p><p>var str &#x3D; ‘andy’;</p><p>console.log(str.length);</p><p>按道理<strong>基本数据类型是没有属性和方法的</strong>，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><p>&#x2F;&#x2F; 1. 生成临时变量，把简单类型包装为复杂数据类型</p><p>var temp &#x3D; new String(‘andy’);</p><p>&#x2F;&#x2F; 2. 赋值给我们声明的字符变量</p><p>str &#x3D; temp;</p><p>&#x2F;&#x2F; 3. 销毁临时变量</p><p>temp &#x3D; null;</p><h4 id="1-6-2-字符串的不可变"><a href="#1-6-2-字符串的不可变" class="headerlink" title="1.6.2 字符串的不可变"></a>1.6.2 字符串的不可变</h4><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</p><p>由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><script>​ // 字符串的不可变性​ var str = 'andy';​ console.log(str);​ str = 'red';​ console.log(str);​ // 因为我们字符串的不可变所以不要大量的拼接字符串​ var str = '';​ for (var i = 1; i <= 1000000000; i++) {​ str += i;​ }​ console.log(str);​ </script><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image046.gif"></p><p>在上述方法中，charCodeAt 方法返回的是指定位置上字符对应的 ASCII 码</p><p><strong>案例：</strong></p><p>判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><p>\1. 核心算法：利用 charAt(） 遍历这个字符串</p><p>\2. 把每个字符都存储给对象， 如果对象没有该属性，就为 1，如果存在了就 +1</p><p>\3. 遍历对象，得到最大值和该字符</p><p>注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p><p>var str &#x3D; ‘abcoefoxyozzopp’;</p><p>var o &#x3D; {};</p><p>for (var i &#x3D; 0; i &lt; str.length; i++) {</p><p>var chars &#x3D; str.charAt(i); &#x2F;&#x2F; chars 是 字符串的每一个字符</p><p>if (o[chars]) { &#x2F;&#x2F; o[chars] 得到的是属性值</p><p>​ o[chars]++;</p><p>} else {</p><p>​ o[chars] &#x3D; 1;</p><p>}</p><p>}</p><p>console.log(o);</p><p>&#x2F;&#x2F; 2. 遍历对象</p><p>var max &#x3D; 0;</p><p>var ch &#x3D; ‘’;</p><p>for (var k in o) {</p><p>&#x2F;&#x2F; k 得到是 属性名</p><p>&#x2F;&#x2F; o[k] 得到的是属性值</p><p>if (o[k] &gt; max) {</p><p>​ max &#x3D; o[k];</p><p>​ ch &#x3D; k;</p><p>}</p><p>}</p><p>console.log(max);</p><p>console.log(‘最多的字符是’ + ch);</p><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：concat(),substr(),slice(),substring()</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day05/clip_image048.gif"></p><p>substr() 和 substring() 分别可以省略 length 和 end，只有有开始位置，默认到结束位置</p><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</p><p>字符串.replace(被替换的字符串， 要替换为的字符串)；</p><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>其使用格式如下：</p><p>字符串.split(“分割字符”)</p><h4 id="toFixed-方法"><a href="#toFixed-方法" class="headerlink" title="toFixed()方法"></a>toFixed()方法</h4><p>toFixed()方法用于保留数字两位小数</p><p>字符串.toFixed(数字)</p><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>\1. const 一旦声明变量，就必须立即初始化，不能留到以后赋值</p><p>const foo;</p><p>&#x2F;&#x2F; SyntaxError: Missing initializer in const declaration</p><p>&#x2F;&#x2F; 对于 const 来说，只声明不赋值，就会报错</p><p>\2. 常量是块级范围的，非常类似用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let">let</a> 语句定义的变量。</p><p>l 但简单类型的数据常量的值是无法（通过重新赋值）改变的，也不能被重新声明。</p><p>l 复杂类型（引用类型），指针指向的地址不能更改，内部数据可以更改。</p><p>l <strong>注意：</strong>默认使用 const 声明变量，只有当确实需要改变变量的值的时候才使用 let。</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p>function fn(a, b, …rest){</p><p>console.log(rest) &#x2F;&#x2F; 获得除开’你好’,’Hello’两个元素之外的其他元素</p><p>}</p><p>fn(‘你好’, ‘Hello’, ‘JavaScript’, ‘Go’)</p><p>&#x2F;&#x2F; rest 是一个货真价实的数组, 用来接收我 们传递过来的实参</p><p>function bar(…rest){</p><p>console.log(rest)</p><p>}</p><h2 id="x3D-gt"><a href="#x3D-gt" class="headerlink" title="() &#x3D;&gt; {}"></a>() &#x3D;&gt; {}</h2>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Day04</title>
    <link href="/2022/05/05/JS%E5%9F%BA%E7%A1%80/day04/"/>
    <url>/2022/05/05/JS%E5%9F%BA%E7%A1%80/day04/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="为什么需要函数"><a href="#为什么需要函数" class="headerlink" title="为什么需要函数"></a>为什么需要函数</h2><p>function，是被设计为执行特定任务的代码块</p><p><strong>说明：</strong></p><p>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势</p><p>是有利于实现代码复用，提高开发效率。</p><h2 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h2><p>两个相同的函数后面的会覆盖前面的函数</p><h4 id="函数的声明语法："><a href="#函数的声明语法：" class="headerlink" title="函数的声明语法："></a>函数的声明语法：</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image002.gif"></p><h4 id="函数名命名规范"><a href="#函数名命名规范" class="headerlink" title="函数名命名规范"></a>函数名命名规范</h4><p>n 和变量命名基本一致</p><p>n 尽量小驼峰式命名法</p><p>n 前缀应该为动词</p><p>n 命名建议：常用动词约定</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image004.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image006.gif"></p><h4 id="函数的调用语法"><a href="#函数的调用语法" class="headerlink" title="函数的调用语法"></a>函数的调用语法</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image008.gif"></p><p><strong>注意：</strong>声明（定义）的函数必须调用才会真正被执行，使用 () 调用函数</p><p>l 我们曾经使用的 alert() , parseInt() 这种名字后面跟小括号的本质都是函数的调用</p><h4 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h4><p>函数体是函数的构成部分，它负责将相同或相似代码“包裹”起来，直到函数调用时函数体内的代码才</p><p>会被执行。函数的功能代码都要写在函数体当中。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image010.gif"></p><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><h4 id="为什么要有参数的函数"><a href="#为什么要有参数的函数" class="headerlink" title="为什么要有参数的函数"></a>为什么要有参数的函数</h4><p>这样的函数只能求 10 + 20， 这个函数功能局限非常大</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image012.gif"></p><p><strong>解决办法：</strong>把要计算的数字传到函数内</p><p>l 若函数完成功能需要调用者传入数据，那么就需要用有参数的函数</p><p>l 这样可以极大提高函数的灵活性</p><h4 id="有参数的函数声明和调用"><a href="#有参数的函数声明和调用" class="headerlink" title="有参数的函数声明和调用"></a>有参数的函数声明和调用</h4><h5 id="声明语法："><a href="#声明语法：" class="headerlink" title="声明语法："></a>声明语法：</h5><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image014.gif"></p><p>参数列表</p><p>l 传入数据列表</p><p>l 声明这个函数需要传入几个数据</p><p>l 多个数据用逗号隔开</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image016.gif"></p><h5 id="调用语法："><a href="#调用语法：" class="headerlink" title="调用语法："></a>调用语法：</h5><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image018.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image020.gif"></p><p><strong>额外：</strong></p><p><strong>参数列表能填写数组形式，例：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image022.gif"></p><p>l 形参可直接写出数组名，不用带括号，直接起声明该数组变量的作用。</p><p>l 实参直接写出数组，代表一个实参。</p><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image024.gif"></p><p>l 形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p><p>l 实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）,调用的时候，没有传递实参，则默认为 0.</p><p>l 形参可以理解为是在这个函数内声明的变量（比如 num1 &#x3D; 10）实参可以理解为是给这个变量赋值</p><p>l 开发中尽量保持形参和实参个数一致，如果实参个数少于形参 返回的结果 NaN,如果实参个数大于形参，多余的会被忽略。</p><p>合理利用逻辑中断</p><p>l 形参如果不被赋值，就是 undefined</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image026.gif"></p><p><strong>额外：</strong>上面的写法可能有些繁琐，可以如下写</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image028.gif"></p><p>l x 和 y 可以看做是 函数内部的局部变量</p><p>n 调用的时候会有个内部判断是否有参数传递过来</p><p>n 没有参数 则 执行 x &#x3D; 0</p><p>n 有参数，则执行 实参赋值</p><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><h4 id="为什么要让函数有返回值"><a href="#为什么要让函数有返回值" class="headerlink" title="为什么要让函数有返回值"></a>为什么要让函数有返回值</h4><p>函数是被设计为执行特定任务的代码块，执行结束后把任务的结果给我们。</p><p>l <strong>缺点：</strong>把计算后的结果处理方式写死了，内部处理了</p><p>l <strong>解决：</strong>把处理结果返回给调用者</p><p>l <strong>有返回值函数的概念：</strong></p><p>n 当调用某个函数，这个函数会返回一个结果出来</p><p>n 这就是有返回值的函数</p><p>l 其实我们前面已经接触了很多的函数具备返回值：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image030.gif"></p><p>l 只是这些函数是 JS 底层内置的.我们直接就可以使用</p><p>l 当然有些函数，则没有返回值</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image032.gif"></p><p>l 所以要根据需求，来设定需不需要返回值</p><h4 id="用-return-返回数据"><a href="#用-return-返回数据" class="headerlink" title="用 return 返回数据"></a>用 return 返回数据</h4><p>语法：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image034.gif"></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image036.gif"></p><p><strong>用法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image038.gif"></p><p><strong>注意：</strong></p><p>l 在函数体中使用 return 关键字能将内部的执行结果交给函数外部使用</p><p>l 函数内部只能出现 1 次 return，并且 return 后面代码不会再被执行，所以 return 后面的数据不要换行写</p><p>l return 会立即结束当前函数</p><p>l 函数可以没有 return，这种情况函数默认返回值为 undefined</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image040.gif"></p><p>l 在现实开发中，考虑到函数名可能会很长，通常会将函数赋值给一个变量。</p><h5 id="用-return-返回多个数据"><a href="#用-return-返回多个数据" class="headerlink" title="用 return 返回多个数据"></a>用 return 返回多个数据</h5><p>l return 可以写多个，但是条件是只能执行 1 个</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image042.gif"></p><p>l return 只能返回一个值， 要想返回多个值需要加中括号 return [jia, jian] 使其变为一个数组 , 不加括号的话默认返回最后一个值</p><p>l 取值时利用数组下标进行取值</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image044.gif"></p><p>l <strong>案例：判断两个值的大小时，可以用三元运算符返回值。</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image046.gif"></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h4 id="作用域概述"><a href="#作用域概述" class="headerlink" title="作用域概述"></a>作用域概述</h4><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这</p><p>个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image048.gif"></p><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>let 语法的不同作用域</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image050.gif"></p><p>l 变量有一个坑， 特殊情况：</p><p>如果函数内部或者块级作用域内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p><p>但是有一种情况，函数内部的形参可以看做是局部变量。</p><h4 id="变量访问原则-作用域链"><a href="#变量访问原则-作用域链" class="headerlink" title="变量访问原则-作用域链"></a>变量访问原则-作用域链</h4><p>l 只要是代码，就至少有一个作用域</p><p>l 写在函数内部的局部作用域</p><p>l 如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</p><p>l 根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</p><p>l 作用域链：采取就近原则的方式来查找变量最终的值</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p><strong>函数可以分为：</strong></p><p>l <strong>具名函数</strong></p><p>n 声明：function fn（）{}</p><p>n 调用： fn（）</p><p>l <strong>匿名函数</strong></p><p>n function() {}</p><h4 id="匿名函数的写法："><a href="#匿名函数的写法：" class="headerlink" title="匿名函数的写法："></a>匿名函数的写法：</h4><p><strong>语法：</strong></p><p><strong>函数表达式：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image052.gif"></p><p><strong>调用：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image054.gif"></p><p><strong>注意:</strong> 其中函数的形参和实参使用跟具名函数一致。</p><p><strong>使用场景:</strong></p><p>后期 web API 会使用：</p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image056.gif"></p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>场景介绍: 避免全局变量之间的污染</p><p>外面用小括号包裹</p><p><strong>语法：</strong></p><p><img src="/img/JS%E5%9F%BA%E7%A1%80/day04/clip_image058.gif"></p><p><strong>注意：</strong></p><p>l 多个立即执行函数要用 ; 隔开，要不然会报错，用其他语法隔开也不行。</p><p>l 第一个小括号放的 形参 第二个小括号放的是实参</p><p>l 就算仍旧在里面添加函数名，仍然能立即执行函数</p><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><h3 id="预解析的相关概念"><a href="#预解析的相关概念" class="headerlink" title="预解析的相关概念"></a>预解析的相关概念</h3><p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行.</p><p>l 预解析：在当前作用域下, JS 代码执行之前，<strong>浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义</strong>。</p><p>l 代码执行： 从上到下执行 JS 语句。</p><p><strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p><h3 id="变量预解析"><a href="#变量预解析" class="headerlink" title="变量预解析"></a>变量预解析</h3><p>预解析也叫做变量、函数提升。</p><p>变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</p><p>console.log(num); &#x2F;&#x2F; 结果是多少？ 结果：undefined</p><p>var num &#x3D; 10; &#x2F;&#x2F; ？</p><p>注意：<strong>变量提升只提升声明，不提升赋值</strong></p><h3 id="函数预解析"><a href="#函数预解析" class="headerlink" title="函数预解析"></a>函数预解析</h3><p>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p><p>fn();</p><p>function fn() {</p><p>​ console.log(‘打印’);</p><p>}</p><p>&#x2F;&#x2F; 结果：控制台打印字符串 — ”打印“</p><p>注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！</p><h3 id="函数表达式声明函数问题"><a href="#函数表达式声明函数问题" class="headerlink" title="函数表达式声明函数问题"></a>函数表达式声明函数问题</h3><p>函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用：</p><p>fn();</p><p>var fn &#x3D; function() {</p><p>​ console.log(‘想不到吧’);</p><p>} &#x2F;&#x2F; 结果：报错提示 ”fn is not a function”</p><p>解释：该段代码执行之前，会做变量声明提升，fn 在提升之后的值是 undefined；而 fn 调用是在 fn 被赋值为函数体之前，此时 fn 的值是 undefined，所以无法正确调用</p><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><h2 id="转换时间案例"><a href="#转换时间案例" class="headerlink" title="转换时间案例"></a>转换时间案例</h2><p>需求： 用户输入秒数，可以自动转换为时分秒</p><p>分析：</p><p>①： 用户输入总秒数</p><p>②：计算时分秒（封装函数） 里面包含数字补 0</p><p>③：打印输出</p><p>计算公式：计算时分秒</p><p>小时： h &#x3D; parseInt(总秒数 &#x2F; 60 &#x2F; 60 % 24)</p><p>分钟： m &#x3D; parseInt(总秒数 &#x2F; 60 % 60 )</p><p>秒数: s &#x3D; parseInt(总秒数 % 60)</p>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>手写实现一个new</title>
    <link href="/2022/05/05/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/05/05/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="手写实现一个-new"><a href="#手写实现一个-new" class="headerlink" title="手写实现一个 new"></a>手写实现一个 new</h2><ol><li>创建一个空的简单 JavaScript 对象（即{}）；</li><li>为步骤 1 新创建的对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象 ；</li><li>将步骤 1 新创建的对象作为 this 的上下文 ；</li><li>如果该函数没有返回对象，则返回 this。</li></ol><blockquote><p>new 关键词执行后总会返回一个对象, 要么是实例对象, 要么是 return 语句指定的对象.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_new</span>(<span class="hljs-params">fn,...args</span>)&#123;<br>    <span class="hljs-comment">// let obj = new Object()</span><br>    <span class="hljs-comment">// obj.__proto__ = fn.prototype</span><br>    <span class="hljs-comment">// 基于fn构造函数原型创建一个新对象</span><br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>    <span class="hljs-comment">// 执行构造函数，并获取fn执行的结果</span><br>    <span class="hljs-keyword">let</span> res = fn.<span class="hljs-title function_">call</span>(obj,...args)<br>    <span class="hljs-comment">// 如果执行结果有返回值并且是一个对象，返回执行结果，否则，返回新创建的对象</span><br>    <span class="hljs-keyword">let</span> isObject = <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">let</span> isFunction = <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;function&#x27;</span><br>    <span class="hljs-keyword">return</span> isObject || isFunction  ? res : obj<br>&#125;<br><br><span class="hljs-comment">// 更好理解</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">fn, ...args</span>) &#123;<br>  <span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>  <span class="hljs-keyword">let</span> res = fn.<span class="hljs-title function_">call</span>(obj,...args)<br><br>  <span class="hljs-keyword">if</span> (res &amp;&amp; (<span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;function&#x27;</span>)) retrun res<br>  <span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><span class="hljs-comment">// 创建一个对象，以o为新创建对象的原型对象</span><br></code></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul><li>Instanceof: 用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li><li>通俗一点就是： 判断 new 出的实例对象是否是当前构造函数生成的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">my_instanceof</span>(<span class="hljs-params">left, right</span>) &#123;<br>  <span class="hljs-comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> left !== <span class="hljs-string">&#x27;object&#x27;</span> || left === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment">// getProtypeOf是Object对象自带的API</span><br>  <span class="hljs-comment">// 返回指定对象的原型（内部[[Prototype]]属性的值）隐式原型</span><br>  <span class="hljs-keyword">let</span> proto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(left)<br>  <span class="hljs-keyword">let</span> prototype = right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">//循环往下寻找，直到找到相同的原型对象</span><br>    <span class="hljs-keyword">if</span> (proto === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> (proto === prototype) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//找到相同原型对象，返回true</span><br>    proto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeof</span>(proto)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 更好理解版本</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">my_instanceof</span>(<span class="hljs-params">left, right</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> left !== <span class="hljs-string">&#x27;object&#x27;</span> || left === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-keyword">let</span> proto = left.<span class="hljs-property">__proto__</span><br>  <span class="hljs-keyword">let</span> prototype = right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// 右边的原型</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (proto === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> (proto === prototype) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    proto = proto.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// 向上查找，直到proto为null</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🔥-手写-Promise-all"><a href="#🔥-手写-Promise-all" class="headerlink" title="🔥 手写 Promise.all"></a>🔥 手写 Promise.all</h2><ol><li>参数可迭代</li><li>返回值是 promise</li><li>如果全部成功，状态变为 resolve</li><li>但凡有一个失败，状态变为 reject</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">PromiseAll</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;arr&#125;</span> is not iterable`</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> result = [] <span class="hljs-comment">// 存放结果</span><br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span> <span class="hljs-comment">// 进入fullfilled的promise个数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-comment">// 这里默认把所有入参都包装成promise返回了</span><br>      <span class="hljs-comment">// 因为如果是普通值,在Promise内部实现 2.3.4时, 有返回值的操作</span><br>      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(arr[i])<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// counter++;</span><br>          result[i] = value<br>          <span class="hljs-keyword">if</span> (++count === arr.<span class="hljs-property">length</span>) <span class="hljs-title function_">resolve</span>(result) <span class="hljs-comment">//判断已经完成</span><br>          <span class="hljs-comment">// 只要有一个被rejected时, 就reject</span><br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-title function_">reject</span>(e))<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手写-call-apply-bind"><a href="#手写-call-apply-bind" class="headerlink" title="手写 call, apply, bind"></a>手写 call, apply, bind</h2><ul><li><a href="https://juejin.cn/post/6844904042452221960#heading-9">https://juejin.cn/post/6844904042452221960#heading-9</a> 可参考</li><li><a href="https://juejin.cn/post/6844903809206976520#heading-10">https://juejin.cn/post/6844903809206976520#heading-10</a> 可参考</li><li>共同点：都是改变 this 指向</li><li>区别<ul><li>call 和 apply 是立即执行的，而 bind 是返回一个新的函数，需要手动去调用</li><li>call 可以传递多个参数，第一个参数和 apply’一样，是用来替换的对象，后边是参数列表</li><li>apply 最多智能有两个参数 （新 this 对象，数组 argsArray）-&gt; fun.apply(thisArg, [argsArray])</li></ul></li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><ul><li>改变 this 指向</li><li>函数立即执行，返回执行结果</li><li><a href="https://juejin.cn/post/6844903906279964686#heading-19">https://juejin.cn/post/6844903906279964686#heading-19</a> 可参考</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_call</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 判断上下文对象</span><br>    context = context ？<span class="hljs-title class_">Object</span>(context) : <span class="hljs-variable language_">window</span><br>    <span class="hljs-comment">// 创造唯一key值，作为我们构造的context内部方法名</span><br>    <span class="hljs-keyword">let</span> fn = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;thisFn&#x27;</span>)<br>     <span class="hljs-comment">// 1. 将fn作为属性添加到context上</span><br>    context[fn] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 隐式绑定，改变构造函数的调用者间接改变 this 指向</span><br>    <span class="hljs-comment">// 2. 将挂载以后的方法调用</span><br>    <span class="hljs-keyword">let</span> res = context[fn](...args)  <span class="hljs-comment">// 这里..args将args数组，变为参数列表，数组的扩展运算符</span><br>    <span class="hljs-comment">// 3. 删除新添加的对象属性</span><br>    <span class="hljs-keyword">delete</span> context[fn]<br>    <span class="hljs-comment">// 4. 返回调用结果</span><br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// func.apply(thisArg, [argsArray])</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">thisArg, args</span>) &#123;<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;fn&#x27;</span>) <span class="hljs-comment">// 创建个独一无二的方法名</span><br>  thisArg[fn] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 方法变换执行对象</span><br>  <span class="hljs-keyword">let</span> res = thisArg[fn](...args)<br>  <span class="hljs-keyword">delete</span> thisArg[fn] <span class="hljs-comment">// 删除对象属性</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul><li>改变 this 指向</li><li>返回一个新函数</li><li>新函数可能被当做构造函数调用，函数可能有返回值</li><li>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效</li><li>传递参数并柯里化</li><li><a href="https://www.jianshu.com/p/b540e1e17f54">https://www.jianshu.com/p/b540e1e17f54</a> 参考</li><li><a href="https://github.com/mqyqingfeng/Blog/issues/12">https://github.com/mqyqingfeng/Blog/issues/12</a> 冴羽</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// // ES2015 arguments是一个对象，类数组；</span><br><span class="hljs-comment">// const args = Array.from(arguments);</span><br><span class="hljs-comment">// const args = [...arguments];</span><br><span class="hljs-comment">// let new_array = old_array.concat(value1,value2,...)</span><br><span class="hljs-comment">// concat后面参数可以是数组，也可以是参数本身</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;this is not a function&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 第一个参数是this，截取掉</span><br>    <span class="hljs-keyword">const</span> fNOP = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><br>    <span class="hljs-keyword">const</span> fBound =  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 返回一个绑定了this指向的方法，闭包</span><br>        <span class="hljs-keyword">const</span> newArgs = args.<span class="hljs-title function_">concat</span>(...<span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-comment">// _self.call(context, ...args.concat(...arguments)) 参数为数组，用apply简单</span><br>      <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> instance <span class="hljs-keyword">of</span> fNOP ? <span class="hljs-variable language_">this</span> : context, newArgs)<br>    &#125;<br>    <span class="hljs-comment">// 1.方法1 原型式继承</span><br>    fNOP.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    fBound.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fNOP</span>(); <span class="hljs-comment">//绑定原型 原型式继承</span><br>    <span class="hljs-comment">// 2. 方法2: fBound.prototype = Object.create(this.prototype)</span><br><br>    <span class="hljs-keyword">return</span> fBound;<br>&#125;<br><br><span class="hljs-comment">// 去注释 double</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind2</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-comment">// 1. 判断调用bind的是否是函数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;this is not a function&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 2. 保存当前环境上下文，取截取this后的传入参数</span><br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">const</span> fNOP = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><br>    <span class="hljs-keyword">const</span> fBound = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> newArgs = args.<span class="hljs-title function_">concat</span>(...<span class="hljs-variable language_">arguments</span>)<br>      <span class="hljs-comment">// 1.当作为构造函数 new操作的时候，this指向实例，将绑定函数的this指向该实例，可以让实例获得来自绑定函数的值</span><br>      <span class="hljs-comment">// 2.当作为普通函数时，将绑定函数的this指向context</span><br>      <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> fNOP ? <span class="hljs-variable language_">this</span> : context, newArgs)<br>    &#125;<br><br>    <span class="hljs-comment">// 3.原型式继承</span><br>    fNOP.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>    fBound.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fNOP</span>()<br>  <span class="hljs-comment">// 复制原函数的prototype给fBound， 一些情况下函数没有prototype，如箭头函数</span><br>  <span class="hljs-comment">// fBound.prototype.__proto__ = (fNOP.prototype=this.prototype)</span><br><br>    <span class="hljs-keyword">return</span> fBound<br>&#125;<br><br><span class="hljs-comment">//   fBound.prototype = this.prototype;</span><br><span class="hljs-comment">// 直接修改 fBound.prototype 的时候，也会直接修改绑定函数的 prototype</span><br></code></pre></td></tr></table></figure><h4 id="bind2"><a href="#bind2" class="headerlink" title="bind2"></a>bind2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://jsgodroad.com/interview/js/#%E6%89%8B%E5%86%99%E9%A2%98</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-comment">// 返回一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> F) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">_this</span>(...args, ...<span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">apply</span>(context, args.<span class="hljs-title function_">concat</span>(...<span class="hljs-variable language_">arguments</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔥bind3-new-2021-12-13"><a href="#🔥bind3-new-2021-12-13" class="headerlink" title="🔥bind3 new 2021-12-13"></a>🔥bind3 new 2021-12-13</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">objThis, ...args</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;what is trying to be bound is not callable&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 保存源函数,以及参数</span><br>  <span class="hljs-keyword">const</span> fBound = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> newArgs = args.<span class="hljs-title function_">concat</span>(...<span class="hljs-variable language_">arguments</span>)<br>    <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> fBound ? <span class="hljs-variable language_">this</span> : objThis, newArgs)<br>  &#125;<br>  <span class="hljs-comment">// 修复函数没有prototype的情况 // 维护原型关系</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>    fBound.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> fBound<br>&#125;<br><span class="hljs-comment">// https://juejin.cn/post/6844903906279964686#heading-14</span><br></code></pre></td></tr></table></figure><h4 id="bind-polyfill-core-js"><a href="#bind-polyfill-core-js" class="headerlink" title="bind-polyfill-core-js"></a>bind-polyfill-core-js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  Yes, it does work with `new (funcA.bind(thisArg, args))`</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span>)<br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">ArrayPrototypeSlice</span> = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span><br>    <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">otherThis</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-comment">// closest thing possible to the ECMAScript 5</span><br>        <span class="hljs-comment">// internal IsCallable function</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<br>          <span class="hljs-string">&#x27;Function.prototype.bind - what is trying to be bound is not callable&#x27;</span><br>        )<br>      &#125;<br><br>      <span class="hljs-keyword">var</span> baseArgs = <span class="hljs-title class_">ArrayPrototypeSlice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>),<br>        baseArgsLength = baseArgs.<span class="hljs-property">length</span>,<br>        fToBind = <span class="hljs-variable language_">this</span>,<br>        fNOP = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;,<br>        fBound = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          baseArgs.<span class="hljs-property">length</span> = baseArgsLength <span class="hljs-comment">// reset to default base arguments</span><br>          baseArgs.<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(baseArgs, <span class="hljs-variable language_">arguments</span>)<br>          <span class="hljs-keyword">return</span> fToBind.<span class="hljs-title function_">apply</span>(<br>            <span class="hljs-comment">// 是否被new操作符调用，是的话就用新创建的this替换bind的this</span><br>            fNOP.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(<span class="hljs-variable language_">this</span>) ? <span class="hljs-variable language_">this</span> : otherThis,<br>            baseArgs<br>          )<br>        &#125;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>        <span class="hljs-comment">// Function.prototype doesn&#x27;t have a prototype property</span><br>        fNOP.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>      &#125;<br>      <span class="hljs-comment">// 防止new了函数后改变原型导致原函数的原型被修改</span><br>      fBound.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fNOP</span>()<br><br>      <span class="hljs-keyword">return</span> fBound<br>    &#125;<br>  &#125;)()<br></code></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h4 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h4><ul><li>事件响应函数在一段时间后才执行,如果这段时间内再次调用,则重新计算。 在一定的时间间隔内,将多次触发变成一次触发</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ol><li>限制鼠标连续点击（按钮提交等）</li><li>Scroll 事件滚动防抖</li><li>搜索框输入查询</li><li>浏览器窗口缩放，resize 事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://www.30secondsofcode.org/js/s/debounce 目前看见最简写法，best！</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">fn, ms = <span class="hljs-number">0</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timeoutId<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-comment">// function(...args) rest参数 ，将args转为数组</span><br>    <span class="hljs-comment">// 对比数组的扩展运算法 fn.call(obj,...args) 含义不一样, 将args转为参数列表</span><br>    <span class="hljs-built_in">clearTimeout</span>(timerId) <span class="hljs-comment">// 每次点击的时候清除上一个定时器，重新计时</span><br>    timeoutId = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args), ms)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h4><ul><li>持续的触发事件,每隔一段时间, 只执行一次 ，减少一段时间的触发频率</li></ul><h5 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">throttle</span> = (<span class="hljs-params">fn, wait</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> pre = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// Date.now || + new Date() || new Date().getTime() || new Date().valueOf()</span><br>      <span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>      <span class="hljs-keyword">if</span> (now - pre &gt; = wait) &#123;<br>        <span class="hljs-comment">// apply第二个参数可以是数组，也可以是类数组对象</span><br>        <span class="hljs-comment">// 所以写arguments没有问题！</span><br>        fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>)<br>        pre = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() <span class="hljs-comment">// 将当前时间记录， 作为下一个计时起点</span><br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">throttle</span> = (<span class="hljs-params">fn, wait</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timerId<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!timerId) &#123;<br>      <span class="hljs-comment">// 这里箭头函数，this本身指向上层</span><br>      timerId = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        timerId = <span class="hljs-literal">null</span><br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//冴羽 https://github.com/mqyqingfeng/Blog/issues/26</span><br></code></pre></td></tr></table></figure><h2 id="deepClone-深拷贝"><a href="#deepClone-深拷贝" class="headerlink" title="deepClone 深拷贝 !!!"></a>deepClone 深拷贝 !!!</h2><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ol><li>Object.assign()</li><li><code>...</code>扩展运算符 <strong><code>let cloneObj = &#123;...obj&#125;</code> <code>let newArr = [...arr]</code></strong></li><li>数组的 Slice(), concat()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">shallowClone</span> = (<span class="hljs-params">obj</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj)<br></code></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="乞丐版"><a href="#乞丐版" class="headerlink" title="乞丐版"></a>乞丐版</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> newObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj))<br></code></pre></td></tr></table></figure><ol><li>拷贝对象的值中如果有<code>函数</code>、<code>undefined</code>、<code>Symbol</code>，JSON.stringify 序列化后的字符串中，这个键值对丢失</li><li>拷贝 Date 引用类型会变成字符串</li><li>拷贝 RegExp 会变成空对象 <code>&#123;&#125;</code></li><li>对象中含有 <code>NaN</code>、<code>Infinity</code> 会变成 <code>null</code></li><li>无法拷贝对象的原型链</li><li>无法拷贝不可枚举的属性 如 Symbol</li><li>无法拷贝对象的循环引用 ， 即对象成环 <code>obj[key] = obj</code></li></ol><h5 id="🔥-优化版"><a href="#🔥-优化版" class="headerlink" title="🔥 优化版"></a>🔥 优化版</h5><ul><li><p>考虑 Date、RegExp 类型， 直接生成一个新的实例返回</p></li><li><p>考虑数组 <code>let target = Array.isArray(obj)? [] : &#123;&#125;</code></p></li><li><p>考虑循环引用 利用 WeakMap 作为 hash 表， 检测到对象已存在于哈希表中，取出该值返回即可</p></li><li><p>针对不可枚举属性以及 Symbol 类型，使用 Reflect.ownKeys()</p></li><li><p>函数部分太复杂，函数的原型，多层柯里化等</p></li><li><p>针对 Map, Set, Error 等，Object.getOwnPropertyDescriptors(obj) 也不考虑</p></li><li><p>递归爆栈问题，改用循环解决，广度优先</p></li><li><p><a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道）</a></p></li><li><p><a href="https://juejin.cn/post/6844903929705136141#heading-4">如何写出一个惊艳面试官的深拷贝?</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">RangeError</span>: <span class="hljs-title class_">Maximum</span> call stack size exceeded<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 检测对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isObject</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="hljs-literal">null</span> <span class="hljs-comment">// !!obj</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">deepClone</span> = (<span class="hljs-params">obj, hash = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 值类型 直接返回</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isObject</span>(obj)) <span class="hljs-keyword">return</span> obj<br>  <span class="hljs-comment">// Date, RegExp  constructor容易被修改丢失，被认为不安全，不推荐作为判断</span><br>  <span class="hljs-comment">// instanceof好一些</span><br>  <span class="hljs-comment">//  if (obj.constructor === Date) return new Date(obj)</span><br>  <span class="hljs-comment">//  if (obj.constructor === RegExp) return new RegExp(obj)</span><br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj)<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj)<br>  <span class="hljs-comment">// 解决循环引用，查哈希表</span><br>  <span class="hljs-keyword">if</span> (hash.<span class="hljs-title function_">has</span>(obj)) <span class="hljs-keyword">return</span> hash.<span class="hljs-title function_">get</span>(obj)<br>  <span class="hljs-comment">//     let allDesc = Object.getOwnPropertyDescriptors(obj)</span><br>  <span class="hljs-comment">//     let target = Object.create(Object.getPrototypeOf(obj),allDesc)</span><br>  <span class="hljs-keyword">let</span> target = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125; <span class="hljs-comment">// 考虑数组</span><br>  hash.<span class="hljs-title function_">set</span>(obj, target)<br><br>  <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(obj[key])) &#123;<br>      target[key] = <span class="hljs-title function_">deepClone</span>(obj[key], hash)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      target[key] = obj[key]<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> target<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><a href="https://yanhaijing.com/javascript/2018/10/10/clone-deep/">深拷贝的终极探索</a></li></ol><h2 id="实现-5-add-3-minus-2-功能"><a href="#实现-5-add-3-minus-2-功能" class="headerlink" title="实现 (5).add(3).minus(2) 功能"></a>实现 (5).add(3).minus(2) 功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Number</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> number !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入数字～&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">valueOf</span>() + n<br>&#125;<br><span class="hljs-title class_">Number</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">minus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> number !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入数字～&#x27;</span>)<br>  &#125;<br>  <span class="hljs-comment">// return this - n</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">valueOf</span>() - n<br>&#125;<br><span class="hljs-comment">// (5).add(3).minus(2)</span><br></code></pre></td></tr></table></figure><h2 id="如何求数组最大值和最小值"><a href="#如何求数组最大值和最小值" class="headerlink" title="如何求数组最大值和最小值"></a>如何求数组最大值和最小值</h2><ol><li>循环后 Math.max</li><li>reduce</li><li>sort 排序后取最后</li><li>ES6 … + Math.max</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. Math.max</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>]<br><br><span class="hljs-keyword">var</span> result = arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>  result = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(result, arr[i])<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br><span class="hljs-comment">// 2. reduce</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">max</span>(<span class="hljs-params">prev, next</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(prev, next)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">reduce</span>(max))<br><span class="hljs-comment">// 3. sort</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>]<br><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a - b<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>])<br><span class="hljs-comment">// 4. ES6 ...</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, arr))<br></code></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul><li>双重 for 循环</li><li>new Set</li><li>indexOf</li><li>array.filter + indexOf</li><li>sort 排序 + 相邻元素对比</li><li>Object 键值对 obj.hasOwnProperty</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 0. 双重for循环</span><br><br><span class="hljs-comment">// 1. Set集合，不能有重复值</span><br><span class="hljs-keyword">const</span> newArr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr))<br><span class="hljs-comment">// 简化</span><br><span class="hljs-keyword">const</span> newArr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<br><br><span class="hljs-comment">// 2. indexOf</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetArr</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> res = []<br>  arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-title function_">indexOf</span>(item) === -<span class="hljs-number">1</span>) &#123;<br>      res.<span class="hljs-title function_">push</span>(item)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-comment">// indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</span><br><span class="hljs-comment">// filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</span><br><br><span class="hljs-comment">// 3. array.filter + indexOf</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">unique</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> res = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 如果第一次出现，相等</span><br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">indexOf</span>(item) === index<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-comment">// 4. sort排序后相邻元素对比</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  arr = arr.<span class="hljs-title function_">sort</span>()<br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-comment">// i从1开始算 arr[i-1]</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] !== arr[i - <span class="hljs-number">1</span>]) &#123;<br>      res.<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-comment">// 5.obj.hasOwnProperty</span><br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">resetArr</span>(arr)) <span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">// https://github.com/mqyqingfeng/Blog/issues/27</span><br></code></pre></td></tr></table></figure><h2 id="数组扁平化-flatten"><a href="#数组扁平化-flatten" class="headerlink" title="数组扁平化 flatten"></a>数组扁平化 flatten</h2><p><a href="https://juejin.cn/post/6844904025993773063">面试官连环追问：数组拍平（扁平化） flat 方法实现</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(flatten(arr)) <span class="hljs-comment">// [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h3 id="🔥-循环递归"><a href="#🔥-循环递归" class="headerlink" title="🔥 循环递归"></a>🔥 循环递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法 1</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i])) &#123;<br>      result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flatten</span>(arr[i]))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result.<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr))<br></code></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>如果数组元素都是 Number, 可以使用；但不推荐这种 toString+split 方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">;[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]].<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;1,2,3,4&quot;</span><br><span class="hljs-comment">// 场景却非常有限，如果数组是 [1, &#x27;1&#x27;, 2, &#x27;2&#x27;] 此方法不适合</span><br><span class="hljs-comment">// 扁平化不改变原数据类型</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法2</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr<br>    .<span class="hljs-title function_">toString</span>()<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>      <span class="hljs-keyword">return</span> +item <span class="hljs-comment">//转为Number</span><br>    &#125;)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr))<br></code></pre></td></tr></table></figure><h3 id="🔥-用-reduce-实现-flat"><a href="#🔥-用-reduce-实现-flat" class="headerlink" title="🔥 用 reduce 实现 flat"></a>🔥 用 reduce 实现 flat</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法3</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, next</span>) &#123;<br>    <span class="hljs-keyword">return</span> prev.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(next) ? <span class="hljs-title function_">flatten</span>(next) : next)<br>  &#125;, [])<br>&#125;<br><br><span class="hljs-comment">// 简化</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">flatten</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> pre.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(cur) ? <span class="hljs-title function_">flatten</span>(cur) : cur)<br>  &#125;, [])<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr))<br><br><span class="hljs-comment">// 理解</span><br><span class="hljs-comment">// var arr = [2, [3, 4]];</span><br><span class="hljs-comment">// pre  cur</span><br><span class="hljs-comment">// []   2       0    [2]</span><br><span class="hljs-comment">// [2]  [3,4]   1    [2] wait</span><br><br><span class="hljs-comment">// []   3       0    [3]</span><br><span class="hljs-comment">// [3]  4       1    [3, 4]</span><br><br><span class="hljs-comment">// [2]  [3,4]       [2,3,4]</span><br></code></pre></td></tr></table></figure><h3 id="ES6-…"><a href="#ES6-…" class="headerlink" title="ES6 …"></a>ES6 …</h3><p>&#x3D;&#x3D;[].concat(…arr)&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([].<span class="hljs-title function_">concat</span>(...arr)) <span class="hljs-comment">// [1, 2, [3, 4]]</span><br><span class="hljs-comment">// 这时，只可以扁平一层，顺着这个方法</span><br><br><span class="hljs-comment">// 方法4</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">while</span> (arr.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item))) &#123;<br>    arr = [].<span class="hljs-title function_">concat</span>(...arr)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr))<br></code></pre></td></tr></table></figure><h2 id="🔥-柯里化-curry"><a href="#🔥-柯里化-curry" class="headerlink" title="🔥 柯里化 curry"></a>🔥 柯里化 curry</h2><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">curry</span> = (<span class="hljs-params">fn, ...args</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 当参数与fn参数相同，则直接执行函数 fn.length 形参个数</span><br>  <span class="hljs-keyword">if</span> (args.<span class="hljs-property">length</span> &gt;= fn.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(...args)<br>  <span class="hljs-comment">// 否则返回函数，合并参数，并继续自动柯里化</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">curry</span>(fn, ...args, ...args2)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数组合-compose"><a href="#函数组合-compose" class="headerlink" title="函数组合 compose"></a>函数组合 compose</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// redux中的实现 不一定准确 ，待整理</span><br><span class="hljs-comment">// https://github.com/mqyqingfeng/Blog/issues/45</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span>(<span class="hljs-params">...funcs</span>) &#123;<br>  <span class="hljs-keyword">if</span> (funcs.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> arg<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (funcs.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> funcs[<span class="hljs-number">0</span>]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> funcs.<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span><br>      <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span><br>        <span class="hljs-title function_">a</span>(<span class="hljs-title function_">b</span>(...args))<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p><a href="https://juejin.cn/post/7031322059414175774#heading-16">https://juejin.cn/post/7031322059414175774#heading-16</a></p><h2 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a>千位分隔符</h2><p><a href="https://juejin.cn/post/6844903911686406158#heading-19">https://juejin.cn/post/6844903911686406158#heading-19</a></p><h2 id="异步控制并发数"><a href="#异步控制并发数" class="headerlink" title="异步控制并发数"></a>异步控制并发数</h2><h2 id="ES5-继承（寄生组合继承）"><a href="#ES5-继承（寄生组合继承）" class="headerlink" title="ES5 继承（寄生组合继承）"></a>ES5 继承（寄生组合继承）</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></li><li><a href="https://juejin.cn/post/7000374304727089159">前端必刷手写题系列 [22]</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DAY01-可视化项目</title>
    <link href="/2022/05/05/%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2022/05/05/%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="01-项目介绍"><a href="#01-项目介绍" class="headerlink" title="01-项目介绍"></a>01-项目介绍</h3><p>​ 应对现在数据可视化的趋势，越来越多企业需要在很多场景(营销数据，生产数据，用户数据)下使用，可视化图表来展示体现数据，让数据更加直观，数据特点更加突出。我们引入 ‘立可得’ 数据可视化项目。</p><p>​ 该项目除了使用了基础的 DIV+CSS 布局，还引入了一些 C3 技术，还引入了各类图表的绘制，以及高级的地图数据可视化案例。主要功能有：饼状图、柱状图、线形图、地图 …</p><p><img src="/imgs/%E5%8F%AF%E8%A7%86%E5%8C%96/123.png"></p><h3 id="02-使用技术"><a href="#02-使用技术" class="headerlink" title="02-使用技术"></a>02-使用技术</h3><p>完成该项目需要具备以下知识：</p><ul><li>div + css 布局</li><li>flex 布局</li><li>css3 动画</li><li>css3 渐变</li><li>css3 边框图片</li><li>原生 js + jquery 使用</li><li>rem 适配</li><li><strong>echarts 基础</strong></li></ul><p>粗略代码统计：</p><ul><li>css 580 行</li><li>html 450 行</li><li>js 400 行 (有效)</li></ul><h3 id="03-Echarts-介绍"><a href="#03-Echarts-介绍" class="headerlink" title="03-Echarts-介绍"></a>03-Echarts-介绍</h3><blockquote><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8&#x2F;9&#x2F;10&#x2F;11，Chrome，Firefox，Safari 等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><p>大白话：</p><ul><li>是一个 JS 插件</li><li>性能好可流畅运行 PC 与移动设备</li><li>兼容主流浏览器</li><li>提供很多常用图表，且可<strong>定制</strong>。<ul><li><a href="https://www.echartsjs.com/zh/option.html#series-line">折线图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-bar">柱状图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-scatter">散点图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-pie">饼图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-candlestick">K 线图</a></li></ul></li></ul><h3 id="04-Echarts-体验"><a href="#04-Echarts-体验" class="headerlink" title="04-Echarts-体验"></a>04-Echarts-体验</h3><p>官方教程：[五分钟上手 ECharts](<a href="https://www.echartsjs.com/zh/tutorial.html#5">https://www.echartsjs.com/zh/tutorial.html#5</a> 分钟上手 ECharts)</p><p>自己步骤：</p><ul><li>下载 echarts <a href="https://github.com/apache/incubator-echarts/tree/4.5.0">https://github.com/apache/incubator-echarts/tree/4.5.0</a></li><li>引入 echarts <code>dist/echarts.min.js</code></li><li>准备一个具备大小的 DOM 容器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h6 id="初始化-echarts-实例对象"><a href="#初始化-echarts-实例对象" class="headerlink" title="初始化 echarts 实例对象"></a>初始化 echarts 实例对象</h6></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li>指定配置项和数据(option)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> option = &#123;<br>  <span class="hljs-attr">xAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>],<br>  &#125;,<br>  <span class="hljs-attr">yAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">series</span>: [<br>    &#123;<br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">820</span>, <span class="hljs-number">932</span>, <span class="hljs-number">901</span>, <span class="hljs-number">934</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">1330</span>, <span class="hljs-number">1320</span>],<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>将配置项设置给 echarts 实例对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">myChart.<span class="hljs-title function_">setOption</span>(option)<br></code></pre></td></tr></table></figure><h3 id="05-Echarts-基础配置"><a href="#05-Echarts-基础配置" class="headerlink" title="05-Echarts-基础配置"></a>05-Echarts-基础配置</h3><blockquote><p>需要了解的主要配置：<code>series</code> <code>xAxis</code> <code>yAxis</code> <code>grid</code> <code>tooltip</code> <code>title</code> <code>legend</code> <code>color</code></p></blockquote><ul><li><p>series</p><ul><li>系列列表。每个系列通过 <code>type</code> 决定自己的图表类型</li><li>大白话：图标数据，指定什么类型的图标，可以多个图表重叠。</li></ul></li><li><p>xAxis：直角坐标系 grid 中的 x 轴</p><ul><li>boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</li></ul></li><li><p>yAxis：直角坐标系 grid 中的 y 轴</p></li><li><p>grid：直角坐标系内绘图网格。</p><ul><li>left:</li><li>right:</li><li>bottom:</li><li>containLabel(当刻度标签溢出时): true(显示刻度标签) &#x2F; false(不显示刻度标签)</li></ul></li><li><p>title：标题组件</p><ul><li>text:</li></ul></li><li><p>tooltip：提示框组件</p></li><li><p>legend：图例组件</p></li><li><p>color：调色盘颜色列表</p><p>数据堆叠，同个类目轴上系列配置相同的<code>stack</code>值后 后一个系列的值会在前一个系列的值上相加。</p></li></ul><p>演示代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> option = &#123;<br>  <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;skyblue&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>],<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;我的折线图&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">tooltip</span>: &#123;<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">legend</span>: &#123;<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;直播营销&#x27;</span>, <span class="hljs-string">&#x27;联盟广告&#x27;</span>, <span class="hljs-string">&#x27;视频广告&#x27;</span>, <span class="hljs-string">&#x27;直接访问&#x27;</span>],<br>  &#125;,<br>  <span class="hljs-attr">grid</span>: &#123;<br>    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>    <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>    <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>    <span class="hljs-comment">// 当刻度标签溢出的时候，grid 区域是否包含坐标轴的刻度标签。如果为true，则显示刻度标签</span><br>    <span class="hljs-comment">// 如果left right等设置为 0% 刻度标签就溢出了，此时决定是否显示刻度标签</span><br>    <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">toolbox</span>: &#123;<br>    <span class="hljs-attr">feature</span>: &#123;<br>      <span class="hljs-attr">saveAsImage</span>: &#123;&#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">xAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-comment">// 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</span><br>    <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;星期二&#x27;</span>, <span class="hljs-string">&#x27;周三&#x27;</span>, <span class="hljs-string">&#x27;周四&#x27;</span>, <span class="hljs-string">&#x27;周五&#x27;</span>, <span class="hljs-string">&#x27;周六&#x27;</span>, <span class="hljs-string">&#x27;周日&#x27;</span>],<br>  &#125;,<br>  <span class="hljs-attr">yAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">series</span>: [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;直播营销&#x27;</span>,<br>      <span class="hljs-comment">// 图表类型是线形图</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">120</span>, <span class="hljs-number">132</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;联盟广告&#x27;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br><br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">220</span>, <span class="hljs-number">182</span>, <span class="hljs-number">191</span>, <span class="hljs-number">234</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;视频广告&#x27;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br><br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">150</span>, <span class="hljs-number">232</span>, <span class="hljs-number">201</span>, <span class="hljs-number">154</span>, <span class="hljs-number">190</span>, <span class="hljs-number">330</span>, <span class="hljs-number">410</span>],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;直接访问&#x27;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br><br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">320</span>, <span class="hljs-number">332</span>, <span class="hljs-number">301</span>, <span class="hljs-number">334</span>, <span class="hljs-number">390</span>, <span class="hljs-number">330</span>, <span class="hljs-number">320</span>],<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="06-REM-适配"><a href="#06-REM-适配" class="headerlink" title="06-REM 适配"></a>06-REM 适配</h3><ul><li><p>设计稿是 1920px</p></li><li><p>PC 端适配： 宽度在 1024~1920 之间页面元素宽高自适应</p><ol><li><p>flexible.js 把屏幕分为 24 等份</p></li><li><p>cssrem 插件的基准值是 80px</p><p>插件-配置按钮—配置扩展设置–Root Font Size 里面 设置。</p><p>但是别忘记重启 vscode 软件保证生效</p></li><li><p>要把屏幕宽度约束在 1024~1920 之间有适配，实现代码：</p></li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实现rem适配</span><br>@media screen and (max-<span class="hljs-attr">width</span>: 1024px) &#123;<br>     html &#123;<br>         font-<span class="hljs-attr">size</span>: <span class="hljs-number">42.</span>66px !important;<br>     &#125;<br> &#125;<br><br> @media screen and (min-<span class="hljs-attr">width</span>: 1920px) &#123;<br>     html &#123;<br>         font-<span class="hljs-attr">size</span>: 80px !important;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="07-基础布局"><a href="#07-基础布局" class="headerlink" title="07-基础布局"></a>07-基础布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;viewport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--概览--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--监控--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--点位--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--地图--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--用户--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--订单--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--销售--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--渠道--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--季度--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--排行--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>效果图： 1920px * 1078px</li><li>body 设置背景图 ，行高 1.15</li><li>viewport 主体容器，限制最小宽度 1024px，与最大宽度 1920px，最小高度 780px。<ul><li>需要居中显示</li><li>使用 logo.png 做为背景图，在容器内显示</li><li>内间距 88px 20px 0</li></ul></li><li>column 列容器，分三列，占比 3：4：3<ul><li>中间容器外间距 32px 20px 0</li></ul></li></ul><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 基础布局 */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.5rem</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.15</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/bg.jpg</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span> / cover;<br>&#125;<br><span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-weight</span>: normal;<br>&#125;<br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><span class="hljs-selector-class">.viewport</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1920px</span>;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">1024px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">780px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3.667rem</span> <span class="hljs-number">0.833rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/logo.png</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span> / contain;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.column</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">3</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.column</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">4</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">1.333rem</span> <span class="hljs-number">0.833rem</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="08-边框图片"><a href="#08-边框图片" class="headerlink" title="08-边框图片"></a>08-边框图片</h3><blockquote><p>css3 中自适应边框图片运用：</p></blockquote><p><img src="/imgs/%E5%8F%AF%E8%A7%86%E5%8C%96/1576483576664.png"></p><p>组合写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;images/border.jpg&#x27;</span>) <span class="hljs-number">167</span>/<span class="hljs-number">20px</span> round;<br></code></pre></td></tr></table></figure><p>拆分写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;images/border.jpg&#x27;</span>);<br><span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span>;<br><span class="hljs-attribute">border-image-width</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border-image-repeat</span>: round;<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li>边框图片资源地址</li><li>裁剪尺寸（上 右 下 左）单位默认 px，可使用百分百。</li><li>边框图片的宽度，默认边框的宽度。</li><li>平铺方式：<ul><li>stretch 拉伸（默认）</li><li>repeat 平铺，从边框的中心向两侧开始平铺，会出现不完整的图片。</li><li>round 环绕，是完整的使用切割后的图片进行平铺。</li></ul></li></ul><p>DEMO 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>边框图片<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="language-css">        <span class="hljs-comment">/*border-image: url(&quot;images/border.jpg&quot;) 167/20px round;*/</span></span><br><span class="language-css">        <span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;images/border.jpg&#x27;</span>);</span><br><span class="language-css">        <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-image-width</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-comment">/*环绕  是完整的使用切割后的图片进行平铺*/</span></span><br><span class="language-css">        <span class="hljs-attribute">border-image-repeat</span>: round;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">        <span class="hljs-comment">/*平铺 从边框的中心向两侧开始平铺 会出现不完整的图片*/</span></span><br><span class="language-css">        <span class="hljs-attribute">border-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;images/border.jpg&#x27;</span>) <span class="hljs-number">167</span>/<span class="hljs-number">20px</span> repeat;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">        <span class="hljs-comment">/*默认的平铺方式*/</span></span><br><span class="language-css">        <span class="hljs-attribute">border-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;images/border.jpg&#x27;</span>) <span class="hljs-number">167</span>/<span class="hljs-number">20px</span> stretch;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="09-公用面板样式"><a href="#09-公用面板样式" class="headerlink" title="09-公用面板样式"></a>09-公用面板样式</h3><blockquote><p>所有的面板的基础样式是一致的，提前布局好。</p></blockquote><p>切割示例图：</p><img src='/imgs/可视化/qg.png'><ul><li>面板 .panel<ul><li>容器 .inner 内边距是 上下 24px 左右 36px</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 公共面板样式  */</span><br><span class="hljs-selector-class">.panel</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">15px</span> solid transparent;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0.6375rem</span> <span class="hljs-number">0.475rem</span> <span class="hljs-number">0.25rem</span> <span class="hljs-number">1.65rem</span>;<br>  <span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/border.png</span>);<br>  <span class="hljs-attribute">border-image-slice</span>: <span class="hljs-number">51</span> <span class="hljs-number">38</span> <span class="hljs-number">20</span> <span class="hljs-number">132</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.25rem</span>;<br>&#125;<br><span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">0.6375rem</span>;<br>  <span class="hljs-attribute">left</span>: -<span class="hljs-number">1.65rem</span>;<br>  <span class="hljs-attribute">right</span>: -<span class="hljs-number">0.475rem</span>;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">0.25rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.3rem</span> <span class="hljs-number">0.45rem</span>;<br>&#125;<br><span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.25rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-概览区域-overview-布局"><a href="#10-概览区域-overview-布局" class="headerlink" title="10-概览区域(overview)-布局"></a>10-概览区域(overview)-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;overview panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>2,190<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #006cff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          设备总数<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>190<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #6acca3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          季度新增<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>3,001<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #6acca3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          运营设备<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>108<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #ed3f35&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          异常设备<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式描述：</p><ul><li>容器高度 110px</li><li>h4 字体 28px #fff 左边距 4.8px 下间隙 8px</li><li>span 字体 16px #4c9bfd</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 概览区域 */</span><br><br><span class="hljs-selector-class">.overview</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1.375rem</span>;<br>&#125;<br><span class="hljs-selector-class">.overview</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><span class="hljs-selector-class">.overview</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.35rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.1rem</span> <span class="hljs-number">0.06rem</span>;<br>&#125;<br><span class="hljs-selector-class">.overview</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.2rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-监控区域-monitor-布局"><a href="#11-监控区域-monitor-布局" class="headerlink" title="11-监控区域(monitor)-布局"></a>11-监控区域(monitor)-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--监控--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;monitor panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabs&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>故障设备监控<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>异常设备监控<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>故障时间<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>设备地址<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>异常代码<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;marquee-view&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;marquee&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20180701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>11北京市昌平西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000001<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190601<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190704<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000003<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20180701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000004<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000005<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000006<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000007<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000008<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000009<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190710<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000010<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>异常时间<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>设备地址<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>异常代码<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;marquee-view&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;marquee&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000001<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190701<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190703<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190704<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190705<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190706<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190707<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190708<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190709<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>20190710<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>北京市昌平区建材城西路金燕龙写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>1000002<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>监控区域 monitor 大盒子的高度是 480px</strong></p><p>结构解释：</p><ul><li>.tabs 标签选项 加上 active 激活选项 默认激活第一个选项</li><li>.content 切换内容 加上<code>style=&quot;display: block;&quot;</code>显示内容 默认激活第一个内容</li></ul><p>样式描述：</p><ul><li>.inner 容器内间距 24px 0</li><li>.tabs 容器内间距 0 36px<ul><li>a 容器 颜色： #1950c4 内间距：0 27px 字体：18px</li><li>第一个 a 容器 去除左侧内间距 加上右侧 2px 宽度边框#00f2f1</li><li>激活的时候 颜色白色</li></ul></li><li>.content 容器<ul><li>占满剩余高度 flex:1</li><li>默认隐藏</li></ul></li><li>.head 容器<ul><li>行高 1.05 背景 rgba(255, 255, 255, 0.1) 内间距 12px 36px 颜色 #68d8fe 字体大小 14px</li></ul></li><li>row 容器<ul><li>行高 1.05 内间距 12px 36px 颜色 #68d8ff 字体大小 12px</li><li>.icon-dot 字体图标 绝对定位 左边 0.2rem 透明度 0</li><li>鼠标经过后：背景 rgba(255, 255, 255, 0.1) 透明度 1</li></ul></li><li>col 容器<ul><li>宽度：1rem 2.5rem 1rem</li><li>第二个 col 一行不换行 溢出 省略</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 监控区域 */</span><br><span class="hljs-selector-class">.monitor</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">6rem</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.3rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.tabs</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.45rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1950c4</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.3375rem</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0.025rem</span> solid <span class="hljs-number">#00f2f1</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.head</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.05</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.15rem</span> <span class="hljs-number">0.45rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#68d8fe</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.marquee-view</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0.5rem</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.row</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.05</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#61a8ff</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.15rem</span> <span class="hljs-number">0.45rem</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.row</span> <span class="hljs-selector-class">.icon-dot</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0.2rem</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.row</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#68d8fe</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.row</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.icon-dot</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.col</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.col</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2.5rem</span>;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.monitor</span> <span class="hljs-selector-class">.col</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-监控区域-效果"><a href="#12-监控区域-效果" class="headerlink" title="12-监控区域-效果"></a>12-监控区域-效果</h3><p>切换功能：</p><ul><li>绑定 标签页点击 事件</li><li>当前容器加 active 其他容器移除 active</li><li>index 对应的内容容器显示其他容器隐藏</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 切换</span><br>$(<span class="hljs-string">&#x27;.monitor .tabs&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br>  <span class="hljs-comment">// console.log($(this).index());</span><br>  <span class="hljs-comment">//   选取对应索引号的content</span><br>  $(<span class="hljs-string">&#x27;.monitor .content&#x27;</span>).<span class="hljs-title function_">eq</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">index</span>()).<span class="hljs-title function_">show</span>().<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;.content&#x27;</span>).<span class="hljs-title function_">hide</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>动画功能：</p><ul><li>实现思路：<ul><li>先克隆列表，追加在后面</li><li>marquee-view 占满剩余高度，溢出隐藏<ul><li>绝对定位，top 1.6rem bottom 0</li><li>宽度 100%，溢出隐藏</li></ul></li><li>使用 animation 实现动画</li><li>使用 translateY 向上位移 50%</li><li>动画时间 15s，匀速播放，循环执行。</li></ul></li></ul><p>js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 动画</span><br>$(<span class="hljs-string">&#x27;.marquee-view .marquee&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// console.log($(this));</span><br>  <span class="hljs-keyword">var</span> rows = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">clone</span>()<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">append</span>(rows)<br>&#125;)<br></code></pre></td></tr></table></figure><p>css 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 通过CSS3动画滚动marquee */</span><br><span class="hljs-selector-class">.marquee-view</span> <span class="hljs-selector-class">.marquee</span> &#123;<br>  <span class="hljs-attribute">animation</span>: move <span class="hljs-number">15s</span> linear infinite;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> move &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 3.鼠标经过marquee 就停止动画 */</span><br><span class="hljs-selector-class">.marquee-view</span> <span class="hljs-selector-class">.marquee</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">animation-play-state</span>: paused;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-点位区域-point-布局"><a href="#13-点位区域-point-布局" class="headerlink" title="13-点位区域(point)-布局"></a>13-点位区域(point)-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 点位 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;point panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>点位分布统计<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chart&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pie&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>320,11<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #ed3f35&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            点位总数<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>418<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #eacf19&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            本月新增<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><p>point 盒子高度为 340px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 点位 */</span><br><span class="hljs-selector-class">.point</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">4.25rem</span>;<br>&#125;<br><span class="hljs-selector-class">.point</span> <span class="hljs-selector-class">.chart</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.3rem</span>;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><span class="hljs-selector-class">.point</span> <span class="hljs-selector-class">.pie</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">3.9rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3rem</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">0.125rem</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.point</span> <span class="hljs-selector-class">.data</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2.1rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.45rem</span> <span class="hljs-number">0.375rem</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/rect.png</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>&#125;<br><span class="hljs-selector-class">.point</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.35rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.point</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-点位区域-饼图"><a href="#14-点位区域-饼图" class="headerlink" title="14-点位区域-饼图"></a>14-点位区域-饼图</h3><p>ECharts 图表实现步骤：</p><ul><li>从官方示例中找到类似图表，适当修改，引入到 HTML 页面中。</li><li>按照产品需求，来定制图表。</li></ul><h4 id="1-HTML-引入图表"><a href="#1-HTML-引入图表" class="headerlink" title="1. HTML 引入图表"></a>1. HTML 引入图表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 点位分布统计模块</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.pie&quot;</span>));<br>  <span class="hljs-comment">// 2. 指定配置项和数据</span><br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">tooltip</span>: &#123;<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;item&quot;</span>,<br>      <span class="hljs-attr">formatter</span>: <span class="hljs-string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&quot;</span><br>    &#125;,<br><br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;面积模式&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;pie&quot;</span>,<br>        <span class="hljs-attr">radius</span>: [<span class="hljs-number">30</span>, <span class="hljs-number">110</span>],<br>        <span class="hljs-attr">center</span>: [<span class="hljs-string">&quot;75%&quot;</span>, <span class="hljs-string">&quot;50%&quot;</span>],<br>        <span class="hljs-attr">roseType</span>: <span class="hljs-string">&quot;area&quot;</span>,<br>        <span class="hljs-attr">data</span>: [<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose1&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose2&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">15</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose3&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose4&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose5&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">35</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose6&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose7&quot;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;rose8&quot;</span> &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;;<br><br>  <span class="hljs-comment">// 3. 配置项和数据给我们的实例化对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option);<br>&#125;)();<br><br></code></pre></td></tr></table></figure><h4 id="2-定制需求"><a href="#2-定制需求" class="headerlink" title="2. 定制需求"></a>2. 定制需求</h4><p>第一步：参考官方例子，熟悉里面参数具体含义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">option = &#123;<br>  <span class="hljs-comment">// 提示框组件</span><br>  <span class="hljs-attr">tooltip</span>: &#123;<br>    <span class="hljs-comment">// trigger 触发方式。  非轴图形，使用item的意思是放到数据对应图形上触发提示</span><br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,<br>    <span class="hljs-comment">// 格式化提示内容：</span><br>    <span class="hljs-comment">// a 代表series系列图表名称</span><br>    <span class="hljs-comment">// b 代表series数据名称 data 里面的name</span><br>    <span class="hljs-comment">// c 代表series数据值 data 里面的value</span><br>    <span class="hljs-comment">// d代表  当前数据/总数据的比例</span><br>    <span class="hljs-attr">formatter</span>: <span class="hljs-string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 控制图表</span><br>  <span class="hljs-attr">series</span>: [<br>    &#123;<br>      <span class="hljs-comment">// 图表名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;点位统计&#x27;</span>,<br>      <span class="hljs-comment">// 图表类型</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>      <span class="hljs-comment">// 南丁格尔玫瑰图 有两个圆  内圆半径10%  外圆半径70%</span><br>      <span class="hljs-comment">// 饼形图半径。 可以是像素。也可以是百分比（ 基于DOM容器大小）第一项是内半径，第二项是外半径（通过它可以实现饼形图大小）</span><br>      <span class="hljs-attr">radius</span>: [<span class="hljs-string">&#x27;10%&#x27;</span>, <span class="hljs-string">&#x27;70%&#x27;</span>],<br>      <span class="hljs-comment">// 图表中心位置 left 50%  top 50%  距离图表DOM容器</span><br>      <span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>      <span class="hljs-comment">// radius 半径模式，另外一种是 area 面积模式</span><br>      <span class="hljs-attr">roseType</span>: <span class="hljs-string">&#x27;radius&#x27;</span>,<br>      <span class="hljs-comment">// 数据集 value 数据的值 name 数据的名称</span><br>      <span class="hljs-attr">data</span>: [<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose1&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose2&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">15</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose3&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose4&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose5&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">35</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose6&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose7&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose8&#x27;</span> &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：按照需求定制</p><ul><li>需求 1：颜色设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;#006cff&#x27;</span>, <span class="hljs-string">&#x27;#60cda0&#x27;</span>, <span class="hljs-string">&#x27;#ed8884&#x27;</span>, <span class="hljs-string">&#x27;#ff9f7f&#x27;</span>, <span class="hljs-string">&#x27;#0096ff&#x27;</span>, <span class="hljs-string">&#x27;#9fe6b8&#x27;</span>, <span class="hljs-string">&#x27;#32c5e9&#x27;</span>, <span class="hljs-string">&#x27;#1d9dff&#x27;</span>],<br></code></pre></td></tr></table></figure><ul><li>需求 2：修改饼形图大小 ( series 对象)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">radius</span>: [<span class="hljs-string">&#x27;10%&#x27;</span>, <span class="hljs-string">&#x27;70%&#x27;</span>],<br></code></pre></td></tr></table></figure><ul><li>需求 3： 把饼形图的显示模式改为 半径模式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">roseType</span>: <span class="hljs-string">&quot;radius&quot;</span>,<br></code></pre></td></tr></table></figure><ul><li>需求 4：数据使用更换（series 对象 里面 data 对象）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;云南&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">26</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">24</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;山东&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;河北&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;江苏&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;浙江&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;四川&#x27;</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">42</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;湖北&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><ul><li><p>需求 5：字体略小些 10 px ( series 对象里面设置 )</p><p>饼图图形上的文本标签可以控制饼形图的文字的一些样式。 label 对象设置</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;面积模式&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;pie&quot;</span>,<br>        <span class="hljs-attr">radius</span>: [<span class="hljs-number">30</span>, <span class="hljs-number">110</span>],<br>        <span class="hljs-attr">center</span>: [<span class="hljs-string">&quot;50%&quot;</span>, <span class="hljs-string">&quot;50%&quot;</span>],<br>        <span class="hljs-attr">roseType</span>: <span class="hljs-string">&quot;radius&quot;</span>,<br>        <span class="hljs-comment">// 文本标签控制饼形图文字的相关样式， 注意它是一个对象</span><br>        <span class="hljs-attr">label</span>: &#123;<br>          <span class="hljs-attr">fontSize</span>: <span class="hljs-number">10</span><br>        &#125;,<br>      &#125;<br>    ]<br>  &#125;;<br></code></pre></td></tr></table></figure><ul><li>需求 6：防止缩放的时候，引导线过长。引导线略短些 (series 对象里面的 labelLine 对象设置 )<ul><li>连接图表 6 px</li><li>连接文字 8 px</li></ul></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs diff"><br><span class="hljs-addition">+        // 文字调整</span><br><span class="hljs-addition">+        label:&#123;</span><br><span class="hljs-addition">+          fontSize: 10</span><br><span class="hljs-addition">+        &#125;,</span><br><span class="hljs-addition">+        // 引导线调整</span><br><span class="hljs-addition">+        labelLine: &#123;</span><br><span class="hljs-addition">+          // 连接扇形图线长</span><br><span class="hljs-addition">+          length: 6,</span><br><span class="hljs-addition">+          // 连接文字线长</span><br><span class="hljs-addition">+          length2: 8</span><br><span class="hljs-addition">+        &#125;</span><br><span class="hljs-addition">+      &#125;</span><br><span class="hljs-addition">+    ],</span><br><br></code></pre></td></tr></table></figure><ul><li>需求 6：浏览器缩放的时候，图表跟着自动适配。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 监听浏览器缩放，图表对象调用缩放resize函数</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    myChart.<span class="hljs-title function_">resize</span>();<br>  &#125;);<br></code></pre></td></tr></table></figure><p>点位统计完整 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 点位分布统计模块</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.pie&#x27;</span>))<br>  <span class="hljs-comment">// 2. 指定配置项和数据</span><br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">tooltip</span>: &#123;<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,<br>      <span class="hljs-attr">formatter</span>: <span class="hljs-string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-comment">// 注意颜色写的位置</span><br>    <span class="hljs-attr">color</span>: [<br>      <span class="hljs-string">&#x27;#006cff&#x27;</span>,<br>      <span class="hljs-string">&#x27;#60cda0&#x27;</span>,<br>      <span class="hljs-string">&#x27;#ed8884&#x27;</span>,<br>      <span class="hljs-string">&#x27;#ff9f7f&#x27;</span>,<br>      <span class="hljs-string">&#x27;#0096ff&#x27;</span>,<br>      <span class="hljs-string">&#x27;#9fe6b8&#x27;</span>,<br>      <span class="hljs-string">&#x27;#32c5e9&#x27;</span>,<br>      <span class="hljs-string">&#x27;#1d9dff&#x27;</span>,<br>    ],<br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;点位统计&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>        <span class="hljs-comment">// 如果radius是百分比则必须加引号</span><br>        <span class="hljs-attr">radius</span>: [<span class="hljs-string">&#x27;10%&#x27;</span>, <span class="hljs-string">&#x27;70%&#x27;</span>],<br>        <span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>        <span class="hljs-attr">roseType</span>: <span class="hljs-string">&#x27;radius&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;云南&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">26</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">24</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;山东&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;河北&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;江苏&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;浙江&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;四川&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">42</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;湖北&#x27;</span> &#125;,<br>        ],<br>        <span class="hljs-comment">// 修饰饼形图文字相关的样式 label对象</span><br>        <span class="hljs-attr">label</span>: &#123;<br>          <span class="hljs-attr">fontSize</span>: <span class="hljs-number">10</span>,<br>        &#125;,<br>        <span class="hljs-comment">// 修饰引导线样式</span><br>        <span class="hljs-attr">labelLine</span>: &#123;<br>          <span class="hljs-comment">// 连接到图形的线长度</span><br>          <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>          <span class="hljs-comment">// 连接到文字的线长度</span><br>          <span class="hljs-attr">length2</span>: <span class="hljs-number">8</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;<br><br>  <span class="hljs-comment">// 3. 配置项和数据给我们的实例化对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>  <span class="hljs-comment">// 4. 当我们浏览器缩放的时候，图表也等比例缩放</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 让我们的图表调用 resize这个方法</span><br>    myChart.<span class="hljs-title function_">resize</span>()<br>  &#125;)<br>&#125;)()<br></code></pre></td></tr></table></figure><h3 id="15-地图区域-map-预留布局"><a href="#15-地图区域-map-预留布局" class="headerlink" title="15-地图区域 (map) -预留布局"></a>15-地图区域 (map) -预留布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 地图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-cube&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    设备数据统计<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chart&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;geo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 地图  */</span><br><span class="hljs-selector-class">.map</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">7.225rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.25rem</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><span class="hljs-selector-class">.map</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.2rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.25rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br><span class="hljs-selector-class">.map</span> <span class="hljs-selector-class">.icon-cube</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#68d8fe</span>;<br>&#125;<br><span class="hljs-selector-class">.map</span> <span class="hljs-selector-class">.chart</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.05</span>);<br>&#125;<br><span class="hljs-selector-class">.map</span> <span class="hljs-selector-class">.geo</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意第二列（column) 有个外边距（上面 32px 左右 20px 下是 0）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.viewport</span> <span class="hljs-selector-class">.column</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">4</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.4rem</span> <span class="hljs-number">0.25rem</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-用户统计-users-布局"><a href="#16-用户统计-users-布局" class="headerlink" title="16-用户统计 (users) -布局"></a>16-用户统计 (users) -布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用户 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;users panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>全国用户总量统计<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chart&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>120,899<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #ed3f35&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            用户总量<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>248<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #eacf19&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            本月新增<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 用户模块 */</span><br><span class="hljs-selector-class">.users</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">4.25rem</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.users</span> <span class="hljs-selector-class">.chart</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.3rem</span>;<br>&#125;<br><span class="hljs-selector-class">.users</span> <span class="hljs-selector-class">.bar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">7.35rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3rem</span>;<br>&#125;<br><span class="hljs-selector-class">.users</span> <span class="hljs-selector-class">.data</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2.1rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.45rem</span> <span class="hljs-number">0.375rem</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/rect.png</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>&#125;<br><span class="hljs-selector-class">.users</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.35rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.users</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="17-用户统计-users-柱状图"><a href="#17-用户统计-users-柱状图" class="headerlink" title="17-用户统计 (users) -柱状图"></a>17-用户统计 (users) -柱状图</h3><p>实现步骤：</p><ul><li>从官方示例中找到最接近项目需求的例子，适当修改, 引入到 HTML 页面中</li><li>按照产品需求，来定制图表。</li></ul><p>第一步：参考官方示例 + 分析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js">;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.bar&#x27;</span>))<br>  <span class="hljs-comment">// 2. 指定配置和数据</span><br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-comment">// 工具提示</span><br>    <span class="hljs-attr">tooltip</span>: &#123;<br>      <span class="hljs-comment">// 触发类型  经过轴触发axis  经过轴触发item</span><br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>      <span class="hljs-comment">// 轴触发提示才有效</span><br>      <span class="hljs-attr">axisPointer</span>: &#123;<br>        <span class="hljs-comment">// 默认为直线，可选为：&#x27;line&#x27; 线效果 | &#x27;shadow&#x27; 阴影效果</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;shadow&#x27;</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// 图表边界控制</span><br>    <span class="hljs-attr">grid</span>: &#123;<br>      <span class="hljs-comment">// 距离 上右下左 的距离</span><br>      <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>      <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;4%&#x27;</span>,<br>      <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>      <span class="hljs-comment">// 是否包含文本</span><br>      <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-comment">// 控制x轴</span><br>    <span class="hljs-attr">xAxis</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 使用类目，必须有data属性</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>        <span class="hljs-comment">// 使用 data 中的数据设为刻度文字</span><br>        <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>],<br>        <span class="hljs-comment">// 刻度设置</span><br>        <span class="hljs-attr">axisTick</span>: &#123;<br>          <span class="hljs-comment">// true意思：图形在刻度中间</span><br>          <span class="hljs-comment">// false意思：图形在刻度之间</span><br>          <span class="hljs-attr">alignWithLabel</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>    <span class="hljs-comment">// 控制y轴</span><br>    <span class="hljs-attr">yAxis</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 使用数据的值设为刻度文字</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>      &#125;,<br>    ],<br>    <span class="hljs-comment">// 控制x轴</span><br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 图表数据名称</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户统计&#x27;</span>,<br>        <span class="hljs-comment">// 图表类型</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-comment">// 柱子宽度</span><br>        <span class="hljs-attr">barWidth</span>: <span class="hljs-string">&#x27;60%&#x27;</span>,<br>        <span class="hljs-comment">// 数据</span><br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">52</span>, <span class="hljs-number">200</span>, <span class="hljs-number">334</span>, <span class="hljs-number">390</span>, <span class="hljs-number">330</span>, <span class="hljs-number">220</span>],<br>      &#125;,<br>    ],<br>  &#125;<br><br>  <span class="hljs-comment">// 3. 把配置给实例对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>&#125;)()<br></code></pre></td></tr></table></figure><p>第二步：按照需求修改</p><ul><li>需求 1： 修改柱子的颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 修改线性渐变色方式 1</span><br><span class="hljs-attr">color</span>: <span class="hljs-keyword">new</span> echarts.<span class="hljs-property">graphic</span>.<span class="hljs-title class_">LinearGradient</span>(<br>     <span class="hljs-comment">// (x1,y2) 点到点 (x2,y2) 之间进行渐变</span><br>     <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<br>     [<br>          &#123; <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#00fffb&#x27;</span> &#125;, <span class="hljs-comment">// 0 起始颜色</span><br>          &#123; <span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#0061ce&#x27;</span> &#125;  <span class="hljs-comment">// 1 结束颜色</span><br>    ]<br> ),<br><span class="hljs-comment">// 修改线性渐变色方式 2</span><br><span class="hljs-attr">color</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;linear&#x27;</span>,<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">x2</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y2</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">colorStops</span>: [&#123;<br>        <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-comment">// 0% 处的颜色</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span> <span class="hljs-comment">// 100% 处的颜色</span><br>    &#125;],<br>    <span class="hljs-attr">globalCoord</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 缺省为 false</span><br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>需求 2： 提示框组件放到柱子上触发， 没有阴影等效果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//提示框组件</span><br><span class="hljs-attr">tooltip</span>: &#123;<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,<br>   <span class="hljs-comment">// axisPointer: &#123;            // 坐标轴指示器，坐标轴触发有效  这个模块我们此时不需要删掉即可</span><br>       <span class="hljs-comment">// type: &#x27;shadow&#x27;        // 默认为直线，可选为：&#x27;line&#x27; | &#x27;shadow&#x27;</span><br>   <span class="hljs-comment">// &#125;</span><br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>需求 3： 修改柱形图表大小， 以及相关网格。<ul><li>饼形图修改图表大小是通过 series 对象里面的 radius</li><li>柱形图修改图标大小是通过 series 对象里面的 grid 对象 left right 等</li><li>显示网格 show: true，网格颜色是 borderColor</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 直角坐标系内绘图网格（区域）</span><br><span class="hljs-attr">grid</span>: &#123;<br>   <span class="hljs-attr">top</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>   <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>   <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>   <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;0%&#x27;</span>,<br>   <span class="hljs-comment">//  图表位置紧贴画布边缘是否显示刻度以及label文字 防止坐标轴标签溢出跟grid 区域有关系</span><br>   <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span>,<br>   <span class="hljs-comment">// 是否显示直角坐标系网格</span><br>   <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>   <span class="hljs-comment">//grid 四条边框的颜色</span><br>   <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&#x27;rgba(0, 240, 255, 0.3)&#x27;</span><br>&#125;,<br><br></code></pre></td></tr></table></figure><ul><li>需求 4： X 轴调整<ul><li>柱子在刻度之间</li><li>剔除刻度不显示</li><li>刻度标签文字颜色 #4c9bfd 通过 axisLabel 对象设置</li><li>修改 x 轴线的颜色 axisLine 里面的 lineStyle</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 控制x轴</span><br><span class="hljs-attr">xAxis</span>: [<br>  &#123;<br>    <span class="hljs-comment">// 使用类目，必须有data属性</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-comment">// 使用 data 中的数据设为刻度文字</span><br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>],<br>    <span class="hljs-comment">// 刻度设置</span><br>    <span class="hljs-attr">axisTick</span>: &#123;<br>       <span class="hljs-comment">// true意思：图形和刻度居中中间</span><br>       <span class="hljs-comment">// false意思：图形在刻度之间</span><br>       <span class="hljs-attr">alignWithLabel</span>: <span class="hljs-literal">false</span>,<br>       <span class="hljs-comment">// 不显示刻度</span><br>       <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-comment">// x坐标轴文字标签样式设置</span><br>    <span class="hljs-attr">axisLabel</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span><br>   &#125;,<br>   <span class="hljs-comment">// x坐标轴颜色设置</span><br>   <span class="hljs-attr">axisLine</span>:&#123;<br>      <span class="hljs-attr">lineStyle</span>:&#123;<br>          <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;rgba(0, 240, 255, 0.3)&#x27;</span>,<br>          <span class="hljs-comment">// width:8,  x轴线的粗细</span><br>          <span class="hljs-comment">// opcity: 0,   如果不想显示x轴线 则改为 0</span><br>         &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>需求 5： Y 轴调整<ul><li>剔除刻度不显示</li><li>Y 轴文字颜色 #4c9bfd 通过 axisLabel 对象设置</li><li>Y 轴分割线颜色 splitLine 对象里面 lineStyle 对象设置</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 控制y轴</span><br><span class="hljs-attr">yAxis</span>: [<br>  &#123;<br>    <span class="hljs-comment">// 使用类目，必须有data属性</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-comment">// 使用 data 中的数据设为刻度文字</span><br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>],<br>    <span class="hljs-comment">// 刻度设置</span><br>    <span class="hljs-attr">axisTick</span>: &#123;<br>       <span class="hljs-comment">// 不显示刻度</span><br>       <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-comment">// y坐标轴文字标签样式设置</span><br>    <span class="hljs-attr">axisLabel</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span><br>   &#125;,<br>   <span class="hljs-comment">// y坐标轴颜色设置</span><br>    <span class="hljs-attr">axisLine</span>:&#123;<br>      <span class="hljs-attr">lineStyle</span>:&#123;<br>           <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;rgba(0, 240, 255, 0.3)&#x27;</span>,<br>          <span class="hljs-comment">// width:8,  x轴线的粗细</span><br>          <span class="hljs-comment">// opcity: 0,   如果不想显示x轴线 则改为 0</span><br>         &#125;<br>    &#125;,<br>    <span class="hljs-comment">// y轴 分割线的样式</span><br>     <span class="hljs-attr">splitLine</span>: &#123;<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(0, 240, 255, 0.3)&#x27;</span><br>        &#125;<br>     &#125;<br>],<br></code></pre></td></tr></table></figure><ul><li>需求 6：调整数据，与省略图形定制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// series</span><br><span class="hljs-attr">data</span>: [<span class="hljs-number">2100</span>, <span class="hljs-number">1900</span>, <span class="hljs-number">1700</span>, <span class="hljs-number">1560</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">900</span>, <span class="hljs-number">750</span>, <span class="hljs-number">600</span>, <span class="hljs-number">480</span>, <span class="hljs-number">240</span>]<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// xAxis</span><br><span class="hljs-attr">data</span>: [<br>  <span class="hljs-string">&#x27;上海&#x27;</span>,<br>  <span class="hljs-string">&#x27;广州&#x27;</span>,<br>  <span class="hljs-string">&#x27;北京&#x27;</span>,<br>  <span class="hljs-string">&#x27;深圳&#x27;</span>,<br>  <span class="hljs-string">&#x27;合肥&#x27;</span>,<br>  <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">&#x27;......&#x27;</span>,<br>  <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">&#x27;杭州&#x27;</span>,<br>  <span class="hljs-string">&#x27;厦门&#x27;</span>,<br>  <span class="hljs-string">&#x27;济南&#x27;</span>,<br>  <span class="hljs-string">&#x27;成都&#x27;</span>,<br>  <span class="hljs-string">&#x27;重庆&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><ul><li><p>省略图形</p><ul><li>经过图形才显示提示，且省略的柱子不需要提示</li><li>图形单独设置颜色</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 中间省略的数据  准备三项</span><br><span class="hljs-keyword">var</span> item = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">1200</span>,<br>  <span class="hljs-comment">// 柱子颜色</span><br>  <span class="hljs-attr">itemStyle</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#254065&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 鼠标经过柱子颜色</span><br>  <span class="hljs-attr">emphasis</span>: &#123;<br>    <span class="hljs-attr">itemStyle</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#254065&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// 工具提示隐藏</span><br>  <span class="hljs-attr">tooltip</span>: &#123;<br>    <span class="hljs-attr">extraCssText</span>: <span class="hljs-string">&#x27;opacity:0&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff">// series配置data选项在中使用<br>data: [2100,1900,1700,1560,1400,item,item,item,900,750,600,480,240],<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 4. 当我们浏览器缩放的时候，图表也等比例缩放</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 让我们的图表调用 resize这个方法</span><br>  myChart.<span class="hljs-title function_">resize</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="18-订单区域（order）-布局"><a href="#18-订单区域（order）-布局" class="headerlink" title="18-订单区域（order）-布局"></a>18-订单区域（order）-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 订单 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;order panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 筛选 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>365天<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>90天<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>30天<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>24小时<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>20,301,987<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #ed3f35;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          订单量<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>99834<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #eacf19;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          销售额(万元)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 订单 */</span><br><span class="hljs-selector-class">.order</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1.875rem</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.filter</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.filter</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1950c4</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0.025rem</span> solid <span class="hljs-number">#00f2f1</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.filter</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.filter</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">border-right</span>: none;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.filter</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.25rem</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.data</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.25rem</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.35rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.125rem</span>;<br>&#125;<br><span class="hljs-selector-class">.order</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18-订单区域（order）-效果-课后作业"><a href="#18-订单区域（order）-效果-课后作业" class="headerlink" title="18-订单区域（order）-效果 ( 课后作业 )"></a>18-订单区域（order）-效果 ( 课后作业 )</h3><p>实现步骤：</p><ul><li>提前准备数据</li><li>点击后切 tab 激活样式</li><li>点击后切换数据内容</li><li>开启定时器动态切换数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 订单功能</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 准备数据</span><br>  <span class="hljs-keyword">var</span> data = &#123;<br>    <span class="hljs-attr">day365</span>: &#123; <span class="hljs-attr">orders</span>: <span class="hljs-string">&#x27;20,301,987&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-string">&#x27;99834&#x27;</span> &#125;,<br>    <span class="hljs-attr">day90</span>: &#123; <span class="hljs-attr">orders</span>: <span class="hljs-string">&#x27;301,987&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-string">&#x27;9834&#x27;</span> &#125;,<br>    <span class="hljs-attr">day30</span>: &#123; <span class="hljs-attr">orders</span>: <span class="hljs-string">&#x27;1,987&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-string">&#x27;3834&#x27;</span> &#125;,<br>    <span class="hljs-attr">day1</span>: &#123; <span class="hljs-attr">orders</span>: <span class="hljs-string">&#x27;987&#x27;</span>, <span class="hljs-attr">amount</span>: <span class="hljs-string">&#x27;834&#x27;</span> &#125;,<br>  &#125;<br>  <span class="hljs-comment">// 获取显示 订单数量 容器</span><br>  <span class="hljs-keyword">var</span> $h4Orders = $(<span class="hljs-string">&#x27;.order h4:eq(0)&#x27;</span>)<br>  <span class="hljs-comment">// 获取显示 金额数量 容器</span><br>  <span class="hljs-keyword">var</span> $h4Amount = $(<span class="hljs-string">&#x27;.order h4:eq(1)&#x27;</span>)<br>  $(<span class="hljs-string">&#x27;.order&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.filter a&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 2. 点击切换激活样式</span><br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br>    <span class="hljs-comment">// 3. 点击切换数据</span><br>    <span class="hljs-keyword">var</span> currdata = data[<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">key</span>]<br>    $h4Orders.<span class="hljs-title function_">html</span>(currdata.<span class="hljs-property">orders</span>)<br>    $h4Amount.<span class="hljs-title function_">html</span>(currdata.<span class="hljs-property">amount</span>)<br>  &#125;)<br>  <span class="hljs-comment">// 4. 开启定时器切换数据</span><br>  <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">var</span> $allTab = $(<span class="hljs-string">&#x27;.order .filter a&#x27;</span>)<br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    index++<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">4</span>) index = <span class="hljs-number">0</span><br>    $allTab.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">click</span>()<br>  &#125;, <span class="hljs-number">5000</span>)<br>&#125;)()<br></code></pre></td></tr></table></figure><h3 id="19-销售统计-sales-布局"><a href="#19-销售统计-sales-布局" class="headerlink" title="19-销售统计( sales )-布局"></a>19-销售统计( sales )-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 销售额 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sales panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>销售额统计<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>年<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>季<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>月<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>周<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chart&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>单位:万<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 销售区域 */</span><br><span class="hljs-selector-class">.sales</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3.1rem</span>;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-class">.caption</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0.025rem</span> solid <span class="hljs-number">#00f2f1</span>;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.05rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.2rem</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">0.0375rem</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.2625rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.0375rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0bace6</span>;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-class">.chart</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0.1875rem</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-class">.label</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0.525rem</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0.225rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4996f5</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-selector-class">.sales</span> <span class="hljs-selector-class">.line</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-销售统计-sales-线形图"><a href="#19-销售统计-sales-线形图" class="headerlink" title="19-销售统计( sales )-线形图"></a>19-销售统计( sales )-线形图</h3><p>实现步骤：</p><ul><li>寻找官方的类似示例，给予分析, 引入到 HTML 页面中</li><li>按照需求来定制它。</li></ul><p><strong>第一步：</strong>寻找官方的类似示例，给予分析。</p><p>官方参考示例：<a href="https://www.echartsjs.com/examples/zh/editor.html?c=line-stack">https://www.echartsjs.com/examples/zh/editor.html?c=line-stack</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 销售统计模块</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.line&#x27;</span>))<br>  <span class="hljs-comment">// 2. 指定配置和数据</span><br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">tooltip</span>: &#123;<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">legend</span>: &#123;<br>      <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;邮件营销&#x27;</span>, <span class="hljs-string">&#x27;联盟广告&#x27;</span>],<br>    &#125;,<br>    <span class="hljs-attr">grid</span>: &#123;<br>      <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>      <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;4%&#x27;</span>,<br>      <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>      <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    <span class="hljs-attr">xAxis</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>      <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;周一&#x27;</span>, <span class="hljs-string">&#x27;周二&#x27;</span>],<br>    &#125;,<br>    <span class="hljs-attr">yAxis</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;邮件营销&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;总量&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">120</span>, <span class="hljs-number">132</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;联盟广告&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;总量&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">220</span>, <span class="hljs-number">182</span>, <span class="hljs-number">191</span>, <span class="hljs-number">234</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>],<br>      &#125;,<br>    ],<br>  &#125;<br><br>  <span class="hljs-comment">// 3. 把配置和数据给实例对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>&#125;)()<br></code></pre></td></tr></table></figure><p><strong>第二步：</strong>按照需求来定制它。</p><ul><li>需求 1： 修改折线图大小，显示边框设置颜色：#012f4a，并且显示刻度标签。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置网格样式</span><br><span class="hljs-attr">grid</span>: &#123;<br>  <span class="hljs-attr">top</span>: <span class="hljs-string">&#x27;20%&#x27;</span>,<br>  <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>  <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;4%&#x27;</span>,<br>  <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>  <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 显示边框</span><br>  <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&#x27;#012f4a&#x27;</span>,<span class="hljs-comment">// 边框颜色</span><br>  <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 包含刻度文字在内</span><br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>需求 2： 修改图例组件中的文字颜色 #4c9bfd， 距离右侧 right 为 10%</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 图例组件</span><br>   <span class="hljs-attr">legend</span>: &#123;<br>     <span class="hljs-attr">textStyle</span>: &#123;<br>       <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span> <span class="hljs-comment">// 图例文字颜色</span><br>     &#125;,<br>     <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;10%&#x27;</span> <span class="hljs-comment">// 距离右边10%</span><br>   &#125;,<br></code></pre></td></tr></table></figure><ul><li>需求 3： x 轴相关配置<ul><li>刻度去除</li><li>x 轴刻度标签字体颜色：#4c9bfd</li><li>剔除坐标轴线颜色（将来使用 Y 轴分割线)</li><li>轴两端是不需要内间距 boundaryGap</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"> <span class="hljs-attr">xAxis</span>: &#123;<br>   <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>   <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;周一&quot;</span>, <span class="hljs-string">&quot;周二&quot;</span>],<br><span class="hljs-attr">axisTick</span>: &#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 去除刻度线</span><br>    &#125;,<br>    <span class="hljs-attr">axisLabel</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span> <span class="hljs-comment">// 文本颜色</span><br>    &#125;,<br>    <span class="hljs-attr">axisLine</span>: &#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 去除轴线</span><br>    &#125;,<br>    <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>  <span class="hljs-comment">// 去除轴内间距</span><br> &#125;,<br></code></pre></td></tr></table></figure><ul><li>需求 4： y 轴的定制<ul><li>刻度去除</li><li>字体颜色：#4c9bfd</li><li>分割线颜色：#012f4a</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">yAxis</span>: &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>  <span class="hljs-attr">axisTick</span>: &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>  <span class="hljs-comment">// 去除刻度</span><br>  &#125;,<br>  <span class="hljs-attr">axisLabel</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span> <span class="hljs-comment">// 文字颜色</span><br>  &#125;,<br>  <span class="hljs-attr">splitLine</span>: &#123;<br>    <span class="hljs-attr">lineStyle</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#012f4a&#x27;</span> <span class="hljs-comment">// 分割线颜色</span><br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>需求 5： 两条线形图定制<ul><li>颜色分别：#00f2f1 #ed3f35</li><li>把折线修饰为圆滑 series 数据中添加 smooth 为 true</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;#00f2f1&#x27;</span>, <span class="hljs-string">&#x27;#ed3f35&#x27;</span>],<br><span class="hljs-attr">series</span>: [&#123;<br>     <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;预期销售额&#x27;</span>,<br>     <span class="hljs-attr">data</span>: [<span class="hljs-number">820</span>, <span class="hljs-number">932</span>, <span class="hljs-number">901</span>, <span class="hljs-number">934</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">1330</span>, <span class="hljs-number">1320</span>],<br>     <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>     <span class="hljs-comment">// 折线修饰为圆滑</span><br>     <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>,<br>     &#125;,&#123;<br>     <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;实际销售额&#x27;</span>,<br>     <span class="hljs-attr">data</span>: [<span class="hljs-number">100</span>, <span class="hljs-number">331</span>, <span class="hljs-number">200</span>, <span class="hljs-number">123</span>, <span class="hljs-number">233</span>, <span class="hljs-number">543</span>, <span class="hljs-number">400</span>],<br>     <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>     <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>,<br>   &#125;]<br></code></pre></td></tr></table></figure><ul><li>需求 6： 配置数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// x轴的文字</span><br><span class="hljs-attr">xAxis</span>: &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;1月&#x27;</span>, <span class="hljs-string">&#x27;2月&#x27;</span>, <span class="hljs-string">&#x27;3月&#x27;</span>, <span class="hljs-string">&#x27;4月&#x27;</span>, <span class="hljs-string">&#x27;5月&#x27;</span>, <span class="hljs-string">&#x27;6月&#x27;</span>, <span class="hljs-string">&#x27;7月&#x27;</span>, <span class="hljs-string">&#x27;8月&#x27;</span>, <span class="hljs-string">&#x27;9月&#x27;</span>, <span class="hljs-string">&#x27;10月&#x27;</span>, <span class="hljs-string">&#x27;11月&#x27;</span>, <span class="hljs-string">&#x27;12月&#x27;</span>],<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 图标数据</span><br>    <span class="hljs-attr">series</span>: [&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;预期销售额&#x27;</span>,<br>      <span class="hljs-attr">data</span>:  [<span class="hljs-number">24</span>, <span class="hljs-number">40</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>, <span class="hljs-number">230</span>, <span class="hljs-number">120</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>, <span class="hljs-number">120</span>],<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>      <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;实际销售额&#x27;</span>,<br>      <span class="hljs-attr">data</span>: [<span class="hljs-number">40</span>, <span class="hljs-number">64</span>, <span class="hljs-number">191</span>, <span class="hljs-number">324</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>, <span class="hljs-number">213</span>, <span class="hljs-number">180</span>, <span class="hljs-number">200</span>, <span class="hljs-number">180</span>, <span class="hljs-number">79</span>],<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>      <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;]<br></code></pre></td></tr></table></figure><p>总结：现在给的是年份数据，还需要切换效果。</p><h3 id="19-销售统计-sales-切换效果"><a href="#19-销售统计-sales-切换效果" class="headerlink" title="19-销售统计( sales )-切换效果"></a>19-销售统计( sales )-切换效果</h3><p>实现步骤：</p><ul><li><ol><li>准备切换需要依赖的数据 4 组</li></ol></li><li><ol start="2"><li>绑定点击事件</li></ol><ul><li>切换激活 tab 的样式</li><li>切换图表依赖的数据（重新渲染图表）</li></ul></li><li><ol start="3"><li>开启定时器，进行切换， 鼠标经过 sales 停止定时器，离开开启定时器</li></ol></li></ul><p>第一步：准备数据，使用数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> data = &#123;<br>  <span class="hljs-attr">year</span>: [<br>    [<span class="hljs-number">24</span>, <span class="hljs-number">40</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>, <span class="hljs-number">230</span>, <span class="hljs-number">120</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>, <span class="hljs-number">120</span>],<br>    [<span class="hljs-number">40</span>, <span class="hljs-number">64</span>, <span class="hljs-number">191</span>, <span class="hljs-number">324</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>, <span class="hljs-number">213</span>, <span class="hljs-number">180</span>, <span class="hljs-number">200</span>, <span class="hljs-number">180</span>, <span class="hljs-number">79</span>],<br>  ],<br>  <span class="hljs-attr">quarter</span>: [<br>    [<span class="hljs-number">23</span>, <span class="hljs-number">75</span>, <span class="hljs-number">12</span>, <span class="hljs-number">97</span>, <span class="hljs-number">21</span>, <span class="hljs-number">67</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">43</span>, <span class="hljs-number">64</span>, <span class="hljs-number">76</span>, <span class="hljs-number">38</span>],<br>    [<span class="hljs-number">43</span>, <span class="hljs-number">31</span>, <span class="hljs-number">65</span>, <span class="hljs-number">23</span>, <span class="hljs-number">78</span>, <span class="hljs-number">21</span>, <span class="hljs-number">82</span>, <span class="hljs-number">64</span>, <span class="hljs-number">43</span>, <span class="hljs-number">60</span>, <span class="hljs-number">19</span>, <span class="hljs-number">34</span>],<br>  ],<br>  <span class="hljs-attr">month</span>: [<br>    [<span class="hljs-number">34</span>, <span class="hljs-number">87</span>, <span class="hljs-number">32</span>, <span class="hljs-number">76</span>, <span class="hljs-number">98</span>, <span class="hljs-number">12</span>, <span class="hljs-number">32</span>, <span class="hljs-number">87</span>, <span class="hljs-number">39</span>, <span class="hljs-number">36</span>, <span class="hljs-number">29</span>, <span class="hljs-number">36</span>],<br>    [<span class="hljs-number">56</span>, <span class="hljs-number">43</span>, <span class="hljs-number">98</span>, <span class="hljs-number">21</span>, <span class="hljs-number">56</span>, <span class="hljs-number">87</span>, <span class="hljs-number">43</span>, <span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">54</span>, <span class="hljs-number">12</span>, <span class="hljs-number">98</span>],<br>  ],<br>  <span class="hljs-attr">week</span>: [<br>    [<span class="hljs-number">43</span>, <span class="hljs-number">73</span>, <span class="hljs-number">62</span>, <span class="hljs-number">54</span>, <span class="hljs-number">91</span>, <span class="hljs-number">54</span>, <span class="hljs-number">84</span>, <span class="hljs-number">43</span>, <span class="hljs-number">86</span>, <span class="hljs-number">43</span>, <span class="hljs-number">54</span>, <span class="hljs-number">53</span>],<br>    [<span class="hljs-number">32</span>, <span class="hljs-number">54</span>, <span class="hljs-number">34</span>, <span class="hljs-number">87</span>, <span class="hljs-number">32</span>, <span class="hljs-number">45</span>, <span class="hljs-number">62</span>, <span class="hljs-number">68</span>, <span class="hljs-number">93</span>, <span class="hljs-number">54</span>, <span class="hljs-number">54</span>, <span class="hljs-number">24</span>],<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">series</span>: [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;预期销售额&#x27;</span>,<br>    <span class="hljs-attr">data</span>: data.<span class="hljs-property">year</span>[<span class="hljs-number">0</span>],<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">itemStyle</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#00f2f1&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;实际销售额&#x27;</span>,<br>    <span class="hljs-attr">data</span>: data.<span class="hljs-property">year</span>[<span class="hljs-number">1</span>],<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">itemStyle</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#ed3f35&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>第二步：点击后切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 切换</span><br>$(<span class="hljs-string">&#x27;.sales&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.caption a&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 样式</span><br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br>  <span class="hljs-comment">// currData 当前对应的数据</span><br>  <span class="hljs-comment">// this.dataset.type 标签上的data-type属性值，对应data中的属性</span><br>  <span class="hljs-keyword">var</span> currData = data[<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">type</span>]<br>  <span class="hljs-comment">// 修改图表1的数据</span><br>  option.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span> = currData[<span class="hljs-number">0</span>]<br>  <span class="hljs-comment">// 修改图表2的数据</span><br>  option.<span class="hljs-property">series</span>[<span class="hljs-number">1</span>].<span class="hljs-property">data</span> = currData[<span class="hljs-number">1</span>]<br>  <span class="hljs-comment">// 重新设置数据  让图标重新渲染</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>&#125;)<br></code></pre></td></tr></table></figure><p>第三步：tab 栏自动切换效果</p><ul><li>开启定时器每隔 3s，自动让 a 触发点击事件即可</li><li>鼠标经过 sales，关闭定时器，离开开启定时器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = $(<span class="hljs-string">&#x27;.sales .caption a&#x27;</span>)<br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  index++<br>  <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">4</span>) index = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">as</span>.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">click</span>()<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-comment">// 鼠标经过sales，关闭定时器，离开开启定时器</span><br>$(<span class="hljs-string">&#x27;.sales&#x27;</span>).<span class="hljs-title function_">hover</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      index++<br>      <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">4</span>) index = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">as</span>.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">click</span>()<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>自动缩放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当我们浏览器缩放的时候，图表也等比例缩放</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 让我们的图表调用 resize这个方法</span><br>  myChart.<span class="hljs-title function_">resize</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="20-渠道区域-amp-销售进度-布局"><a href="#20-渠道区域-amp-销售进度-布局" class="headerlink" title="20-渠道区域&amp;销售进度-布局"></a>20-渠道区域&amp;销售进度-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 渠道 季度 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;channel panel&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>渠道分布<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;radar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;quarter panel&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>一季度销售进度<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chart&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gauge&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>75<span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span> %<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>1,321<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #6acca3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>              销售额(万元)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>150%<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-dot&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #ed3f35&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>              同比增长<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 渠道区块 */</span><br><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.channel</span>,<br><span class="hljs-selector-class">.quarter</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2.9rem</span>;<br>&#125;<br><span class="hljs-selector-class">.channel</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.25rem</span>;<br>&#125;<br><span class="hljs-selector-class">.channel</span> <span class="hljs-selector-class">.data</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.channel</span> <span class="hljs-selector-class">.data</span> <span class="hljs-selector-class">.radar</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2.1rem</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.channel</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.4rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.0625rem</span>;<br>&#125;<br><span class="hljs-selector-class">.channel</span> small &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.channel</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-comment">/* 季度区块 */</span><br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> -<span class="hljs-number">0.075rem</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.chart</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0.225rem</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.label</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">30%</span>);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.375rem</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.label</span> small &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.gauge</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1.05rem</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.data</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.3rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.125rem</span>;<br>&#125;<br><span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-渠道分布-channel-雷达图"><a href="#21-渠道分布-channel-雷达图" class="headerlink" title="21-渠道分布(channel)-雷达图"></a>21-渠道分布(channel)-雷达图</h3><p>实现步骤：</p><ul><li>寻找官方的类似示例，给予分析，并引入到 HTML 页面中</li><li>按照需求来定制它</li></ul><p>第一步： 参考类似实例： <a href="https://www.echartsjs.com/examples/zh/editor.html?c=radar-aqi">https://www.echartsjs.com/examples/zh/editor.html?c=radar-aqi</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript">;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.radar&#x27;</span>))<br>  <span class="hljs-comment">// 2.指定配置</span><br>  <span class="hljs-keyword">var</span> dataBJ = [[<span class="hljs-number">55</span>, <span class="hljs-number">9</span>, <span class="hljs-number">56</span>, <span class="hljs-number">0.46</span>, <span class="hljs-number">18</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>]]<br>  <span class="hljs-keyword">var</span> lineStyle = &#123;<br>    <span class="hljs-attr">normal</span>: &#123;<br>      <span class="hljs-attr">width</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span>,<br>    &#125;,<br>  &#125;<br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;#161627&#x27;</span>,<br>    <span class="hljs-attr">radar</span>: &#123;<br>      <span class="hljs-attr">indicator</span>: [<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AQI&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">300</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PM2.5&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">250</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PM10&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">300</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CO&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">5</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;NO2&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">200</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;SO2&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>      ],<br>      <span class="hljs-attr">shape</span>: <span class="hljs-string">&#x27;circle&#x27;</span>,<br>      <span class="hljs-attr">splitNumber</span>: <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">name</span>: &#123;<br>        <span class="hljs-attr">textStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgb(238, 197, 102)&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-attr">splitLine</span>: &#123;<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: [<br>            <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.1)&#x27;</span>,<br>            <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.2)&#x27;</span>,<br>            <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.4)&#x27;</span>,<br>            <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.6)&#x27;</span>,<br>            <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.8)&#x27;</span>,<br>            <span class="hljs-string">&#x27;rgba(238, 197, 102, 1)&#x27;</span>,<br>          ].<span class="hljs-title function_">reverse</span>(),<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-attr">splitArea</span>: &#123;<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>      <span class="hljs-attr">axisLine</span>: &#123;<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.5)&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;radar&#x27;</span>,<br>        <span class="hljs-attr">lineStyle</span>: lineStyle,<br>        <span class="hljs-attr">data</span>: dataBJ,<br>        <span class="hljs-attr">symbol</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>        <span class="hljs-attr">itemStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#F9713C&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">areaStyle</span>: &#123;<br>          <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.1</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;<br>  <span class="hljs-comment">// 3.把配置和数据给对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>&#125;)()<br></code></pre></td></tr></table></figure><p>第二步： 按照需求来定制它</p><ul><li>需求 1： 去掉背景颜色，调整雷达图大小 65%</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">radar</span>:&#123;<br>    <span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>    <span class="hljs-comment">// 外半径占据容器大小</span><br>    <span class="hljs-attr">radius</span>: <span class="hljs-string">&#x27;65%&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>需求 2： 指示器轴的分割段数为 4 条（4 个圆圈）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">radar</span>:&#123;<br>    <span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>    <span class="hljs-comment">// 外半径占据容器大小</span><br>    <span class="hljs-attr">radius</span>: <span class="hljs-string">&#x27;65%&#x27;</span>,<br>    <span class="hljs-comment">// 指示器轴的分割段数</span><br>    <span class="hljs-attr">splitNumber</span>: <span class="hljs-number">4</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>需求 3： 雷达图分割线设为白色半透明 0.5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 坐标轴在 grid 区域中的分隔线（圆圈）</span><br>  <span class="hljs-attr">splitLine</span>: &#123;<br>       <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.5)&#x27;</span>,<br>          <span class="hljs-comment">// width: 2,</span><br>          <span class="hljs-comment">// type: &#x27;dashed&#x27;</span><br>          &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><p>需求 4： 雷达图 坐标轴轴线相关设置(竖线) axisLine</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 坐标轴轴线相关设置(竖线)axisLine</span><br><span class="hljs-attr">axisLine</span>: &#123;<br>       <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">lineStyle</span>: &#123;<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.5)&#x27;</span><br>                <span class="hljs-comment">// width: 1,</span><br>                <span class="hljs-comment">// type: &#x27;solid&#x27;</span><br>             &#125;<br> &#125;,<br></code></pre></td></tr></table></figure><p>需求 5： 修饰雷达图文字颜色为 #4c9bfd</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-comment">// 修饰雷达图文本颜色</span><br>     <span class="hljs-attr">textStyle</span>: &#123;<br>       <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span><br>     &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>需求 6： 修饰 区域填充样式 series 对象</p><ul><li>区域填充的背景颜色设置为： rgba(238, 197, 102, 0.6)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-attr">areaStyle</span>: &#123;<br>     <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.6)&#x27;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>区域填充的线条颜色为白色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 线条样式</span><br>  <span class="hljs-attr">lineStyle</span>: &#123;<br>         <span class="hljs-attr">normal</span>: &#123;<br>              <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>              <span class="hljs-comment">// width: 1</span><br>         &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>需求 7： 标记的图形(拐点）设置 注意 series 里面设置</p><ul><li>用圆点显示， 拐点的大小设置为 5</li><li>小圆点设置为白色</li><li>在小圆点上显示相关数据，颜色设置为白色，10 像素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// symbol 标记的样式(拐点），还可以取值&#x27;rect&#x27; 方块 ,&#x27;arrow&#x27; 三角等</span><br><span class="hljs-attr">symbol</span>: <span class="hljs-string">&#x27;circle&#x27;</span>,<br><span class="hljs-comment">// 拐点的大小</span><br><span class="hljs-attr">symbolSize</span>: <span class="hljs-number">5</span>,<br><span class="hljs-comment">// 小圆点（拐点）设置为白色</span><br><span class="hljs-attr">itemStyle</span>: &#123;<br>       <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>&#125;,<br><span class="hljs-comment">// 在圆点上显示相关数据</span><br><span class="hljs-attr">label</span>: &#123;<br>     <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>     <span class="hljs-attr">fontSize</span>: <span class="hljs-number">10</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>需求 8： 鼠标经过显示提示框组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">tooltip</span>: &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 控制提示框组件的显示位置</span><br>    <span class="hljs-attr">position</span>: [<span class="hljs-string">&#x27;60%&#x27;</span>, <span class="hljs-string">&#x27;10%&#x27;</span>],<br>&#125;,<br></code></pre></td></tr></table></figure><p>需求 9： 更换数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 雷达图的指示器 内部填充数据</span><br> <span class="hljs-attr">indicator</span>: [<br>       &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;机场&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>       &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;商场&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>       &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;火车站&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>       &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;汽车站&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>       &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;地铁&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;<br>],<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: [[<span class="hljs-number">90</span>, <span class="hljs-number">19</span>, <span class="hljs-number">56</span>, <span class="hljs-number">11</span>, <span class="hljs-number">34</span>]],<br></code></pre></td></tr></table></figure><p>整个代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 销售渠道模块 雷达图</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.radar&#x27;</span>))<br>  <span class="hljs-comment">// 2.指定配置</span><br><br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">tooltip</span>: &#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 控制提示框组件的显示位置</span><br>      <span class="hljs-attr">position</span>: [<span class="hljs-string">&#x27;60%&#x27;</span>, <span class="hljs-string">&#x27;10%&#x27;</span>],<br>    &#125;,<br>    <span class="hljs-attr">radar</span>: &#123;<br>      <span class="hljs-attr">indicator</span>: [<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;机场&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;商场&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;火车站&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;汽车站&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;地铁&#x27;</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">100</span> &#125;,<br>      ],<br>      <span class="hljs-comment">// 修改雷达图的大小</span><br>      <span class="hljs-attr">radius</span>: <span class="hljs-string">&#x27;65%&#x27;</span>,<br>      <span class="hljs-attr">shape</span>: <span class="hljs-string">&#x27;circle&#x27;</span>,<br>      <span class="hljs-comment">// 分割的圆圈个数</span><br>      <span class="hljs-attr">splitNumber</span>: <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">name</span>: &#123;<br>        <span class="hljs-comment">// 修饰雷达图文字的颜色</span><br>        <span class="hljs-attr">textStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#4c9bfd&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-comment">// 分割的圆圈线条的样式</span><br>      <span class="hljs-attr">splitLine</span>: &#123;<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(255,255,255, 0.5)&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-attr">splitArea</span>: &#123;<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>      &#125;,<br>      <span class="hljs-comment">// 坐标轴的线修改为白色半透明</span><br>      <span class="hljs-attr">axisLine</span>: &#123;<br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.5)&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;radar&#x27;</span>,<br>        <span class="hljs-comment">// 填充区域的线条颜色</span><br>        <span class="hljs-attr">lineStyle</span>: &#123;<br>          <span class="hljs-attr">normal</span>: &#123;<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>            <span class="hljs-attr">width</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span>,<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">data</span>: [[<span class="hljs-number">90</span>, <span class="hljs-number">19</span>, <span class="hljs-number">56</span>, <span class="hljs-number">11</span>, <span class="hljs-number">34</span>]],<br>        <span class="hljs-comment">// 设置图形标记 （拐点）</span><br>        <span class="hljs-attr">symbol</span>: <span class="hljs-string">&#x27;circle&#x27;</span>,<br>        <span class="hljs-comment">// 这个是设置小圆点大小</span><br>        <span class="hljs-attr">symbolSize</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-comment">// 设置小圆点颜色</span><br>        <span class="hljs-attr">itemStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-comment">// 让小圆点显示数据</span><br>        <span class="hljs-attr">label</span>: &#123;<br>          <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">fontSize</span>: <span class="hljs-number">10</span>,<br>        &#125;,<br>        <span class="hljs-comment">// 修饰我们区域填充的背景颜色</span><br>        <span class="hljs-attr">areaStyle</span>: &#123;<br>          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgba(238, 197, 102, 0.6)&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;<br>  <span class="hljs-comment">// 3.把配置和数据给对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>  <span class="hljs-comment">// 当我们浏览器缩放的时候，图表也等比例缩放</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 让我们的图表调用 resize这个方法</span><br>    myChart.<span class="hljs-title function_">resize</span>()<br>  &#125;)<br>&#125;)()<br></code></pre></td></tr></table></figure><h3 id="22-销售进度-quarter-饼状图"><a href="#22-销售进度-quarter-饼状图" class="headerlink" title="22-销售进度 (quarter) -饼状图"></a>22-销售进度 (quarter) -饼状图</h3><p>实现步骤：</p><ul><li>寻找官方的类似示例，给予分析,引入到 HTML 页面中</li><li>按照需求来定制它。</li></ul><p><strong>第一步</strong>：参考官方示例：<a href="https://www.echartsjs.com/examples/zh/editor.html?c=pie-doughnut">https://www.echartsjs.com/examples/zh/editor.html?c=pie-doughnut</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 销售模块 饼形图 半圆形 设置方式</span><br>;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 1. 实例化对象</span><br>  <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.gauge&#x27;</span>))<br>  <span class="hljs-comment">// 2. 指定数据和配置</span><br>  <span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-attr">series</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;销售进度&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>        <span class="hljs-attr">radius</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;70%&#x27;</span>],<br>        <span class="hljs-comment">//是否启用防止标签重叠策略</span><br>        <span class="hljs-comment">// avoidLabelOverlap: false,</span><br>        <span class="hljs-attr">labelLine</span>: &#123;<br>          <span class="hljs-attr">normal</span>: &#123;<br>            <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">data</span>: [&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">100</span> &#125;, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">100</span> &#125;, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">200</span> &#125;],<br>      &#125;,<br>    ],<br>  &#125;<br>  <span class="hljs-comment">// 3. 把数据和配置给实例对象</span><br>  myChart.<span class="hljs-title function_">setOption</span>(option)<br>&#125;)()<br></code></pre></td></tr></table></figure><p><strong>第二步</strong>：进行定制</p><p>需求 1：改成半圆，图表大一些，让<code>50%</code>文字在中心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> option = &#123;<br>  <span class="hljs-attr">series</span>: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>      <span class="hljs-comment">// 放大图形</span><br>      <span class="hljs-attr">radius</span>: [<span class="hljs-string">&#x27;130%&#x27;</span>, <span class="hljs-string">&#x27;150%&#x27;</span>],<br>      <span class="hljs-comment">// 移动下位置  套住50%文字</span><br>      <span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;48%&#x27;</span>, <span class="hljs-string">&#x27;80%&#x27;</span>],<br>      <span class="hljs-attr">label</span>: &#123;<br>        <span class="hljs-attr">normal</span>: &#123;<br>          <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-comment">// 起始角度，支持范围[0, 360]</span><br>      <span class="hljs-attr">startAngle</span>: <span class="hljs-number">180</span>,<br>      <span class="hljs-attr">data</span>: [<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">100</span> &#125;, <span class="hljs-comment">// 不需要名称</span><br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">100</span> &#125;, <span class="hljs-comment">// 不需要名称</span><br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">200</span>, <span class="hljs-attr">itemStyle</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;transparent&#x27;</span> &#125; &#125;, <span class="hljs-comment">// 透明隐藏第三块区域</span><br>      ],<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>需求 2：鼠标经过无需变大，修改第一段颜色渐变#00c9e0-&gt;#005fc1，修改第二段颜色#12274d。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 鼠标经过不变大</span><br><span class="hljs-attr">hoverOffset</span>: <span class="hljs-number">0</span>,<br> <span class="hljs-attr">data</span>: [<br>   &#123;<br>     <span class="hljs-attr">value</span>: <span class="hljs-number">100</span>,<br>     <span class="hljs-attr">itemStyle</span>: &#123;<br>       <span class="hljs-comment">// 颜色渐变#00c9e0-&gt;#005fc1</span><br>       <span class="hljs-attr">color</span>: <span class="hljs-keyword">new</span> echarts.<span class="hljs-property">graphic</span>.<span class="hljs-title class_">LinearGradient</span>(<br>         <span class="hljs-comment">// (x1,y2) 点到点 (x2,y2) 之间进行渐变</span><br>         <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>,<br>         <span class="hljs-number">1</span>,<br>         [<br>           &#123; <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#00c9e0&quot;</span> &#125;, <span class="hljs-comment">// 0 起始颜色</span><br>           &#123; <span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#005fc1&quot;</span> &#125; <span class="hljs-comment">// 1 结束颜色</span><br>         ]<br>       )<br>     &#125;<br>   &#125;,<br> &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">itemStyle</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#12274d&#x27;</span> &#125; &#125;, <span class="hljs-comment">// 颜色#12274d</span><br></code></pre></td></tr></table></figure><h3 id="23-热销排行（top）-布局"><a href="#23-热销排行（top）-布局" class="headerlink" title="23-热销排行（top）-布局"></a>23-热销排行（top）-布局</h3><p>html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 排行榜 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top panel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>全国热榜<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-cup1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #d93f36;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          可爱多<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-cup2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #68d8fe;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          娃哈啥<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-cup3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #4c9bfd;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          喜之郎<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>各省热销 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span>// 近30日 //<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sup&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>25,179 <span class="hljs-tag">&lt;<span class="hljs-name">s</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>河北<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>23,252 <span class="hljs-tag">&lt;<span class="hljs-name">s</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-down&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>20,760 <span class="hljs-tag">&lt;<span class="hljs-name">s</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>江苏<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>23,252 <span class="hljs-tag">&lt;<span class="hljs-name">s</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-down&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>山东<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>20,760 <span class="hljs-tag">&lt;<span class="hljs-name">s</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-up&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- &lt;li&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt; &lt;s class=&quot;icon-up&quot;&gt;&lt;/s&gt;&lt;/span&gt;&lt;/li&gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 排行榜 */</span><br><span class="hljs-selector-class">.top</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">3.5rem</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.all</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2.1rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c9bfd</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.all</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.all</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.all</span> <span class="hljs-selector-attr">[class^=<span class="hljs-string">&#x27;icon-&#x27;</span>]</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.45rem</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.15rem</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.0625rem</span>;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0bace6</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> s &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.8</span>);<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-class">.icon-up</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dc3c33</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-class">.icon-down</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#36be90</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-class">.data</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sup</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sup</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4995f4</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.15rem</span>;<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sup</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#a3c6f2</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">10</span>, <span class="hljs-number">67</span>, <span class="hljs-number">188</span>, <span class="hljs-number">0.2</span>);<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sub</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: space-around;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.15rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">10</span>, <span class="hljs-number">67</span>, <span class="hljs-number">188</span>, <span class="hljs-number">0.2</span>);<br>&#125;<br><span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sub</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#52ffff</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.125rem</span> <span class="hljs-number">0.175rem</span>;<br>&#125;<br><span class="hljs-selector-class">.clock</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">0.45rem</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0.5rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.25rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0bace6</span>;<br>&#125;<br><span class="hljs-selector-class">.clock</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.25rem</span>;<br>&#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1600px</span>) &#123;<br>  <span class="hljs-selector-class">.top</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.9</span>);<br>  &#125;<br>  <span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sup</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.125rem</span> <span class="hljs-number">0.15rem</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.province</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.sub</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.0625rem</span> <span class="hljs-number">0.15rem</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.quarter</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.9</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="23-热销排行（top）-效果"><a href="#23-热销排行（top）-效果" class="headerlink" title="23-热销排行（top）-效果"></a>23-热销排行（top）-效果</h3><p><strong>实现思路</strong>：</p><ul><li>准备后台返回的真实数据</li><li>利用数据渲染各省热销模块 sup 模块 (拼接 html 格式字符串，进行渲染)</li><li>当鼠标进入 tab 的时候<ul><li>激活当前的 tab 样式，删除其他 tab 的样式</li><li>渲染各省热销 sub 模块 (拼接 html 格式字符串，进行渲染)</li></ul></li><li>默认激活第一个 tab 的效果</li><li>开启定时器，按依次切换</li></ul><p><strong>预备知识</strong>：</p><ul><li>扩展知识：ES6 模版字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模版字符</span><br><span class="hljs-keyword">var</span> star = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;刘德华&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//   以前的写法 拼接的时候引号很容易出问题</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我的名字是&#x27;</span> + star.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;我的年龄是&#x27;</span> + star.<span class="hljs-property">age</span>)<br><span class="hljs-comment">//   ES6 模板字符写法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我的名字是<span class="hljs-subst">$&#123;star.name&#125;</span>我的年龄是<span class="hljs-subst">$&#123;star.age&#125;</span>`</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`&lt;span&gt;<span class="hljs-subst">$&#123;star.name&#125;</span>&lt;/span&gt;&lt;span&gt;<span class="hljs-subst">$&#123;star.age&#125;</span>&lt;/span&gt;`</span>)<br></code></pre></td></tr></table></figure><p><strong>开始实现</strong>：</p><p>第一步：得到后台数据（实际开发中，这个数据通过 ajax 请求获得）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hotData = [<br>  &#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-comment">// 城市</span><br>    <span class="hljs-attr">sales</span>: <span class="hljs-string">&#x27;25, 179&#x27;</span>, <span class="hljs-comment">// 销售额</span><br>    <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//  上升还是下降</span><br>    <span class="hljs-attr">brands</span>: [<br>      <span class="hljs-comment">//  品牌种类数据</span><br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可爱多&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;9,086&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;娃哈哈&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;8,341&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喜之郎&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;7,407&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;八喜&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;6,080&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小洋人&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;6,724&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;好多鱼&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,170&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;河北&#x27;</span>,<br>    <span class="hljs-attr">sales</span>: <span class="hljs-string">&#x27;23,252&#x27;</span>,<br>    <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">brands</span>: [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可爱多&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;3,457&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;娃哈哈&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,124&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喜之郎&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;8,907&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;八喜&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;6,080&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小洋人&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;1,724&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;好多鱼&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;1,170&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;上海&#x27;</span>,<br>    <span class="hljs-attr">sales</span>: <span class="hljs-string">&#x27;20,760&#x27;</span>,<br>    <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">brands</span>: [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可爱多&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,345&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;娃哈哈&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;7,109&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喜之郎&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;3,701&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;八喜&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;6,080&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小洋人&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,724&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;好多鱼&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,998&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;江苏&#x27;</span>,<br>    <span class="hljs-attr">sales</span>: <span class="hljs-string">&#x27;23,252&#x27;</span>,<br>    <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">brands</span>: [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可爱多&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,156&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;娃哈哈&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,456&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喜之郎&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;9,737&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;八喜&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,080&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小洋人&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;8,724&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;好多鱼&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;1,770&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;山东&#x27;</span>,<br>    <span class="hljs-attr">sales</span>: <span class="hljs-string">&#x27;20,760&#x27;</span>,<br>    <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">brands</span>: [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可爱多&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;9,567&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;娃哈哈&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;2,345&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喜之郎&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;9,037&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;八喜&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;1,080&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小洋人&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;4,724&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;好多鱼&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;9,999&#x27;</span>, <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span> &#125;,<br>    ],<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p>第二步：根据数据渲染各省热销 sup 模块内容</p><ul><li>删掉原先自带小 li</li><li>遍历数据 $.each()</li><li>拼接字符串把数据渲染到 li 的 span 里面</li><li>追加给 .sup 盒子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> supHTML = <span class="hljs-string">&#x27;&#x27;</span><br>$.<span class="hljs-title function_">each</span>(hotData, <span class="hljs-keyword">function</span> (<span class="hljs-params">index, item</span>) &#123;<br>  <span class="hljs-comment">// console.log(item);</span><br>  supHTML += <span class="hljs-string">`&lt;li&gt;&lt;span&gt;<span class="hljs-subst">$&#123;item.city&#125;</span>&lt;/span&gt;&lt;span&gt; <span class="hljs-subst">$&#123;item.sales&#125;</span> &lt;s class=</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;item.flag ? <span class="hljs-string">&#x27;icon-up&#x27;</span> : <span class="hljs-string">&#x27;icon-down&#x27;</span>&#125;</span>&gt;&lt;/s&gt;&lt;/span&gt;&lt;/li&gt;`</span><br>&#125;)<br>$(<span class="hljs-string">&#x27;.sup&#x27;</span>).<span class="hljs-title function_">html</span>(supHTML)<br></code></pre></td></tr></table></figure><p>第三步：当数据进入 tab 的时候</p><ul><li>激活当前的 tab 样式，删除其他 tab 的样式</li><li>渲染各省热销 sub 模块<ul><li>注意鼠标进入 tab， 只遍历 当前索引号对应的 城市对象里面的 brands</li><li>拼接 html 格式字符串，进行渲染</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><br></code></pre></td></tr></table></figure><p>第四步：默认激活第一个 tab</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 所有的LI</span><br><span class="hljs-keyword">var</span> $lis = $(<span class="hljs-string">&#x27;.province .sup li&#x27;</span>)<br><span class="hljs-comment">// 第一个默认激活</span><br>$lis.<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">mouseenter</span>()<br></code></pre></td></tr></table></figure><p>第五步：开启定时切换</p><ul><li><p>定时器里面 mouseenter 冲突问题的解决方案</p><p><strong>定时器里面不加 mousenter 事件</strong>，而是直接重新渲染数据就可以(执行鼠标经过事件里面的代码)</p><p>最好把渲染的代码封装到函数里面</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  index++<br>  <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">5</span>) index = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// lis.eq(index).mouseenter();</span><br>  <span class="hljs-title function_">render</span>(lis.<span class="hljs-title function_">eq</span>(index))<br>&#125;, <span class="hljs-number">2000</span>)<br><br>$(<span class="hljs-string">&#x27;.province .sup&#x27;</span>).<span class="hljs-title function_">hover</span>(<br>  <span class="hljs-comment">// 鼠标经过事件</span><br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>  &#125;,<br>  <span class="hljs-comment">// 鼠标离开事件</span><br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      index++<br>      <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">5</span>) index = <span class="hljs-number">0</span><br>      <span class="hljs-comment">// lis.eq(index).mouseenter();</span><br>      <span class="hljs-title function_">render</span>(lis.<span class="hljs-title function_">eq</span>(index))<br>    &#125;, <span class="hljs-number">2000</span>)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="24-Echarts-社区介绍"><a href="#24-Echarts-社区介绍" class="headerlink" title="24-Echarts-社区介绍"></a>24-Echarts-社区介绍</h3><blockquote><p><a href="https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all">社区</a>就是一些，活跃的 echart 使用者，交流和贡献定制好的图表的地方。</p></blockquote><p><img src="/imgs/%E5%8F%AF%E8%A7%86%E5%8C%96/1576664444951.png"></p><ul><li>在这里可以找到一些基于 echart 的高度定制好的图表，相当于基于 jquery 开发的插件，这里是基于 echarts 开发的第三方的图表。</li></ul><h3 id="25-Echarts-map-使用（扩展）"><a href="#25-Echarts-map-使用（扩展）" class="headerlink" title="25-Echarts-map 使用（扩展）"></a>25-Echarts-map 使用（扩展）</h3><p>参考社区的例子：<a href="https://gallery.echartsjs.com/editor.html?c=x0-ExSkZDM">https://gallery.echartsjs.com/editor.html?c=x0-ExSkZDM</a> (模拟飞机航线)</p><p>实现步骤：</p><ul><li>第一需要下载 china.js 提供中国地图的 js 文件</li><li>第二个因为里面代码比较多，我们新建一个新的 js 文件 myMap.js 引入</li><li>使用社区提供的配置即可。</li></ul><p>需要修改：</p><ul><li>去掉图例组件和标题组件</li><li>去掉背景颜色</li><li>修改地图省份背景 #142957</li><li>地图放大通过 zoom 设置为 1.2 即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">geo</span>: &#123;<br>  <span class="hljs-attr">map</span>: <span class="hljs-string">&#x27;china&#x27;</span>,<br>  <span class="hljs-attr">zoom</span>: <span class="hljs-number">1.2</span>,<br>  <span class="hljs-attr">label</span>: &#123;<br>    <span class="hljs-attr">emphasis</span>: &#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">roam</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">itemStyle</span>: &#123;<br>    <span class="hljs-attr">normal</span>: &#123;<br>      <span class="hljs-attr">areaColor</span>: <span class="hljs-string">&#x27;#142957&#x27;</span>,<br>      <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&#x27;#0692a4&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">emphasis</span>: &#123;<br>      <span class="hljs-attr">areaColor</span>: <span class="hljs-string">&#x27;#0b1c2d&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>总结：这例子是扩展案例，大家以后可以多看看社区里面的案例。</p><h3 id="26-总结"><a href="#26-总结" class="headerlink" title="26-总结"></a>26-总结</h3><p>总结：实现一个需求，需要去推导，具备推导的能力需要练习，时间问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
